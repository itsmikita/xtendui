//////////////////////
// link
//////////////////////

.link-underline {
  text-decoration: none;
  &:hover, &.hover, &:active, &.active {
    text-decoration: underline;
    span {
      text-decoration: underline;
    }
  }
}

.link-none {
  text-decoration: none;
  &:hover, &.hover, &:active, &.active {
    text-decoration: none;
    span {
      text-decoration: none;
    }
  }
}

// links

a, .alink {
  .link-underline();
  // styles
  color: @primary;
  &:hover, &.hover, &:active, &.active {
    color: darken(@primary, @perc-xs);
  }
  // animations
  .transition-default.out();
  &:hover, &.hover, &:active, &.active {
    .transition-default.active();
  }
}

.btn-link {
  .link-underline();
  // reset text
  font-family: inherit !important;
  font-style: inherit !important;
  font-weight: inherit !important;
  letter-spacing: inherit !important;
  text-transform: inherit !important;
  // reset .btn styles
  &@{btn-design} {
    border: 0 !important;
    background-color: transparent !important;
    box-shadow: none !important;
  }
  // styles
  color: @grey-500;
  &:hover, &.hover, &:active, &.active {
    color: darken(@primary, @perc-xs);
  }
}

// .inverse

.inverse {
  // links color
  a:not(.btn), .alink, .btn-link {
    color: @text-inverse;
    text-decoration: underline;
    &:hover, &.hover, &:active, &.active {
      color: darken(@text-inverse, @perc-xs);
    }
  }
  // buttons color
  .btn-primary-empty,
  .btn-secondary-empty {
    color: @text-inverse !important;
  }
}

//////////////////////
// buttons
//////////////////////

.btn {
  // styles
  .font-sans-semibold();
  line-height: 1.25;
  letter-spacing: .075em;
  text-transform: uppercase;
  &@{btn-design} {
    .design-setup();
    border-radius: @border-radius;
    border-width: @btn-border-width;
    border-style: solid;
    border-color: transparent;
  }
  // options
  .btn-secondary(); // variant
  .btn-medium(); // size
}

// animations

.btn {
  .transition-default.out();
  &@{btn-design} {
    .transition-default.out();
    transform: scale(1);
  }
  &:active, &.active {
    .transition-default.active();
    &@{btn-design} {
      left: .2em;
      right: .2em;
      top: .1em;
      bottom: .1em;
      .transition-default.active();
      transition-duration: @time-small;
    }
  }
}

// variant

.btn-primary {
  .link-none();
  color: fade(@text-inverse, @perc-xl);
  &@{btn-design} {
    border-color: @primary;
    background-color: @primary;
  }
  &:hover, &.hover, &:active, &.active {
    color: @text-inverse;
    &@{btn-design} {
      border-color: @primary;
      background-color: lighten(@primary, @perc-xs);
    }
  }
}

.btn-primary-empty {
  .link-none();
  color: @primary;
  &@{btn-design} {
    border-color: transparent;
    background-color: transparent;
  }
  &:hover, &.hover, &:active, &.active {
    color: @text-inverse;
    &@{btn-design} {
      border-color: @primary;
      background-color: lighten(@primary, @perc-xs);
    }
  }
}

.btn-secondary {
  .link-none();
  color: fade(@text, @perc-xl);
  &@{btn-design} {
    border-color: @secondary;
    background-color: @secondary;
  }
  &:hover, &.hover, &:active, &.active {
    color: @text;
    &@{btn-design} {
      border-color: darken(@secondary, @perc-sm);
      background-color: darken(@secondary, @perc-xs);
    }
  }
}

.btn-secondary-empty {
  .link-none();
  color: fade(@text, @perc-xl);
  &@{btn-design} {
    border-color: transparent;
    background-color: transparent;
  }
  &:hover, &.hover, &:active, &.active {
    color: @text;
    &@{btn-design} {
      border-color: darken(@secondary, @perc-sm);
      background-color: darken(@secondary, @perc-xs);
    }
  }
}

// size

.btn-tiny {
  padding: .5em 1em;
  font-size: 10px;
}

.btn-small {
  padding: .6em 1.2em;
  font-size: 1.2rem;
}

.btn-medium {
  padding: .6em 1.2em;
  font-size: 1.325rem; // @FIX odd rem with .025 added
}

.btn-big {
  padding: .6em 1.2em;
  font-size: 1.4rem;
}

.btn-giant {
  padding: .6em 1.2em;
  font-size: 1.525rem; // @FIX odd rem with .025 added
}

// special

.btn-nodesign {
  &@{btn-design} {
    display: none;
  }
}

.btn-squared {
  &@{btn-design} {
    border-radius: 0;
  }
}

.btn-noborder {
  &@{btn-design} {
    border: 0;
  }
}

.btn-tall {
  padding-top: .9em;
  padding-bottom: .9em;
}

.btn-short {
  padding-top: .3em;
  padding-bottom: .3em;
}

.btn-wide {
  padding-left: 1.8em;
  padding-right: 1.8em;
}

.btn-narrow {
  padding-left: .6em;
  padding-right: .6em;
}

.btn-none {
  padding: 0;
}

.btn-none-x {
  padding-left: 0;
  padding-right: 0;
}

.btn-none-y {
  padding-top: 0;
  padding-bottom: 0;
}

.btn-icon {
  padding: .6em .8em;
}

.btn-transform {
  letter-spacing: 0;
  text-transform: none;
}

// custom

.btn-close {
  .btn-primary-empty(); // variant
  .btn-icon() !important; // special
  .icon-xt(@content: @icon-xt-close, @size: @icon-medium, @sr-only: true);
}

.btn-caret {
  .display(flex) !important;
  .align-items-center();
  .justify-content-between();
  .icon-xt(@content: @icon-xt-chevron-down, @size: @icon-tiny);
  &::after {
    .margin(left, 2em);
  }
  &.active {
    .icon-xt(@content: @icon-xt-chevron-up, @size: @icon-tiny);
    &::after {
      .anim-bottom.active();
      opacity: 1;
    }
  }
  &.out {
    &::after {
      .anim-top.active();
      opacity: 1;
    }
  }
}

//////////////////////
// disabled
//////////////////////

[disabled],
.disabled {
  opacity: .75;
}

//////////////////////
// drop
//////////////////////

.drop {
  // styles
  > .drop-inner {
    &@{drop-design} {
      .design-setup();
      border-radius: @border-radius;
      border-width: 1px;
      border-style: solid;
      border-color: transparent;
      box-shadow: 0 0 4px fade(@black, @perc-xs), 0 6px 10px fade(@black, @perc-sm);
    }
    > .content {
      > .list {
        .padding(y, 1.3rem); // vertical space
        min-width: 18rem;
        .list-btn-all({ .btn-squared(); padding-left: 2.2rem; padding-right: 2.2rem; white-space: nowrap; }); // not overridable
      }
    }
  }
  // options
  .drop-white(); // variant
  .drop-left(); // position
  .drop-bottom(); // position
}

// animations

.drop-outer {
  &, > .drop {
    animation-duration: @time-medium + @time-small; // needed for .out animation timing, put max animation time
  }
  &.active {
    > .drop > .drop-inner {
      &@{drop-design} {
        .anim-zoom.active();
        opacity: 1;
      }
      > .content {
        .anim-vertical.active();
        animation-delay: @time-small;
        animation-fill-mode: forwards;
        opacity: 0;
      }
    }
    .xt-backdrop {
      .xt-backdrop.active();
    }
  }
  &.out {
    > .drop > .drop-inner {
      &@{drop-design} {
        .anim-zoom.out();
        animation-delay: @time-small;
        animation-fill-mode: forwards;
        opacity: 1;
      }
      > .content {
        .anim-vertical.out();
        opacity: 0;
      }
    }
    .xt-backdrop {
      .xt-backdrop.out();
    }
  }
}

// addons

.drop-disable {
  // disable custom animation
  > .drop > .drop-inner {
    > .content {
      .no-anim() !important;
      opacity: 1 !important;
    }
  }
}

.drop-max-height {
  > .drop-inner > .content {
    overflow-y: auto;
    max-height: 25rem;
    .overflow-style();
  }
}

.drop-max-width {
  > .drop-inner > .content {
    overflow-x: auto;
    max-width: 35rem;
    .overflow-style();
  }
}

// variant

.drop-white {
  > .drop-inner {
    color: @text;
    &@{drop-design} {
      border-color: darken(@white, @perc-xs);
      background-color: @white;
    }
    > .content > .list-drop {
      .list-btn-default({ .btn-primary-empty() });
    }
  }
}

.drop-primary {
  > .drop-inner {
    color: @text-inverse;
    &@{drop-design} {
      border-color: darken(@primary, @perc-xs);
      background-color: @primary;
    }
    > .content > .list-drop {
      .list-btn-default({ .btn-primary() });
    }
  }
}

.drop-secondary {
  > .drop-inner {
    color: @text;
    &@{drop-design} {
      border-color: darken(@secondary, @perc-xs);
      background-color: @secondary;
    }
    > .content > .list-drop {
      .list-btn-default({ .btn-secondary() });
    }
  }
}

// special

.drop-nodesign {
  > .drop-inner {
    &@{drop-design} {
      display: none;
    }
  }
}

.drop-squared {
  > .drop-inner {
    &@{drop-design} {
      border-radius: 0;
    }
  }
}

.drop-noborder {
  > .drop-inner {
    &@{drop-design} {
      border: 0;
    }
  }
}

//////////////////////
// overlay
//////////////////////

.overlay {
  // styles
  .overlay-inner {
    &@{overlay-design} {
      .design-setup();
      border-radius: @border-radius;
      border-width: 1px;
      border-style: solid;
      border-color: transparent;
      box-shadow: 0 0 30rem fade(@black, @perc-sm);
    }
    > .content {
      padding: 3rem;
      @media @min-sm {
        padding: 4rem;
      }
    }
    > .btn-close {
      position: absolute;
      top: 2px;
      right: 2px;
      .btn-giant();
    }
  }
  // options
  .overlay-white(); // variant
  .overlay-size(small); // size
}

// addons

.overlay-screen {
  // styles
  box-shadow: 0 0 30rem fade(@black, @perc-sm);
  .overlay {
    &@{overlay-design} {
      .design-setup();
      border-width: 1px;
      border-style: solid;
      border-color: transparent;
    }
    .overlay-inner {
      &@{overlay-design} {
        .display(none);
      }
    }
  }
  // options
  .overlay-white(); // variant
  .overlay-size(giant); // size
  .overlay-squared();
  .overlay-noborder();
}

.overlay-pos {
  // styles
  .overlay {
    .overlay-left& {
      max-width: 510px !important;
    }
    .overlay-right& {
      max-width: 510px !important;
    }
  }
  // options
  .overlay-white(); // variant
  .overlay-squared();
  .overlay-noborder();
}

// animations

.overlay-outer {
  animation-duration: @time-medium + @time-small; // needed for .out animation timing, put max animation time
  &.active {
    .overlay-inner {
      &@{overlay-design} {
        .anim-zoom.active();
        opacity: 1;
      }
      > .btn-close,
      > .content {
        .anim-vertical.active();
        animation-delay: @time-small;
        animation-fill-mode: forwards;
        opacity: 0;
      }
    }
    .xt-backdrop {
      .xt-backdrop.active();
    }
    // addons
    &.overlay-screen {
      .anim-opacity.active();
      opacity: 1;
    }
    &.overlay-left {
      .overlay-inner {
        &@{overlay-design} {
          .anim-left.active();
          opacity: 1;
        }
        > .btn-close,
        > .content {
          .anim-left.active();
          animation-delay: @time-small;
          animation-fill-mode: forwards;
          opacity: 0;
        }
      }
    }
    &.overlay-right {
      .overlay-inner {
        &@{overlay-design} {
          .anim-right.active();
          opacity: 1;
        }
        > .btn-close,
        > .content {
          .anim-right.active();
          animation-delay: @time-small;
          animation-fill-mode: forwards;
          opacity: 0;
        }
      }
    }
  }
  &.out {
    .overlay-inner {
      &@{overlay-design} {
        .anim-zoom.out();
        animation-delay: @time-small;
        animation-fill-mode: forwards;
        opacity: 1;
      }
      > .btn-close,
      > .content {
        .anim-vertical.out();
        opacity: 0;
      }
    }
    .xt-backdrop {
      .xt-backdrop.out();
    }
    // addons
    &.overlay-screen {
      .anim-opacity.out();
      animation-delay: @time-small;
      animation-fill-mode: forwards;
      opacity: 1;
    }
    &.overlay-left {
      .overlay-inner {
        &@{overlay-design} {
          .anim-left.out();
          animation-delay: @time-small;
          animation-fill-mode: forwards;
          opacity: 1;
        }
        > .btn-close,
        > .content {
          .anim-left.out();
          opacity: 0;
        }
      }
    }
    &.overlay-right {
      .overlay-inner {
        &@{overlay-design} {
          .anim-right.out();
          animation-delay: @time-small;
          animation-fill-mode: forwards;
          opacity: 1;
        }
        > .btn-close,
        > .content {
          .anim-right.out();
          opacity: 0;
        }
      }
    }
  }
}

// variant

.overlay-white {
  .overlay-inner,
  &.overlay-screen .overlay {
    color: @text;
    &@{overlay-design} {
      border-color: @white;
      background-color: @white;
    }
    > .btn-close {
      .btn-primary-empty();
    }
  }
}

.overlay-primary {
  .overlay-inner,
  &.overlay-screen .overlay {
    color: @text-inverse;
    &@{overlay-design} {
      border-color: @primary;
      background-color: @primary;
    }
    > .btn-close {
      .btn-primary();
    }
  }
}

.overlay-secondary {
  .overlay-inner,
  &.overlay-screen .overlay {
    color: @text;
    &@{overlay-design} {
      border-color: @secondary;
      background-color: @secondary;
    }
    > .btn-close {
      .btn-secondary();
    }
  }
}

// special

.overlay-squared {
  .overlay-inner,
  &.overlay-screen .overlay {
    &@{overlay-design} {
      border-radius: 0;
    }
  }
}

.overlay-noborder {
  .overlay-inner,
  &.overlay-screen .overlay {
    &@{overlay-design} {
      border: 0;
    }
  }
}

.overlay-none {
  .overlay-inner {
    > .content {
      padding: 0 !important;
    }
  }
}

//////////////////////
// preload
//////////////////////

// addons

.preload-background {
  &::before {
    .design-setup();
    background-color: @white;
  }
}

.preload-full {
  .padding(x, 33%) !important;
}

// variant

.preload {
  overflow: hidden;
  height: 2px;
  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
  }
  &::before {
    z-index: 2;
    width: 100%;
    background-color: @grey-250;
  }
  &::after {
    z-index: 3;
    width: 0;
    background-color: @black;
    // animations
    animation: anim-preload 1000ms infinite linear;
  }
}

@keyframes anim-preload {
  0% {
    left: 0;
    width: 0;
  }
  50% {
    left: 0;
    width: 100%;
    animation-timing-function: @bez-out;
  }
  100% {
    left: 100%;
    width: 0;
  }
}

// activation

.preload-container {
  .anim-opacity.active();
  opacity: 1;
}

/* USAGE:
<div class="preload-container preload-html preload-relative">
    <div class="preload"></div>
</div>
<div class="preload-container preload-background preload-full">
    <div class="preload"></div>
</div>
*/

/* USAGE:
// xt-preload
document.querySelectorAll('html')[0].classList.add('preloaded');
*/

/* put any selector here you want to preload
.main-container {
  visibility: hidden;
  html.preloaded &,
  html.preload-fade & {
    visibility: visible;
  }
}
*/