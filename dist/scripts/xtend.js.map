{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/scripts/core.js","src/scripts/interaction/drop.js","src/scripts/interaction/overlay.js","src/scripts/interaction/toggle.js","src/scripts/others/ajax.js","src/scripts/others/smooth.js","src/scripts/polyfill.js","src/scripts/presentation/fade.js","src/scripts/presentation/slider.js","src/scripts/presentation/sticky.js","src/scripts/xtend.js"],"names":[],"mappings":"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","file":"xtend.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\nimport Xt from './xtend';\n\n//////////////////////\n// Core\n//////////////////////\n\nclass Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    let self = this;\n    self.object = object;\n    self.optionsJs = optionsJs;\n    self.componentName = self.constructor.componentName;\n    // init\n    self.init(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init\n   */\n  init(object = false, optionsJs = false) {\n    let self = this;\n    self.object = object || self.object;\n    self.optionsJs = optionsJs || self.optionsJs;\n    // var\n    self.classes = [];\n    self.classesIn = [];\n    self.classesOut = [];\n    self.elements = [];\n    self.targets = [];\n    self.currentIndex = null;\n    self.initialCurrents = [];\n    self.detail = {};\n    self.disabled = false;\n    self.detail.queueOn = [];\n    self.detail.queueOff = [];\n    self.detail.inverseDirection = false;\n    self.detail.autoPaused = false;\n    self.destroyElements = [document, window, self.object];\n    // destroy if already done\n    if (self.object.getAttribute('data-' + self.componentName + '-done')) {\n      self.destroy();\n    }\n    // setup\n    self.object.setAttribute('data-' + self.componentName + '-done', 'true');\n    // set component to element\n    Xt.set(self.object, self.componentName, self);\n    // init\n    self.initVars();\n    self.initSetup();\n    self.initScope();\n    self.initCurrents();\n    self.initCheck();\n    self.eventCheck();\n    self.initEvents();\n    self.initAria();\n  }\n\n  /**\n   * init vars\n   */\n  initVars() {\n    let self = this;\n    // option\n    self.optionsDefault = {\n      \"classIn\": \"in\",\n      \"classOut\": \"out\",\n      \"instant\": false,\n      \"autoClose\": false,\n      \"onBlock\": false,\n      \"offBlock\": false,\n      \"loop\": true,\n      \"jump\": false,\n      \"delayOn\": false,\n      \"delayOff\": false,\n      \"durationOn\": false,\n      \"durationOff\": false,\n      \"wheel\": {\n        \"selector\": false,\n        \"block\": 500\n      },\n      \"keyboard\": {\n        \"selector\": false\n      },\n      \"auto\": {\n        \"time\": false,\n        \"step\": 1,\n        \"initial\": true,\n        \"loop\": true,\n        \"inverse\": false,\n        \"pause\": false\n      },\n      \"aria\": {\n        \"tabindex\": true,\n        \"controls\": true,\n        \"labelledby\": true\n      }\n    };\n    self.optionsDefault = Xt.merge([self.optionsDefault, self.constructor.optionsDefault]);\n    // js options\n    self.options = Xt.merge([self.optionsDefault, self.optionsJs]);\n    // markup options\n    let markupOptions = self.object.getAttribute('data-' + self.componentName);\n    self.options = Xt.merge([self.options, markupOptions ? JSON.parse(markupOptions) : {}]);\n    // classes\n    if (self.classes) {\n      self.classes = [...self.options.class.split(' ')];\n    }\n    if (self.classesIn) {\n      self.classesIn = [...self.options.classIn.split(' ')];\n    }\n    if (self.classesOut) {\n      self.classesOut = [...self.options.classOut.split(' ')];\n    }\n  }\n\n  /**\n   * init setup\n   */\n  initSetup() {\n    let self = this;\n    let options = self.options;\n    // setup (based on xtend mode)\n    if (options.targets && options.targets.indexOf('#') !== -1) {\n      // xtend all mode\n      self.mode = 'unique';\n      self.container = document.documentElement;\n      options.max = Infinity;\n      self.namespace = self.componentName + '-' + options.targets.toString() + '-' + self.classes.toString();\n    } else {\n      // xtend unique mode\n      self.mode = 'multiple';\n      self.container = self.object;\n      self.container.dataset.uniqueId = self.container.dataset.uniqueId ? self.container.dataset.uniqueId : Xt.getuniqueId();\n      self.namespace = self.componentName + '-' + self.container.dataset.uniqueId;\n    }\n    // final namespace\n    self.namespace = self.namespace.replace(/^[^a-z]+|[^\\w:.-]+/gi, '');\n    // currents array based on namespace (so shared between Xt objects)\n    self.setCurrents([]);\n  }\n\n  /**\n   * init elements, targets and currents\n   */\n  initScope() {\n    let self = this;\n    // elements\n    self.initScopeElements();\n    // targets\n    self.initScopeTargets();\n  }\n\n  /**\n   * init elements\n   */\n  initScopeElements() {\n    let self = this;\n    let options = self.options;\n    // elements\n    if (options.elements) {\n      let arr = Array.from(Xt.arrSingle(self.container.querySelectorAll(options.elements)));\n      arr = arr.filter(x => !x.classList.contains('xt-clone')); // filter out clone\n      arr = arr.filter(x => !x.getAttribute('data-xt-nav')); // filter out nav\n      self.elements = arr;\n      self.destroyElements.push(...self.elements);\n    }\n    if (!self.elements.length) {\n      self.elements = Xt.arrSingle(self.object);\n      // @FIX set namespace for next frame\n      requestAnimationFrame(function () {\n        let arr = Array.from(Xt.arrSingle(document.querySelectorAll('[data-xt-namespace=' + self.namespace + ']')));\n        arr = arr.filter(x => !x.classList.contains('xt-clone')); // filter out clone\n        arr = arr.filter(x => !x.getAttribute('data-xt-nav')); // filter out nav\n        self.elements = arr;\n        self.destroyElements.push(...self.elements);\n      });\n    }\n  }\n\n  /**\n   * init targets\n   */\n  initScopeTargets() {\n    let self = this;\n    let options = self.options;\n    // targets\n    if (options.targets) {\n      let arr = Array.from(self.container.querySelectorAll(options.targets));\n      arr = arr.filter(x => !Xt.parents(x, options.targets).length); // filter out parent\n      arr = arr.filter(x => !x.classList.contains('xt-clone')); // filter out clone\n      self.targets = arr;\n      self.destroyElements.push(...self.targets);\n    }\n  }\n\n  /**\n   * init currents\n   */\n  initCurrents() {\n    let self = this;\n    let options = self.options;\n    // initial\n    self.initial = true;\n    // @FIX set namespace for next frame\n    for (let el of self.elements) {\n      el.dataset.xtNamespace = self.namespace;\n    }\n    // automatic initial currents\n    cancelAnimationFrame(parseFloat(self.object.dataset.xtCurrentsFrame));\n    self.object.dataset.xtCurrentsFrame = requestAnimationFrame(function () {\n      let elements = self.getElementsSingle();\n      if (elements.length) {\n        for (let element of elements) {\n          // remove activations\n          let found = self.initReset(element);\n          // found\n          if (found) {\n            // initial\n            self.initial = true;\n            // activate\n            self.eventOn(element, true);\n          } else {\n            // initial\n            self.initial = false;\n          }\n        }\n        // if currents < min\n        let todo = options.min - self.getCurrents().length;\n        if (todo > 0) {\n          // initial\n          self.initial = true;\n          // activate\n          for (let i = 0; i < todo; i++) {\n            self.eventOn(self.elements[i], true);\n          }\n        } else {\n          // initial\n          self.initial = false;\n          // auto\n          if (options.auto && options.auto.initial) {\n            self.eventAutoStart();\n          }\n        }\n        self.initialCurrents = self.getCurrents();\n      }\n    }).toString();\n  }\n\n  /**\n   * init reset activation\n   * @param {Node|HTMLElement|EventTarget|Window} element Element to check and reset\n   * @returns {Boolean} if element was activated\n   */\n  initReset(element) {\n    let self = this;\n    let options = self.options;\n    let found = false;\n    // elements\n    let group = element.getAttribute('data-xt-group');\n    if (group) {\n      let groupElements = Array.from(self.elements).filter(x => x.getAttribute('data-xt-group') === group);\n      for (let el of groupElements) {\n        if (el.classList.contains(self.classes[0])) {\n          el.classList.remove(...self.classes);\n          found = true;\n        }\n      }\n    } else {\n      if (element.classList.contains(self.classes[0])) {\n        element.classList.remove(...self.classes);\n        found = true;\n      }\n    }\n    // targets\n    let targets = self.getTargets(element);\n    for (let tr of targets) {\n      if (tr.classList.contains(self.classes[0])) {\n        tr.classList.remove(...self.classes);\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * init aria\n   */\n  initAria() {\n    let self = this;\n    let options = self.options;\n    // aria\n    if (options.aria) {\n      if (self.targets.length) {\n        for (let el of self.elements) {\n          let ariaEls = self.getInside(el, options.ariaControls);\n          let ariaEl = ariaEls.length ? ariaEls[0] : el;\n          // id\n          if (options.aria === true || options.aria.labelledby || options.aria.controls) {\n            let id = ariaEl.getAttribute('id');\n            if (!id) {\n              ariaEl.setAttribute('id', Xt.getuniqueId());\n            }\n          }\n          // selected\n          ariaEl.setAttribute('aria-selected', 'false');\n        }\n        for (let tr of self.targets) {\n          let els = self.getElementsFromTarget(tr);\n          // expanded\n          let role = tr.getAttribute('role');\n          if (role === 'tabpanel' || role === 'listbox' || role === 'dialog') {\n            tr.setAttribute('aria-expanded', 'false');\n          }\n          // tabindex\n          if (options.aria === true || options.aria.tabindex) {\n            let focusables = tr.querySelectorAll(Xt.focusables);\n            for (let focusable of focusables) {\n              focusable.setAttribute('tabindex', '-1');\n            }\n          }\n          // id\n          if (options.aria === true || options.aria.labelledby || options.aria.controls) {\n            let id = tr.getAttribute('id');\n            if (!id) {\n              tr.setAttribute('id', Xt.getuniqueId());\n            }\n          }\n          // labelledby\n          if (options.aria === true || options.aria.labelledby) {\n            let str = ' ';\n            str += tr.getAttribute('aria-labelledby') || '';\n            for (let el of els) {\n              let ariaEls = self.getInside(el, options.ariaControls);\n              let ariaEl = ariaEls.length ? ariaEls[0] : el;\n              str += ' ' + ariaEl.getAttribute('id');\n            }\n            tr.setAttribute('aria-labelledby', str.trim());\n          }\n        }\n        if (options.aria === true || options.aria.controls) {\n          for (let el of self.elements) {\n            let trs = self.getTargets(el);\n            let ariaEls = self.getInside(el, options.ariaControls);\n            let ariaEl = ariaEls.length ? ariaEls[0] : el;\n            // controls\n            let str = ' ';\n            str += ariaEl.getAttribute('aria-controls') || '';\n            for (let tr of trs) {\n              str += ' ' + tr.getAttribute('id');\n            }\n            ariaEl.setAttribute('aria-controls', str.trim());\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * init check\n   */\n  initCheck() {\n    let self = this;\n    // resize\n    let checkHandler = Xt.dataStorage.put(window, 'resize.check' + '.' + self.namespace,\n      self.eventCheckHandler.bind(self).bind(self));\n    addEventListener('resize', checkHandler);\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    let options = self.options;\n    // toggle\n    options.toggle = options.toggle !== undefined ? options.toggle : !options.off;\n    // event\n    for (let el of self.elements) {\n      // event on\n      let onHandler = Xt.dataStorage.put(el, options.on + '.' + self.namespace,\n        self.eventOnHandler.bind(self).bind(self, el));\n      if (options.on) {\n        let events = [...options.on.split(' ')];\n        for (let event of events) {\n          el.addEventListener(event, onHandler);\n        }\n        // @FIX prevents click on touch until clicked two times\n        if (events.includes('mouseenter') || events.includes('mousehover')) {\n          let touchLinksStartHandler = Xt.dataStorage.put(el, 'touchend.touchfix' + '.' + self.namespace,\n            self.eventTouchLinksStartHandler.bind(self).bind(self, el));\n          el.addEventListener('touchend', touchLinksStartHandler);\n        }\n      }\n      el.addEventListener('on.xt', onHandler);\n      // event off\n      let offHandler = Xt.dataStorage.put(el, options.off + '.' + self.namespace,\n        self.eventOffHandler.bind(self).bind(self, el));\n      if (options.off) {\n        let events = [...options.off.split(' ')];\n        for (let event of events) {\n          el.addEventListener(event, offHandler);\n        }\n      }\n      el.addEventListener('off.xt', offHandler);\n    }\n    // listener\n    for (let tr of self.targets) {\n      let el = self.getElementsFromTarget(tr)[0];\n      if (el) {\n        // event\n        let onHandler = Xt.dataStorage.get(el, options.on + '.' + self.namespace);\n        tr.addEventListener('on.xt', onHandler);\n        let offHandler = Xt.dataStorage.get(el, options.off + '.' + self.namespace);\n        tr.addEventListener('off.xt', offHandler);\n      }\n    }\n    // auto\n    if (options.auto && options.auto.time) {\n      // focus auto\n      addEventListener('focus', self.eventAutoResumeHandler.bind(self));\n      // blur auto\n      addEventListener('blur', self.eventAutoPauseHandler.bind(self));\n      // autoPause\n      for (let el of self.object.querySelectorAll(options.auto.pause)) {\n        // pause\n        let autoPauseOnHandler = Xt.dataStorage.put(el, 'mouseenter focus' + '.' + self.namespace,\n          self.eventAutoPauseHandler.bind(self));\n        let eventsPause = ['mouseenter', 'focus'];\n        for (let event of eventsPause) {\n          el.addEventListener(event, autoPauseOnHandler);\n        }\n        // resume\n        let autoResumeOnHandler = Xt.dataStorage.put(el, 'mouseleave blur' + '.' + self.namespace,\n          self.eventAutoResumeHandler.bind(self));\n        let eventsResume = ['mouseleave', 'blur'];\n        for (let event of eventsResume) {\n          el.addEventListener(event, autoResumeOnHandler);\n        }\n      }\n    }\n    // jump\n    if (options.jump) {\n      for (let jump of self.targets) {\n        let jumpHandler = Xt.dataStorage.put(jump, 'click.jump' + '.' + self.namespace,\n          self.eventJumpHandler.bind(self).bind(self, jump));\n        jump.addEventListener('click', jumpHandler, true); // useCapture or it gets the click from elements inside the target\n        // jump\n        if (!self.disabled) {\n          jump.classList.add('jump');\n        } else {\n          jump.classList.remove('jump');\n        }\n      }\n    }\n    // navigation\n    if (options.navigation) {\n      let navs = self.object.querySelectorAll(options.navigation);\n      if (navs.length) {\n        self.destroyElements.push(...navs);\n        for (let nav of navs) {\n          let navHandler = Xt.dataStorage.put(nav, 'click.nav' + '.' + self.namespace,\n            self.eventNavHandler.bind(self).bind(self, nav));\n          nav.addEventListener('click', navHandler);\n        }\n      }\n    }\n    // keyboard\n    if (options.wheel && options.wheel.selector) {\n      let wheels = options.wheel.selector === 'object' ? Xt.arrSingle(self.object) : self.object.querySelectorAll(options.wheel.selector);\n      self.destroyElements.push(...wheels);\n      for (let wheel of wheels) {\n        // wheel\n        let eventWheel = 'onwheel' in wheel ? 'wheel' : wheel.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n        let wheelHandler = Xt.dataStorage.put(wheel, eventWheel + '.' + self.namespace,\n          self.eventWheelHandler.bind(self).bind(self, wheel));\n        wheel.addEventListener(eventWheel, wheelHandler);\n      }\n    }\n    // keyboard\n    if (options.keyboard && options.keyboard.selector) {\n      let keyboards = options.keyboard.selector === 'object' ? Xt.arrSingle(self.object) : self.object.querySelectorAll(options.keyboard.selector);\n      self.destroyElements.push(...keyboards);\n      for (let keyboard of keyboards) {\n        keyboard.setAttribute('tabindex', '0');\n        // focus\n        let keyboardFocusHandler = Xt.dataStorage.put(keyboard, 'focus.keyboard' + '.' + self.namespace,\n          self.eventKeyboardFocusHandler.bind(self).bind(self, keyboard));\n        keyboard.addEventListener('focus', keyboardFocusHandler);\n        // blur\n        let keyboardBlurHandler = Xt.dataStorage.put(keyboard, 'blur.keyboard' + '.' + self.namespace,\n          self.eventKeyboardBlurHandler.bind(self).bind(self, keyboard));\n        keyboard.addEventListener('blur', keyboardBlurHandler);\n      }\n    }\n    // autoClose\n    if (options.autoClose) {\n      let autoCloseHandler = Xt.dataStorage.put(window, 'autoClose' + '.' + self.namespace,\n        self.eventAutoCloseHandler.bind(self));\n      addEventListener('autoClose.xt', autoCloseHandler);\n      let autoCloseFixHandler = Xt.dataStorage.put(window, 'autoCloseFix' + '.' + self.namespace,\n        self.eventAutoCloseFixHandler.bind(self));\n      addEventListener('autoCloseFix.xt', autoCloseFixHandler);\n    }\n    // images\n    for (let el of self.elements) {\n      let imgs = el.querySelectorAll('img');\n      let imgsLoaded = 0;\n      for (let img of imgs) {\n        if (!img.complete) {\n          let imgLoadHandler = Xt.dataStorage.put(img, 'load' + '.' + self.namespace,\n            self.eventImgLoaded.bind(self).bind(self, el, img));\n          img.addEventListener('load', imgLoadHandler);\n          // @FIX srcset: call only one time\n          img.addEventListener('load', function(e) {\n            img.removeEventListener('load', imgLoadHandler);\n          });\n        } else {\n          imgsLoaded++;\n        }\n      }\n      if (imgs.length > 0 && imgsLoaded === imgs.length) {\n        requestAnimationFrame(self.eventImgLoaded.bind(self).bind(self, el));\n      }\n    }\n    for (let tr of self.targets) {\n      let imgs = tr.querySelectorAll('img');\n      let imgsLoaded = 0;\n      for (let img of imgs) {\n        if (!img.complete) {\n          let imgLoadHandler = Xt.dataStorage.put(img, 'load' + '.' + self.namespace,\n            self.eventImgLoaded.bind(self).bind(self, tr, img));\n          img.addEventListener('load', imgLoadHandler);\n          // @FIX srcset: call only one time\n          img.addEventListener('load', function(e) {\n            img.removeEventListener('load', imgLoadHandler);\n          });\n        } else {\n          imgsLoaded++;\n        }\n      }\n      if (imgs.length > 0 && imgsLoaded === imgs.length) {\n        requestAnimationFrame(self.eventImgLoaded.bind(self).bind(self, tr));\n      }\n    }\n  }\n\n  //////////////////////\n  // handler\n  //////////////////////\n\n  /**\n   * check handler\n   * @param {Event} e\n   */\n  eventCheckHandler(e = null) {\n    let self = this;\n    // handler\n    Xt.eventDelay(e, self.object, function () {\n      self.eventCheck();\n    }, 'resize.xt.core');\n  }\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement|EventTarget|Window} element\n   * @param {Event} e\n   */\n  eventOnHandler(element, e) {\n    let self = this;\n    let options = self.options;\n    // handler\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      // event block\n      if (options.onBlock) {\n        let now = new Date().getTime();\n        let old = parseFloat(element.dataset['xtEventBlock' + e.type]) || 0;\n        element.dataset['xtEventBlock' + e.type] = now.toString();\n        if (now - old < options.onBlock) {\n          return false;\n        }\n      }\n      // on handler\n      let eventLimit = self.container.querySelectorAll('.event-limit');\n      if (eventLimit.length) {\n        if (!Xt.checkNested(e.target, eventLimit)) {\n          self.eventOn(element, false, e);\n        }\n      } else {\n        self.eventOn(element, false, e);\n      }\n    }\n  }\n\n  /**\n   * element off handler\n   * @param {Node|HTMLElement|EventTarget|Window} element\n   * @param {Event} e\n   */\n  eventOffHandler(element, e) {\n    let self = this;\n    let options = self.options;\n    // handler\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      // event block\n      if (options.offBlock) {\n        let now = new Date().getTime();\n        let old = parseFloat(element.dataset['xtEventBlock' + e.type]) || 0;\n        element.dataset['xtEventBlock' + e.type] = now.toString();\n        if (now - old < options.offBlock) {\n          return false;\n        }\n      }\n      // off handler\n      let eventLimit = self.container.querySelectorAll('.event-limit');\n      if (eventLimit.length) {\n        if (!Xt.checkNested(e.target, eventLimit)) {\n          self.eventOff(element, false, e);\n        }\n      } else {\n        self.eventOff(element, false, e);\n      }\n    }\n  }\n\n  /**\n   * init prevents click on touch until clicked two times\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventTouchLinksStartHandler(el, e) {\n    let self = this;\n    // event touchLinks\n    let touchLinksHandler = Xt.dataStorage.put(el, 'click.touchfix' + '.' + self.namespace,\n      self.eventTouchLinksHandler.bind(self).bind(self, el));\n    el.addEventListener('click', touchLinksHandler);\n    // event touchReset\n    let touchResetHandler = Xt.dataStorage.put(el, 'off.touchfix' + '.' + self.namespace,\n      self.eventTouchLinksResetHandler.bind(self).bind(self, el));\n    el.addEventListener('off.xt', touchResetHandler);\n  }\n\n  /**\n   * remove prevents click on touch until clicked two times\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   */\n  eventTouchLinksEndHandler(el) {\n    let self = this;\n    // event touchLinks\n    let touchLinksHandler = Xt.dataStorage.get(el, 'click.touchfix' + '.' + self.namespace);\n    el.removeEventListener('click', touchLinksHandler);\n    // event touchReset\n    let touchResetHandler = Xt.dataStorage.get(el, 'off.touchfix' + '.' + self.namespace);\n    el.removeEventListener('off.xt', touchResetHandler);\n  }\n\n  /**\n   * prevents click on touch until clicked two times\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventTouchLinksHandler(el, e) {\n    let self = this;\n    if (!el.dataset.xtTouchLinksDone) {\n      e.preventDefault();\n      el.dataset.xtTouchLinksDone = 'true';\n    } else {\n      self.eventTouchLinksEndHandler(el);\n      delete el.dataset.xtTouchLinksDone;\n    }\n  }\n\n  /**\n   * reset prevents click on touch until clicked two times\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventTouchLinksResetHandler(el, e) {\n    let self = this;\n    self.eventTouchLinksEndHandler(el);\n    delete el.dataset.xtTouchLinksDone;\n  }\n\n  /**\n   * auto pause handler\n   * @param {Event} e\n   */\n  eventAutoPauseHandler(e) {\n    let self = this;\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      if (!self.detail.autoPaused) {\n        self.eventAutoPause();\n        // paused\n        self.detail.autoPaused = true;\n      }\n    }\n  }\n\n  /**\n   * auto resume handler\n   * @param {Event} e\n   */\n  eventAutoResumeHandler(e) {\n    let self = this;\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      if (self.detail.autoPaused) {\n        self.eventAutoStart();\n        // paused\n        self.detail.autoPaused = false;\n      }\n    }\n  }\n\n  /**\n   * jump handler\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventJumpHandler(el, e) {\n    let self = this;\n    // handler\n    self.eventJump(el, e);\n  }\n\n  /**\n   * nav handler\n   * @param {Node|HTMLElement|EventTarget|Window} nav\n   * @param {Event} e\n   */\n  eventNavHandler(nav, e) {\n    let self = this;\n    // handler\n    self.eventNav(nav, e);\n  }\n\n  /**\n   * wheel handler\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventWheelHandler(el, e) {\n    let self = this;\n    let options = self.options;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // handler\n    e.preventDefault(); // prevent default scrolling\n    // block\n    if (!el.dataset.xtWheelBlock) {\n      if (options.wheel.block) {\n        el.dataset.xtWheelBlock = 'true';\n        clearTimeout(parseFloat(el.dataset.xtWheelTimeout));\n        el.dataset.xtWheelTimeout = setTimeout(function () {\n          delete el.dataset.xtWheelBlock;\n        }, options.wheel.block).toString();\n      }\n      // wheel\n      let delta = -e.deltaY || -e.detail || e.wheelDelta || e.wheelDeltaY;\n      if (delta < 0) {\n        self.goToNext(1);\n      } else if (delta > 0) {\n        self.goToPrev(1);\n      }\n    }\n  }\n\n  /**\n   * keyboard focus handler\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventKeyboardFocusHandler(el, e) {\n    let self = this;\n    // handler\n    let keyboardHandler = Xt.dataStorage.put(document, 'keyup.keyboard' + '.' + self.namespace,\n      self.eventKeyboardHandler.bind(self));\n    document.addEventListener('keyup', keyboardHandler);\n  }\n\n  /**\n   * keyboard blur handler\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventKeyboardBlurHandler(el, e) {\n    // handler\n    let keyboardHandler = Xt.dataStorage.get(document, 'keyup.keyboard' + '.' + self.namespace);\n    document.removeEventListener('keyup', keyboardHandler);\n  }\n\n  /**\n   * keyboard handler\n   * @param {Event} e\n   */\n  eventKeyboardHandler(e) {\n    let self = this;\n    let options = self.options;\n    // key\n    let code = e.keyCode ? e.keyCode : e.which;\n    let prev;\n    let next;\n    if (options.keyboard.vertical) {\n      if (options.keyboard.inverse) {\n        prev = 40;\n        next = 38;\n      } else {\n        prev = 38;\n        next = 40;\n      }\n    } else {\n      if (options.keyboard.inverse) {\n        prev = 39;\n        next = 37;\n      } else {\n        prev = 37;\n        next = 39;\n      }\n    }\n    if (code === prev) {\n      self.goToPrev(1);\n    } else if (code === next) {\n      self.goToNext(1);\n    }\n  }\n\n  /**\n   * autoClose handler\n   * @param {Event} e\n   */\n  eventAutoCloseHandler(e) {\n    let self = this;\n    // restart\n    let currents = self.getCurrents();\n    for (let current of currents) {\n      self.eventOff(current);\n    }\n  }\n\n  /**\n   * autoCloseFix handler\n   * @param {Event} e\n   */\n  eventAutoCloseFixHandler(e) {\n    let self = this;\n    // special @TODO refactor\n    self.specialScrollbarOff();\n  }\n\n  /**\n   * imageLoaded\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Node|HTMLElement|EventTarget|Window} img\n   * @param {Event} e\n   */\n  eventImgLoaded(el, img = null, e = null) {\n    let self = this;\n    // listener dispatch\n    let detail = self.eDetailSet(e);\n    el.dispatchEvent(new CustomEvent('imageLoaded.xt', {detail: detail}));\n  }\n\n  //////////////////////\n  // event util\n  //////////////////////\n\n  /**\n   * get elements array single (one element per group)\n   * @returns {Array} array of elements\n   */\n  getElementsSingle() {\n    let self = this;\n    // groups\n    let groups = [];\n    for (let element of self.elements) {\n      // choose element by group\n      let group = element.getAttribute('data-xt-group');\n      if (group) {\n        let found = groups.filter(x => x.getAttribute('data-xt-group') === group);\n        if (!found.length) {\n          groups.push(element);\n        }\n      } else {\n        groups.push(element);\n      }\n    }\n    return groups;\n  }\n\n  /**\n   * choose which elements to activate/deactivate (based on xtend mode and containers)\n   * @param {Node|HTMLElement|EventTarget|Window} element Element that triggered interaction\n   * @returns {Object} object.all and object.single\n   */\n  getElements(element) {\n    let self = this;\n    // getElements\n    if (!self.elements || !self.elements.length) {\n      return {all: [], single: null};\n    }\n    if (self.mode === 'unique') {\n      // choose all elements\n      let final = self.elements;\n      return {all: Xt.arrSingle(final), single: final.length > 1 ? final[0] : final};\n    } else if (self.mode === 'multiple') {\n      // choose element by group\n      let group = element.getAttribute('data-xt-group');\n      if (group) {\n        // all group elements if group\n        let groupElements = Array.from(self.elements).filter(x => x.getAttribute('data-xt-group') === group);\n        let final = Xt.arrSingle(groupElements);\n        return {all: final, single: final[0]};\n      } else {\n        // element if not group\n        let final = element;\n        return {all: Xt.arrSingle(final), single: final};\n      }\n    }\n  }\n\n  /**\n   * choose which targets to activate/deactivate (based on xtend mode and containers)\n   * @param {Node|HTMLElement|EventTarget|Window} element Element that triggered interaction\n   * @returns {Array}\n   */\n  getTargets(element) {\n    let self = this;\n    // getTargets\n    if (!self.targets || !self.targets.length) {\n      return [];\n    }\n    if (self.mode === 'unique') {\n      // choose all targets\n      return self.targets;\n    } else if (self.mode === 'multiple') {\n      // choose only target by group\n      let group = element.getAttribute('data-xt-group');\n      let groupElements = Array.from(self.elements).filter(x => x.getAttribute('data-xt-group') === group);\n      let groupTargets = Array.from(self.targets).filter(x => x.getAttribute('data-xt-group') === group);\n      let final;\n      if (group) {\n        // all group targets if group\n        final = groupTargets;\n      } else {\n        // not group targets by index if not group\n        let index = groupElements.findIndex(x => x === element);\n        final = groupTargets[index];\n      }\n      return Xt.arrSingle(final);\n    }\n  }\n\n  /**\n   * choose which elements to activate/deactivate from target (based on xtend mode and containers)\n   * @param {Node|HTMLElement|EventTarget|Window} target Target to trigger interaction on\n   * @returns {Array}\n   */\n  getElementsFromTarget(target) {\n    let self = this;\n    // getElementsFromTarget\n    if (!self.elements || !self.elements.length) {\n      return [];\n    }\n    if (self.mode === 'unique') {\n      // choose all targets\n      return self.elements;\n    } else if (self.mode === 'multiple') {\n      // choose only target by group\n      let group = target.getAttribute('data-xt-group');\n      let groupElements = Array.from(self.elements).filter(x => x.getAttribute('data-xt-group') === group);\n      let groupTargets = Array.from(self.targets).filter(x => x.getAttribute('data-xt-group') === group);\n      let final;\n      if (group) {\n        // all group targets if group\n        final = groupElements;\n      } else {\n        // not group targets by index if not group\n        let index = groupTargets.findIndex(x => x === target);\n        final = groupElements[index];\n      }\n      return Xt.arrSingle(final);\n    }\n  }\n\n  /**\n   * query for inside\n   * @param {Node|HTMLElement|NodeList|Array} element Element to search from\n   * @param {String} query Query for querySelectorAll\n   * @returns {Array}\n   */\n  getInside(element, query) {\n    if (!query) {\n      return [];\n    }\n    if (!element.length) {\n      // search element\n      return Xt.arrSingle(element.querySelectorAll(query));\n    } else {\n      // search array\n      let arr = [];\n      for (let el of element) {\n        arr.push(...el.querySelectorAll(query));\n      }\n      return arr;\n    }\n  }\n\n  /**\n   * get currents based on namespace (so shared between Xt objects)\n   * @returns {Array}\n   */\n  getCurrents() {\n    let self = this;\n    // getCurrents\n    return Xt.currents[self.namespace];\n  }\n\n  /**\n   * set currents based on namespace (so shared between Xt objects)\n   * @param {Array} arr\n   */\n  setCurrents(arr) {\n    let self = this;\n    // setCurrents\n    Xt.currents[self.namespace] = arr;\n  }\n\n  /**\n   * add current based on namespace (so shared between Xt objects)\n   * @param {Node|HTMLElement|EventTarget|Window} element To be added\n   */\n  addCurrent(element) {\n    let self = this;\n    // addCurrent\n    if (!self.hasCurrent(element)) {\n      let arr = Xt.currents[self.namespace];\n      arr.push(element);\n    }\n  }\n\n  /**\n   * remove currents based on namespace (so shared between Xt objects)\n   * @param {Node|HTMLElement|EventTarget|Window} element To be removed\n   */\n  removeCurrent(element) {\n    let self = this;\n    // removeCurrent\n    Xt.currents[self.namespace] = Xt.currents[self.namespace].filter(x => x !== element);\n  }\n\n  /**\n   * if element is in current (so shared between Xt objects)\n   * @param {Node|HTMLElement|EventTarget|Window} element To be checked\n   */\n  hasCurrent(element) {\n    let self = this;\n    // hasCurrent\n    return Xt.currents[self.namespace].filter(x => x === element).length;\n  }\n\n  /**\n   * check element on\n   * @param {Node|HTMLElement|EventTarget|Window} element To be checked\n   */\n  checkOn(element) {\n    let self = this;\n    // check\n    let groupElements = self.getElements(element);\n    return !self.hasCurrent(groupElements.single);\n  }\n\n  /**\n   * check element off\n   * @param {Node|HTMLElement|EventTarget|Window} element To be checked\n   */\n  checkOff(element) {\n    let self = this;\n    let options = self.options;\n    // skip if min >= currents\n    if (options.min - self.getCurrents().length >= 0) {\n      return false;\n    }\n    // check\n    let groupElements = self.getElements(element);\n    return self.hasCurrent(groupElements.single);\n  }\n\n  /**\n   * check elements animation\n   * @param {NodeList|Array} elements To be checked\n   * @returns {Boolean} If elements are animating\n   */\n  checkAnim(elements) {\n    let self = this;\n    let options = self.options;\n    // check\n    elements = elements.filter(x => x.classList.contains(...self.classesIn) || x.classList.contains(...self.classesOut));\n    return elements.length > 0;\n  }\n\n  /**\n   * set index and direction\n   * @param {Node|HTMLElement|EventTarget|Window} element Current element\n   */\n  setIndexAndDirection(element) {\n    let self = this;\n    // setIndexAndDirection\n    let index = 0;\n    for (let [i, el] of self.elements.entries()) {\n      if (el === element) {\n        index = i;\n        break;\n      }\n    }\n    self.detail.inverseDirection = self.detail.inverseDirectionForce !== null ? self.detail.inverseDirectionForce : self.currentIndex > index;\n    self.detail.inverseDirectionForce = null;\n    self.currentIndex = index;\n  }\n\n  /**\n   * set index and direction\n   * @param {Node|HTMLElement|EventTarget|Window} el Elements to be deactivated\n   */\n  decorateDirection(el) {\n    let self = this;\n    // decorateDirection\n    if (!self.detail.inverseDirection) {\n      el.classList.remove('inverse');\n    } else {\n      el.classList.add('inverse');\n    }\n  }\n\n  /**\n   * set e detail\n   * @param {Event} e\n   */\n  eDetailSet(e = null) {\n    let detail = e && e.detail && typeof e.detail === 'object' ? e.detail : {};\n    detail.skip = true;\n    detail.self = this;\n    return detail;\n  }\n\n  //////////////////////\n  // event\n  //////////////////////\n\n  /**\n   * resize\n   */\n  eventCheck() {\n    let self = this;\n    // check disabled\n    if (self.object instanceof HTMLElement // not on window\n      && getComputedStyle(self.object, '::after').getPropertyValue('content').replace(/['\"]+/g, '') === 'xt-disable') {\n      self.disable();\n    } else if (self.disabled) {\n      self.enable();\n    }\n  }\n\n  /**\n   * element on\n   * @param {Node|HTMLElement|EventTarget|Window} element To be activated\n   * @param {Boolean} force\n   * @param {Event} e\n   * @returns {Boolean} If activated\n   */\n  eventOn(element, force = false, e = null) {\n    let self = this;\n    let options = self.options;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // toggle\n    if (force || self.checkOn(element)) {\n      // auto\n      if (options.auto && options.auto.time) {\n        self.eventAutoStop();\n      }\n      // on\n      let groupElements = self.getElements(element);\n      self.addCurrent(groupElements.single);\n      self.setIndexAndDirection(element);\n      let targets = self.getTargets(element);\n      let elementsInner = self.getInside(element, options.elementsInner);\n      let targetsInner = self.getInside(targets, options.targetsInner);\n      // if currents > max\n      let currents = self.getCurrents();\n      if (currents.length > options.max) {\n        // deactivate old\n        self.eventOff(currents[0]);\n      }\n      // detail\n      let detail = self.eDetailSet(e);\n      // queue obj\n      let obj = {};\n      if (groupElements.all.length) {\n        obj['elements'] = {\n          detail: detail,\n          queueEls: groupElements.all,\n          groupElements: groupElements\n        };\n      }\n      if (targets.length) {\n        obj['targets'] = {\n          detail: detail,\n          queueEls: targets,\n          groupElements: groupElements\n        };\n      }\n      if (elementsInner.length) {\n        obj['elementsInner'] = {\n          detail: detail,\n          queueEls: elementsInner,\n          groupElements: groupElements\n        };\n      }\n      if (targetsInner.length) {\n        obj['targetsInner'] = {\n          detail: detail,\n          queueEls: targetsInner,\n          groupElements: groupElements\n        };\n      }\n      if (typeof options.instant !== 'object' && options.instant === true) {\n        self.detail.queueOn = [obj];\n      } else {\n        self.detail.queueOn.unshift(obj);\n      }\n      // queue run\n      for (let type in self.detail.queueOn[0]) {\n        self.queueOn(type, 0, true);\n      }\n      // activated\n      return true;\n    } else if (options.toggle && (!e || !e.detail || !e.detail.skipToggle)) { // not when skipToggle\n      // off\n      self.eventOff(element, e);\n    }\n    // activated\n    return false;\n  }\n\n  /**\n   * element off\n   * @param {Node|HTMLElement|EventTarget|Window} element To be deactivated\n   * @param {Boolean} force\n   * @param {Event} e\n   * @returns {Boolean} If deactivated\n   */\n  eventOff(element, force = false, e = null) {\n    let self = this;\n    let options = self.options;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // toggle\n    if (force || self.checkOff(element)) {\n      // if currents === min\n      if (self.getCurrents().length === options.min) {\n        return false;\n      }\n      // off\n      let groupElements = self.getElements(element);\n      self.removeCurrent(groupElements.single);\n      if (self.getCurrents().length === 0) {\n        self.currentIndex = null;\n      }\n      let targets = self.getTargets(element);\n      let elementsInner = self.getInside(element, options.elementsInner);\n      let targetsInner = self.getInside(targets, options.targetsInner);\n      // auto\n      if (!self.getCurrents().length) {\n        self.eventAutoStop();\n      }\n      // detail\n      let detail = self.eDetailSet(e);\n      // queue obj\n      let obj = {};\n      if (groupElements.all.length) {\n        obj['elements'] = {\n          detail: detail,\n          queueEls: groupElements.all,\n          groupElements: groupElements\n        };\n      }\n      if (targets.length) {\n        obj['targets'] = {\n          detail: detail,\n          queueEls: targets,\n          groupElements: groupElements\n        };\n      }\n      if (elementsInner.length) {\n        obj['elementsInner'] = {\n          detail: detail,\n          queueEls: elementsInner,\n          groupElements: groupElements\n        };\n      }\n      if (targetsInner.length) {\n        obj['targetsInner'] = {\n          detail: detail,\n          queueEls: targetsInner,\n          groupElements: groupElements\n        };\n      }\n      if (typeof options.instant !== 'object' && options.instant === true) {\n        self.detail.queueOff = [obj];\n      } else {\n        self.detail.queueOff.unshift(obj);\n      }\n      // if queue too big\n      if (self.detail.queueOff.length > options.max) {\n        // remove queue on and done other queue\n        let removedOn = self.detail.queueOn.shift();\n        self.queueOnEnd(removedOn);\n        // remove queue off and  done other queue\n        let removedOff = self.detail.queueOff.shift();\n        self.queueOffEnd(removedOff);\n      }\n      // queue run\n      for (let type in self.detail.queueOff[0]) {\n        self.queueOff(type, 0, true);\n      }\n      // deactivated\n      return true;\n    }\n    // deactivated\n    return false;\n  }\n\n  /**\n   * auto start\n   */\n  eventAutoStart() {\n    let self = this;\n    let options = self.options;\n    if (options.auto && options.auto.time) {\n      // paused\n      self.detail.autoPaused = false;\n      // clear\n      clearInterval(self.object.dataset.xtAutoStartInterval);\n      // auto\n      let time = options.auto.time;\n      if (self.currentIndex !== null &&  // not when nothing activated\n        !self.initial || options.auto.initial) { // not when initial\n        self.object.dataset.xtAutoStartInterval = setInterval(function () { // interval because can become :visible\n          if (self.object.offsetWidth || self.object.offsetHeight || self.object.getClientRects().length) { // :visible\n            // auto\n            if (getComputedStyle(self.object).pointerEvents !== 'none') { // not when disabled\n              if (options.auto.inverse) {\n                self.goToPrev(options.auto.step, true, options.auto.loop);\n              } else {\n                self.goToNext(options.auto.step, true, options.auto.loop);\n              }\n            }\n          }\n        }, time).toString();\n        // listener dispatch\n        let detail = self.eDetailSet();\n        self.object.dispatchEvent(new CustomEvent('start.xt.auto', {detail: detail}));\n      }\n    }\n  }\n\n  /**\n   * auto stop\n   */\n  eventAutoStop() {\n    let self = this;\n    let options = self.options;\n    if (options.auto && options.auto.time) {\n      // clear\n      clearInterval(self.object.dataset.xtAutoStartInterval);\n      // listener dispatch\n      let detail = self.eDetailSet();\n      self.object.dispatchEvent(new CustomEvent('stop.xt.auto', {detail: detail}));\n    }\n  }\n\n  /**\n   * auto stop\n   */\n  eventAutoPause() {\n    let self = this;\n    let options = self.options;\n    if (options.auto && options.auto.time) {\n      // clear\n      clearInterval(self.object.dataset.xtAutoStartInterval);\n      // listener dispatch\n      let detail = self.eDetailSet();\n      self.object.dispatchEvent(new CustomEvent('pause.xt.auto', {detail: detail}));\n    }\n  }\n\n  /**\n   * jump\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventJump(el, e) {\n    let self = this;\n    // check disabled\n    if (el.classList.contains('jumps--none') || Xt.parents(el, '.jumps--none').length) {\n      return false;\n    }\n    // jump\n    let element = self.getElementsFromTarget(el)[0];\n    if (self.checkOn(element)) {\n      self.eventOn(element);\n    }\n  }\n\n  /**\n   * nav\n   * @param {Node|HTMLElement|EventTarget|Window} nav\n   * @param {Event} e\n   */\n  eventNav(nav, e) {\n    let self = this;\n    // nav\n    let index = 0;\n    if (self.currentIndex !== null) {\n      index = self.currentIndex + parseFloat(nav.getAttribute('data-xt-nav'));\n    }\n    self.goToIndex(index, true);\n  }\n\n  //////////////////////\n  // queue util\n  //////////////////////\n\n  /**\n   * queue on end\n   * @param {Object} obj Queue object to end\n   */\n  queueOnEnd(obj) {\n    let self = this;\n    // check if done\n    for (let type in obj) {\n      if (obj[type].done) {\n        for (let el of obj[type].queueEls) {\n          // clear timeout and frame\n          cancelAnimationFrame(parseFloat(el.dataset.xtCollapseFrame));\n          clearTimeout(el.dataset.xtDelayTimeout);\n          clearTimeout(el.dataset.xtAnimTimeout);\n          // done other queue\n          self.queueOffDelayDone(obj, el, type, true);\n          self.queueOffAnimDone(obj, el, type, true);\n        }\n      }\n    }\n  }\n\n  /**\n   * queue off end\n   * @param {Object} obj Queue object to end\n   */\n  queueOffEnd(obj) {\n    let self = this;\n    // check if done\n    for (let type in obj) {\n      if (obj[type].done) {\n        for (let el of obj[type].queueEls) {\n          // clear timeout and frame\n          cancelAnimationFrame(parseFloat(el.dataset.xtCollapseFrame));\n          clearTimeout(el.dataset.xtDelayTimeout);\n          clearTimeout(el.dataset.xtAnimTimeout);\n          // done other queue\n          self.queueOnDelayDone(obj, el, type, true);\n          self.queueOnAnimDone(obj, el, type, true);\n        }\n      }\n    }\n  }\n\n  /**\n   * queue on done\n   * @param {Object} obj Queue object\n   * @param {String} type Type of element\n   * @param {Boolean} skipQueue If skip queue\n   */\n  queueOnDone(obj, type, skipQueue = false) {\n    let self = this;\n    let options = self.options;\n    // check\n    if (obj[type] && !skipQueue) {\n      // done\n      obj[type].done = true;\n      let done = 0;\n      for (let type in obj) {\n        if (obj[type].done) {\n          done++;\n        }\n      }\n      // one done\n      if (done === 1) {\n        // special\n        self.specialBackdrop(obj);\n        self.specialClassHtmlOn();\n        self.specialScrollbarOn();\n        // focus\n        if (options.scrollbar) {\n          let el = obj['targets'] ? obj['targets'].queueEls[0] : obj['elements'].queueEls[0];\n          Xt.focus.block = true;\n          Xt.focusLimit.on(el);\n          el.focus();\n        }\n      }\n      // queue\n      self.queueOff(type, self.detail.queueOff.length - 1);\n      // all done\n      if (done === Object.entries(obj).length) {\n        // auto\n        if (options.auto && options.auto.time) {\n          self.eventAutoStart();\n        }\n        // request @TODO refactor\n        if (self.ajaxRequest) {\n          if (!self.initial) {\n            self.ajaxRequest(obj[type].groupElements.single);\n          }\n        }\n        // remove queue\n        self.detail.queueOn.pop();\n        // initial\n        self.initial = false;\n      }\n    }\n  }\n\n  /**\n   * queue off done\n   * @param {Object} obj Queue object\n   * @param {String} type Type of element\n   * @param {Boolean} skipQueue If skip queue\n   */\n  queueOffDone(obj, type, skipQueue = false) {\n    let self = this;\n    let options = self.options;\n    // check\n    if (obj[type] && !skipQueue) {\n      // done\n      obj[type].done = true;\n      let done = 0;\n      for (let type in obj) {\n        if (obj[type].done) {\n          done++;\n        }\n      }\n      // one done\n      if (done === 1) {\n        // special\n        self.specialClassHtmlOff();\n        // focus\n        if (options.scrollbar) {\n          Xt.focus.block = false;\n          Xt.focusLimit.off();\n          Xt.focus.current.focus();\n        }\n      }\n      // queue\n      self.queueOn(type, self.detail.queueOn.length - 1);\n      // all done\n      if (done === Object.entries(obj).length) {\n        // special\n        self.specialScrollbarOff();\n        // remove queue\n        self.detail.queueOff.pop();\n      }\n    }\n  }\n\n  //////////////////////\n  // queue\n  //////////////////////\n\n  /**\n   * queue on\n   * @param {String} type Type of element\n   * @param {Number} index Queue index\n   * @param {Boolean} queueInitial If it's the initial queue\n   */\n  queueOn(type, index, queueInitial = false) {\n    let self = this;\n    // queueOn\n    let obj = self.detail.queueOn[index];\n    if (obj && obj[type] && !obj[type].done) {\n      let objOther = self.detail.queueOff[self.detail.queueOff.length - 1];\n      if (!objOther || !objOther[type] || objOther[type].done) {\n        self.queueOnDelay(obj, type, queueInitial);\n      }\n    }\n  }\n\n  /**\n   * queue off\n   * @param {String} type Type of element\n   * @param {Number} index Queue index\n   * @param {Boolean} queueInitial If it's the initial queue\n   */\n  queueOff(type, index, queueInitial = false) {\n    let self = this;\n    // queueOff\n    let obj = self.detail.queueOff[index];\n    if (obj && obj[type] && !obj[type].done) {\n      let objOther = self.detail.queueOn[self.detail.queueOn.length - 1];\n      if (!objOther || !objOther[type] || objOther[type].done) {\n        self.queueOffDelay(obj, type, queueInitial);\n      }\n    }\n  }\n\n  /**\n   * queue on delay\n   * @param {Object} obj Queue object\n   * @param {String} type Type of elements\n   * @param {Boolean} queueInitial If it's the initial queue\n   */\n  queueOnDelay(obj, type, queueInitial) {\n    let self = this;\n    let options = self.options;\n    // delay\n    let els = obj[type].queueEls;\n    for (let el of els) {\n      // delay\n      let delay;\n      if (options.delayOn) {\n        if (isNaN(options.delayOn)) {\n          let count = parseInt(el.dataset.xtOnCount) || els.findIndex(x => x === el);\n          let tot = parseInt(el.dataset.xtOnTot) || els.length;\n          let fnc = options.delayOn;\n          if (typeof fnc === 'string') {\n            fnc = new Function('current', 'total', fnc);\n          }\n          delay = fnc(count, tot - 1).toString();\n        } else {\n          delay = queueInitial ? 0 : options.delayOn;\n        }\n      }\n      // delay fnc\n      clearTimeout(el.dataset.xtDelayTimeout);\n      clearTimeout(el.dataset.xtAnimTimeout);\n      if (delay) {\n        el.dataset.xtDelayTimeout = setTimeout(function () {\n          self.queueOnDelayDone(obj, el, type);\n        }, delay).toString();\n      } else {\n        self.queueOnDelayDone(obj, el, type);\n      }\n      // queue done\n      if (typeof options.instant !== 'object' && options.instant === true) {\n        if (el === els[els.length - 1]) { // only if last element\n          self.queueOnDone(obj, type);\n        }\n      }\n    }\n  }\n\n  /**\n   * queue off delay\n   * @param {Object} obj Queue object\n   * @param {String} type Type of elements\n   * @param {Boolean} queueInitial If it's the initial queue\n   */\n  queueOffDelay(obj, type, queueInitial) {\n    let self = this;\n    let options = self.options;\n    // delay\n    let els = obj[type].queueEls;\n    for (let el of els) {\n      // delay\n      let delay;\n      if (options.delayOff) {\n        if (isNaN(options.delayOff)) {\n          let count = parseInt(el.dataset.xtOffCount) || els.findIndex(x => x === el);\n          let tot = parseInt(el.dataset.xtOffTot) || els.length;\n          let fnc = options.delayOff;\n          if (typeof fnc === 'string') {\n            fnc = new Function('current', 'total', fnc);\n          }\n          delay = fnc(count, tot - 1).toString();\n        } else {\n          delay = queueInitial ? 0 : options.delayOff;\n        }\n      }\n      // delay fnc\n      clearTimeout(el.dataset.xtDelayTimeout);\n      clearTimeout(el.dataset.xtAnimTimeout);\n      if (delay) {\n        el.dataset.xtDelayTimeout = setTimeout(function () {\n          self.queueOffDelayDone(obj, el, type);\n        }, delay).toString();\n      } else {\n        self.queueOffDelayDone(obj, el, type);\n      }\n      // queue done\n      if (typeof options.instant !== 'object' && options.instant === true) {\n        if (el === els[els.length - 1]) { // only if last element\n          self.queueOffDone(obj, type);\n        }\n      }\n    }\n  }\n\n  /**\n   * queue on start\n   * @param {Object} obj Queue object\n   * @param {Node|HTMLElement|EventTarget|Window} el Elements to be deactivated\n   * @param {String} type Type of elements\n   * @param {Boolean} skipQueue If skip queue\n   */\n  queueOnDelayDone(obj, el, type, skipQueue = false) {\n    let self = this;\n    let options = self.options;\n    // activate\n    el.classList.add(...self.classes);\n    el.classList.add(...self.classesIn);\n    el.classList.remove(...self.classesOut);\n    self.decorateDirection(el);\n    // special\n    let before = getComputedStyle(el, '::before').getPropertyValue('content').replace(/['\"]+/g, '');\n    let after = getComputedStyle(el, '::after').getPropertyValue('content').replace(/['\"]+/g, '');\n    self.specialCenter(el, before, after);\n    self.specialMiddle(el, before, after);\n    self.specialCollapseOn(el, before, after);\n    if (type === 'targets') {\n      // appendTo\n      if (options.appendTo) {\n        let appendToTarget = document.querySelectorAll(options.appendTo);\n        let appendOrigin = document.querySelectorAll('[data-xt-origin=' + self.namespace + ']');\n        if (!appendOrigin.length) {\n          el.before(Xt.createElement('<div class=\"xt-ignore\" data-xt-origin=' + self.namespace + '></div>'));\n        }\n        el.classList.add('xt-ignore'); // don't trigger Xt.observer\n        appendToTarget[0].appendChild(el);\n      }\n    }\n    if (type === 'targets' || type === 'targetsInner') {\n      self.specialCloseOn(el, obj[type].groupElements.single);\n    }\n    // aria\n    if (options.aria) {\n      if (type === 'elements') {\n        // selected\n        let ariaEls = self.getInside(el, options.ariaControls);\n        let ariaEl = ariaEls.length ? ariaEls[0] : el;\n        ariaEl.setAttribute('aria-selected', 'true');\n      }\n      if (type === 'targets') {\n        // expanded\n        let role = el.getAttribute('role');\n        if (role === 'tabpanel' || role === 'listbox' || role === 'dialog') {\n          el.setAttribute('aria-expanded', 'true');\n        }\n      }\n    }\n    // queue\n    if (!skipQueue) {\n      self.queueOnAnim(obj, el, type);\n    }\n    // queue done\n    if (typeof options.instant === 'object' && options.instant[type]) {\n      let els = obj[type].queueEls;\n      if (el === els[els.length - 1]) { // only if last element\n        self.queueOnDone(obj, type, skipQueue);\n      }\n    }\n    // listener dispatch\n    el.dispatchEvent(new CustomEvent('on.xt', {detail: obj[type].detail}));\n  }\n\n  /**\n   * queue off start\n   * @param {Object} obj Queue object\n   * @param {Node|HTMLElement|EventTarget|Window} el Elements to be deactivated\n   * @param {String} type Type of elements\n   * @param {Boolean} skipQueue If skip queue\n   */\n  queueOffDelayDone(obj, el, type, skipQueue = false) {\n    let self = this;\n    let options = self.options;\n    // deactivate\n    el.classList.remove(...self.classes);\n    el.classList.remove(...self.classesIn);\n    el.classList.add(...self.classesOut);\n    self.decorateDirection(el);\n    // special\n    let before = getComputedStyle(el, '::before').getPropertyValue('content').replace(/['\"]+/g, '');\n    let after = getComputedStyle(el, '::after').getPropertyValue('content').replace(/['\"]+/g, '');\n    self.specialCollapseOff(el, before, after);\n    if (type === 'targets' || type === 'targetsInner') {\n      self.specialCloseOff(el);\n    }\n    // queue\n    if (!skipQueue) {\n      self.queueOffAnim(obj, el, type);\n    }\n    // queue done\n    if (typeof options.instant === 'object' && options.instant[type]) {\n      let els = obj[type].queueEls;\n      if (el === els[els.length - 1]) { // only if last element\n        self.queueOffDone(obj, type, skipQueue);\n      }\n    }\n    // listener dispatch\n    el.dispatchEvent(new CustomEvent('off.xt', {detail: obj[type].detail}));\n  }\n\n  /**\n   * queue on anim\n   * @param {Object} obj Queue object\n   * @param {Node|HTMLElement|EventTarget|Window} el Element to be animated\n   * @param {String} type Type of element\n   */\n  queueOnAnim(obj, el, type) {\n    let self = this;\n    let options = self.options;\n    // anim\n    let duration = Xt.animTime(el, options.durationOn);\n    clearTimeout(el.dataset.xtAnimTimeout);\n    if (!duration) {\n      self.queueOnAnimDone(obj, el, type);\n    } else {\n      el.dataset.xtAnimTimeout = setTimeout(function () {\n        self.queueOnAnimDone(obj, el, type);\n      }, duration).toString();\n    }\n  }\n\n  /**\n   * queue off anim\n   * @param {Object} obj Queue object\n   * @param {Node|HTMLElement|EventTarget|Window} el Element to be animated\n   * @param {String} type Type of element\n   */\n  queueOffAnim(obj, el, type) {\n    let self = this;\n    let options = self.options;\n    // anim\n    let duration = Xt.animTime(el, options.durationOff);\n    clearTimeout(el.dataset.xtAnimTimeout);\n    if (!duration) {\n      self.queueOffAnimDone(obj, el, type);\n    } else {\n      el.dataset.xtAnimTimeout = setTimeout(function () {\n        self.queueOffAnimDone(obj, el, type);\n      }, duration).toString();\n    }\n  }\n\n  /**\n   * queue on anim done\n   * @param {Object} obj Queue object\n   * @param {Node|HTMLElement|EventTarget|Window} el Element to be animated\n   * @param {String} type Type of element\n   * @param {Boolean} skipQueue If skip queue\n   */\n  queueOnAnimDone(obj, el, type, skipQueue = false) {\n    let self = this;\n    let options = self.options;\n    // reset\n    el.classList.remove(...self.classesIn);\n    // special\n    let before = getComputedStyle(el, '::before').getPropertyValue('content').replace(/['\"]+/g, '');\n    let after = getComputedStyle(el, '::after').getPropertyValue('content').replace(/['\"]+/g, '');\n    self.specialCollapseReset(el, before, after);\n    // aria\n    if (options.aria) {\n      // tabindex\n      if (options.aria === true || options.aria.tabindex) {\n        if (type === 'targets') {\n          let focusables = el.querySelectorAll(Xt.focusables);\n          for (let focusable of focusables) {\n            focusable.removeAttribute('tabindex');\n          }\n        }\n      }\n    }\n    // queue done\n    if (options.instant === false || (typeof options.instant === 'object' && !options.instant[type])) {\n      let els = obj[type].queueEls;\n      if (el === els[els.length - 1]) { // only if last element\n        self.queueOnDone(obj, type, skipQueue);\n      }\n    }\n    // listener dispatch\n    el.dispatchEvent(new CustomEvent('ondone.xt', {detail: obj[type].detail}));\n  }\n\n  /**\n   * queue off anim done\n   * @param {Object} obj Queue object\n   * @param {Node|HTMLElement|EventTarget|Window} el Element to be animated\n   * @param {String} type Type of element\n   * @param {Boolean} skipQueue If skip queue\n   */\n  queueOffAnimDone(obj, el, type, skipQueue = false) {\n    let self = this;\n    let options = self.options;\n    // reset\n    el.classList.remove(...self.classesOut);\n    // special\n    if (type === 'targets') {\n      // appendTo\n      if (options.appendTo) {\n        let appendOrigin = document.querySelectorAll('[data-xt-origin=' + self.namespace + ']');\n        if (appendOrigin.length) {\n          appendOrigin[0].before(el);\n        }\n      }\n    }\n    // aria\n    if (options.aria) {\n      // selected\n      if (type === 'elements') {\n        let ariaEls = self.getInside(el, options.ariaControls);\n        let ariaEl = ariaEls.length ? ariaEls[0] : el;\n        ariaEl.setAttribute('aria-selected', 'false');\n      }\n      if (type === 'targets') {\n        // expanded\n        let role = el.getAttribute('role');\n        if (role === 'tabpanel' || role === 'listbox' || role === 'dialog') {\n          el.setAttribute('aria-expanded', 'false');\n        }\n        // tabindex\n        if (options.aria === true || options.aria.tabindex) {\n          let focusables = el.querySelectorAll(Xt.focusables);\n          for (let focusable of focusables) {\n            focusable.setAttribute('tabindex', '-1');\n            focusable.blur();\n          }\n        }\n      }\n    }\n    // queue done\n    if (options.instant === false || (typeof options.instant === 'object' && !options.instant[type])) {\n      let els = obj[type].queueEls;\n      if (el === els[els.length - 1]) { // only if last element\n        self.queueOffDone(obj, type, skipQueue);\n      }\n    }\n    // listener dispatch\n    el.dispatchEvent(new CustomEvent('offdone.xt', {detail: obj[type].detail}));\n  }\n\n  //////////////////////\n  // special\n  //////////////////////\n\n  /**\n   * add html class\n   */\n  specialClassHtmlOn() {\n    let self = this;\n    let options = self.options;\n    // class on\n    if (options.classHtml) {\n      let container = document.documentElement;\n      container.classList.add(...options.classHtml.split(' '));\n    }\n  }\n\n  /**\n   * remove html class\n   */\n  specialClassHtmlOff() {\n    let self = this;\n    let options = self.options;\n    // class off\n    if (options.classHtml) {\n      let container = document.documentElement;\n      container.classList.remove(...options.classHtml.split(' '));\n    }\n  }\n\n  /**\n   * backdrop append to element\n   * @param {Object} obj Queue object\n   */\n  specialBackdrop(obj) {\n    let self = this;\n    let options = self.options;\n    // backdrop\n    if (options.backdrop) {\n      let elements = typeof options.backdrop === 'string' && obj[options.backdrop] ? Xt.arrSingle(obj[options.backdrop].queueEls) : Xt.arrSingle(self.object);\n      for (let element of elements) {\n        let backdrop = element.querySelectorAll('.backdrop');\n        if (!backdrop.length) {\n          backdrop = Xt.createElement('<div class=\"backdrop\"></div>');\n          element.append(backdrop);\n        }\n      }\n    }\n  }\n\n  /**\n   * center position on activation\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   * @param {String} before Before content\n   * @param {String} after After content\n   */\n  specialCenter(el, before, after) {\n    let self = this;\n    // specialCenter\n    if (before === 'xt-drop--center') {\n      let add = self.object.clientWidth;\n      let remove = el.clientWidth;\n      el.style.left = ((add - remove) / 2) + 'px';\n    }\n  }\n\n  /**\n   * middle position on activation\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   * @param {String} before Before content\n   * @param {String} after After content\n   */\n  specialMiddle(el, before, after) {\n    let self = this;\n    // specialMiddle\n    if (after === 'xt-drop--middle') {\n      let add = self.object.clientHeight;\n      let remove = el.clientHeight;\n      el.style.top = ((add - remove) / 2) + 'px';\n    }\n  }\n\n  /**\n   * open collapse on activation\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   * @param {String} before Before content\n   * @param {String} after After content\n   */\n  specialCollapseOn(el, before, after) {\n    if (el instanceof HTMLElement) {\n      if (before === 'xt-collapse--height') {\n        el.classList.add('xt-hide');\n        el.style.height = 'auto';\n        el.style.paddingTop = '';\n        el.style.paddingBottom = '';\n        let h = el.clientHeight + 'px';\n        let pt = el.style.paddingTop;\n        let pb = el.style.paddingBottom;\n        cancelAnimationFrame(parseFloat(el.dataset.xtCollapseFrame));\n        el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n          el.classList.remove('xt-hide');\n          el.style.height = '0';\n          el.style.paddingTop = '0';\n          el.style.paddingBottom = '0';\n          el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n            el.style.height = h;\n            el.style.paddingTop = pt;\n            el.style.paddingBottom = pb;\n          }).toString();\n        }).toString();\n      }\n      if (after === 'xt-collapse--width') {\n        el.classList.add('xt-hide');\n        el.style.width = 'auto';\n        el.style.paddingLeft = '';\n        el.style.paddingRight = '';\n        let w = el.clientHeight + 'px';\n        let pl = el.style.paddingLeft;\n        let pr = el.style.paddingRight;\n        cancelAnimationFrame(parseFloat(el.dataset.xtCollapseFrame));\n        el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n          el.classList.remove('xt-hide');\n          el.style.width = '0';\n          el.style.paddingLeft = '0';\n          el.style.paddingRight = '0';\n          el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n            el.style.width = w;\n            el.style.paddingLeft = pl;\n            el.style.paddingRight = pr;\n          }).toString();\n        }).toString();\n      }\n    }\n  }\n\n  /**\n   * close collapse on deactivation\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   * @param {String} before Before content\n   * @param {String} after After content\n   */\n  specialCollapseOff(el, before, after) {\n    if (el instanceof HTMLElement) {\n      if (before === 'xt-collapse--height') {\n        let h = el.clientHeight + 'px';\n        let pt = el.style.paddingTop;\n        let pb = el.style.paddingBottom;\n        cancelAnimationFrame(parseFloat(el.dataset.xtCollapseFrame));\n        el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n          el.style.height = h;\n          el.style.paddingTop = pt;\n          el.style.paddingBottom = pb;\n          el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n            el.style.height = '0';\n            el.style.paddingTop = '0';\n            el.style.paddingBottom = '0';\n          }).toString();\n        }).toString();\n      }\n      if (after === 'xt-collapse--width') {\n        let w = el.clientWidth + 'px';\n        let pl = el.style.paddingLeft;\n        let pr = el.style.paddingRight;\n        cancelAnimationFrame(parseFloat(el.dataset.xtCollapseFrame));\n        el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n          el.style.width = w;\n          el.style.paddingLeft = pl;\n          el.style.paddingRight = pr;\n          el.dataset.xtCollapseFrame = requestAnimationFrame(function () {\n            el.style.width = '0';\n            el.style.paddingLeft = '0';\n            el.style.paddingRight = '0';\n          }).toString();\n        }).toString();\n      }\n    }\n  }\n\n  /**\n   * reset collapse\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   * @param {String} before Before content\n   * @param {String} after After content\n   */\n  specialCollapseReset(el, before, after) {\n    if (el instanceof HTMLElement) {\n      if (before === 'xt-collapse--height') {\n        el.style.height = 'inherit';\n        el.style.paddingTop = '';\n        el.style.paddingBottom = '';\n      }\n      if (after === 'xt-collapse--width') {\n        el.style.width = 'inherit';\n        el.style.paddingLeft = '';\n        el.style.paddingRight = '';\n      }\n    }\n  }\n\n  /**\n   * add close events on element\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   * @param {Node|HTMLElement|EventTarget|Window} single Element to toggle\n   */\n  specialCloseOn(el, single) {\n    let self = this;\n    let options = self.options;\n    // closeInside\n    if (options.closeInside) {\n      let closeElements = el.querySelectorAll(options.closeInside);\n      requestAnimationFrame(function () {\n        for (let closeElement of closeElements) {\n          let specialCloseInsideHandler = Xt.dataStorage.put(closeElement, 'click.close' + '.' + self.namespace,\n            self.eventSpecialCloseInsideHandler.bind(self).bind(self, closeElement, single));\n          closeElement.addEventListener('click', specialCloseInsideHandler);\n        }\n      });\n    }\n    // closeOutside\n    if (options.closeOutside) {\n      let closeElements = document.querySelectorAll(options.closeOutside);\n      requestAnimationFrame(function () {\n        for (let closeElement of closeElements) {\n          let specialCloseOutsideHandler = Xt.dataStorage.put(closeElement, 'click.close' + '.' + self.namespace,\n            self.eventSpecialCloseOutsideHandler.bind(self).bind(self, el, single));\n          closeElement.addEventListener('click', specialCloseOutsideHandler);\n        }\n      });\n    }\n  }\n\n  /**\n   * remove close events on element\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   */\n  specialCloseOff(el) {\n    let self = this;\n    let options = self.options;\n    // closeInside\n    if (options.closeInside) {\n      let closeElements = el.querySelectorAll(options.closeInside);\n      for (let closeElement of closeElements) {\n        let specialCloseInsideHandler = Xt.dataStorage.get(closeElement, 'click.close' + '.' + self.namespace);\n        closeElement.removeEventListener('click', specialCloseInsideHandler);\n      }\n    }\n    // closeOutside\n    if (options.closeOutside) {\n      let closeElements = document.querySelectorAll(options.closeOutside);\n      for (let closeElement of closeElements) {\n        let specialCloseOutsideHandler = Xt.dataStorage.get(closeElement, 'click.close' + '.' + self.namespace);\n        closeElement.removeEventListener('click', specialCloseOutsideHandler);\n      }\n    }\n  }\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement|EventTarget|Window} checkEl\n   * @param {Node|HTMLElement|EventTarget|Window} single\n   * @param {Event} e\n   */\n  eventSpecialCloseInsideHandler(checkEl, single, e) {\n    let self = this;\n    // prevent closing when nested and moved (ex: overlay)\n    if (!Xt.checkNested(checkEl, self.targets)) {\n      return false;\n    }\n    // handler\n    if (Xt.checkNested(e.target, Xt.arrSingle(checkEl))) {\n      self.eventOff(single);\n    }\n  }\n\n  /**\n   * element off handler\n   * @param {Node|HTMLElement|EventTarget|Window} checkEl\n   * @param {Node|HTMLElement|EventTarget|Window} single\n   * @param {Event} e\n   */\n  eventSpecialCloseOutsideHandler(checkEl, single, e) {\n    let self = this;\n    // handler\n    if (!Xt.checkNested(e.target, Xt.arrSingle(checkEl))) {\n      self.eventOff(single);\n    }\n  }\n\n  /**\n   * scrollbar activation\n   */\n  specialScrollbarOn() {\n    let self = this;\n    let options = self.options;\n    // scrollbar on\n    if (options.scrollbar) {\n      // checks\n      Xt.scrollbar.add(self.namespace);\n      // var\n      let width = Xt.scrollbarWidth();\n      // scrollbar\n      let container = document.documentElement;\n      container.style.paddingRight = width + 'px';\n      container.classList.add('xt-scrollbar');\n      // check fixed\n      let checks = document.querySelectorAll('.xt-fixed--inner > *');\n      for (let check of checks) {\n        let style = getComputedStyle(check);\n        if (style.position === 'fixed') {\n          check.classList.add('xt-fixed');\n        } else {\n          check.classList.remove('xt-fixed');\n        }\n      }\n      // fixed\n      let elements = document.querySelectorAll('.xt-fixed');\n      for (let element of elements) {\n        element.style.paddingRight = '';\n        let style = getComputedStyle(element);\n        if (self.normalizeWidth(element.clientWidth) === '') { // only if full width\n          let padding = style.paddingRight;\n          let str = 'calc(' + padding + ' + ' + width + 'px)';\n          element.classList.add('transition-none');\n          requestAnimationFrame(function () {\n            element.style.paddingRight = str;\n            requestAnimationFrame(function () {\n              element.classList.remove('transition-none');\n            });\n          });\n        }\n      }\n      // backdrop\n      let backdrops = document.querySelectorAll('.backdrop');\n      for (let backdrop of backdrops) {\n        backdrop.style.right = width + 'px';\n      }\n    }\n  }\n\n  /**\n   * scrollbar deactivation\n   */\n  specialScrollbarOff() {\n    let self = this;\n    let options = self.options;\n    // scrollbar off\n    if (options.scrollbar) {\n      // checks\n      Xt.scrollbar.remove(self.namespace);\n      if (!Xt.scrollbar.get().length) {\n        // scrollbar\n        let container = document.documentElement;\n        container.style.paddingRight = '';\n        container.classList.remove('xt-scrollbar');\n        // fixed\n        let elements = document.querySelectorAll('.xt-fixed');\n        for (let element of elements) {\n          element.classList.add('transition-none');\n          requestAnimationFrame(function () {\n            element.style.paddingRight = '';\n            requestAnimationFrame(function () {\n              element.classList.remove('transition-none');\n            });\n          });\n        }\n        // backdrop\n        let backdrops = self.object.querySelectorAll(':scope > .backdrop');\n        for (let backdrop of backdrops) {\n          backdrop.style.right = '';\n        }\n      }\n    }\n  }\n\n  /**\n   * if full width return '' else return value in px\n   * @param {Number|String} width\n   * @returns {String} Value in px\n   */\n  normalizeWidth(width) {\n    width = parseFloat(width);\n    if (width + Xt.scrollbarWidth() >= window.innerWidth) {\n      width = '';\n    } else {\n      width += 'px';\n    }\n    return width;\n  }\n\n  //////////////////////\n  // goto\n  //////////////////////\n\n  /**\n   * activate next element\n   * @param {Number} amount\n   * @param {Boolean} force\n   * @param {Boolean} loop\n   */\n  goToNext(amount = 1, force = false, loop = null) {\n    let self = this;\n    // goToIndex\n    let index = 0;\n    if (self.currentIndex !== null) {\n      index = self.currentIndex + amount;\n    }\n    self.detail.inverseDirectionForce = false;\n    self.goToIndex(index, force, loop);\n  }\n\n  /**\n   * activate prev element\n   * @param {Number} amount\n   * @param {Boolean} force\n   * @param {Boolean} loop\n   */\n  goToPrev(amount = 1, force = false, loop = null) {\n    let self = this;\n    // goToIndex\n    let index = self.getElementsSingle().length - 1;\n    if (self.currentIndex !== null) {\n      index = self.currentIndex - amount;\n    }\n    self.detail.inverseDirectionForce = true;\n    self.goToIndex(index, force, loop);\n  }\n\n  /**\n   * activate index element\n   * @param {Number} index\n   * @param {Boolean} force\n   * @param {Boolean} loop\n   */\n  goToIndex(index, force = false, loop = null) {\n    let self = this;\n    let options = self.options;\n    // check\n    let max = self.getElementsSingle().length - 1;\n    if (index > max) {\n      if (loop || (loop === null && options.loop)) {\n        index = index - max - 1;\n        index = index > max ? max : index; // prevent overflow\n      } else {\n        index = max;\n      }\n    } else if (index < 0) {\n      if (loop || (loop == null && options.loop)) {\n        index = index + max + 1;\n        index = index < 0 ? 0 : index; // prevent overflow\n      } else {\n        index = 0;\n      }\n    }\n    // go\n    let current = self.elements[index];\n    self.eventOn(current, force);\n  }\n\n  //////////////////////\n  // status\n  //////////////////////\n\n  /**\n   * disable\n   */\n  disable() {\n    let self = this;\n    // disable\n    self.disabled = true;\n    self.object.classList.add('xt-disabled');\n  }\n\n  /**\n   * disable\n   */\n  enable() {\n    let self = this;\n    // enable\n    self.disabled = false;\n    self.object.classList.remove('xt-disabled');\n  }\n\n  //////////////////////\n  // destroy\n  //////////////////////\n\n  /**\n   * destroy\n   */\n  destroy() {\n    let self = this;\n    // remove events\n    let elements = self.destroyElements;\n    for (let element of elements) {\n      let storages = Xt.dataStorage.getAll(element);\n      if (storages) {\n        for (let [key, storage] of storages) {\n          if (key.endsWith(self.namespace)) {\n            let handler = Xt.dataStorage.get(element, key);\n            let events = key.split('.')[0].split(' ');\n            for (let event of events) {\n              element.removeEventListener(event, handler);\n            }\n          }\n        }\n      }\n    }\n    // remove setup\n    self.object.removeAttribute('data-' + self.componentName + '-done');\n    Xt.remove(self.object, self.componentName);\n    // destroy\n    delete this;\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nCore.componentName = 'xt-core';\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Core;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Drop\n//////////////////////\n\nclass Drop extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init aria\n   */\n  initAria() {\n    super.initAria();\n    let self = this;\n    let options = self.options;\n    // aria\n    if (options.aria) {\n      for (let el of self.elements) {\n        let ariaEls = self.getInside(el, options.ariaControls);\n        let ariaEl = ariaEls.length ? ariaEls[0] : el;\n        ariaEl.setAttribute('aria-haspopup', 'listbox');\n      }\n      for (let tr of self.targets) {\n        tr.setAttribute('role', 'listbox');\n      }\n    }\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nDrop.componentName = 'xt-drop';\nDrop.optionsDefault = {\n  \"targets\": \":scope > .drop\",\n  \"elementsInner\": \":scope > a, :scope > button\",\n  \"class\": \"active\",\n  \"on\": \"click\",\n  \"min\": 0,\n  \"max\": 1,\n  \"instant\": {\"elementsInner\": true},\n  \"autoClose\": true,\n  \"closeOutside\": \"body\",\n  \"ariaControls\": \":scope > a, :scope > button\"\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Drop;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Overlay\n//////////////////////\n\nclass Overlay extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init aria\n   */\n  initAria() {\n    super.initAria();\n    let self = this;\n    let options = self.options;\n    // aria\n    if (options.aria) {\n      if (self.targets.length) {\n        for (let el of self.elements) {\n          let ariaEls = self.getInside(el, options.ariaControls);\n          let ariaEl = ariaEls.length ? ariaEls[0] : el;\n          ariaEl.setAttribute('aria-haspopup', 'dialog');\n        }\n        for (let tr of self.targets) {\n          tr.setAttribute('role', 'dialog');\n          tr.setAttribute('aria-modal', 'true');\n        }\n      } else {\n        for (let el of self.elements) {\n          el.setAttribute('role', 'dialog');\n          el.setAttribute('aria-modal', 'true');\n        }\n      }\n    }\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nOverlay.componentName = 'xt-overlay';\nOverlay.optionsDefault = {\n  \"elements\": \":scope > a, :scope > button\",\n  \"targets\": \":scope > .overlay_outer\",\n  \"class\": \"active\",\n  \"on\": \"click\",\n  \"min\": 0,\n  \"max\": 1,\n  \"instant\": {\"elements\": true},\n  \"autoClose\": true,\n  \"appendTo\": \"body\",\n  \"backdrop\": \"targets\",\n  \"classHtml\": \"xt-overlay\",\n  \"closeInside\": \".overlay_dismiss, :scope > .backdrop\",\n  \"scrollbar\": true\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Overlay;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Toggle\n//////////////////////\n\nclass Toggle extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init aria\n   */\n  initAria() {\n    super.initAria();\n    let self = this;\n    let options = self.options;\n    // aria\n    if (options.aria) {\n      if (self.targets.length) {\n        if (self.mode === 'multiple') {\n          self.object.setAttribute('role', 'tablist');\n          if (options.max > 1) {\n            self.object.setAttribute('aria-multiselectable', 'true');\n          }\n          for (let el of self.elements) {\n            let ariaEls = self.getInside(el, options.ariaControls);\n            let ariaEl = ariaEls.length ? ariaEls[0] : el;\n            ariaEl.setAttribute('role', 'tab');\n          }\n          for (let tr of self.targets) {\n            tr.setAttribute('role', 'tabpanel');\n          }\n        }\n      }\n    }\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nToggle.componentName = 'xt-toggle';\nToggle.optionsDefault = {\n  \"elements\": \":scope > a, :scope > button\",\n  \"targets\": \":scope > [class^=\\\"toggle--\\\"], :scope > [class*=\\\" toggle--\\\"]\",\n  \"class\": \"active\",\n  \"on\": \"click\",\n  \"min\": 0,\n  \"max\": 1,\n  \"instant\": {\"elements\": true}\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Toggle;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Drop\n//////////////////////\n\nclass Ajax extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n    // prevent scroll on popstate\n    if ('scrollRestoration' in history) {\n      history.scrollRestoration = 'manual';\n    }\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init\n   */\n  init(object = false, optionsJs = false) {\n    let self = this;\n    // var\n    self.locationFrom = self.locationTo || null; // fix popstate\n    self.locationTo = null;\n    // super\n    super.init();\n  }\n\n  /**\n   * init setup\n   */\n  initSetup() {\n    super.initSetup();\n    let self = this;\n    let options = self.options;\n    // queryElement\n    self.queryElement = self.object.querySelectorAll(options.query)[0] || self.object;\n  }\n\n  /**\n   * init elements\n   */\n  initScopeElements() {\n    super.initScopeElements();\n    let self = this;\n    // remove external links\n    for (let element of self.elements) {\n      if (location.hostname !== element.hostname || element.getAttribute('href').split('#')[0] === '') {\n        self.elements = Array.from(self.elements).filter(x => x !== element);\n      }\n    }\n    // generate groups\n    self.groupUrl = [];\n    for (let element of self.elements) {\n      // populate\n      let url = element.getAttribute('href').split('#')[0];\n      if (!self.groupUrl[url]) {\n        self.groupUrl[url] = [];\n      }\n      self.groupUrl[url].push(element);\n      // assign group\n      element.setAttribute('data-xt-group', self.namespace + '-' + url);\n    }\n  }\n\n  /**\n   * init currents\n   */\n  initCurrents() {\n    let self = this;\n    // initial\n    self.initial = true;\n    // automatic initial currents\n    let elements = self.elements;\n    if (elements.length) {\n      let found = false;\n      for (let element of self.elements) {\n        let loc = location.pathname + location.search;\n        let url = element.pathname + element.search;\n        if (url !== '') {\n          if (loc === url) {\n            found = true;\n            self.eventOn(element, false);\n          } else {\n            self.eventOff(element, false);\n          }\n        }\n      }\n      if (!found) {\n        // initial\n        self.initial = false;\n      }\n    } else {\n      // initial\n      self.initial = false;\n    }\n    // detect url\n    let url;\n    if (history.state && history.state.url) {\n      // detect from history\n      url = history.state.url;\n    } else {\n      // detect from url location (absolute url without domain name)\n      url = location.pathname + location.search;\n    }\n    // set pushstate\n    if (!self.locationFrom) {\n      self.locationFrom = new URL(url, location);\n    }\n    self.pushState(url, document.title);\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    super.initEvents();\n    let self = this;\n    // event popstate\n    window.onpopstate = self.eventPopstateHandler.bind(self);\n  }\n\n  //////////////////////\n  // handler\n  //////////////////////\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement|EventTarget|Window} element\n   * @param {Event} e\n   */\n  eventOnHandler(element, e) {\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      // not when opening in new tab\n      if (e.metaKey || e.ctrlKey) {\n        return false;\n      }\n      // prevent links (needed for xt-ajax to go to links and propagate event if inside targets)\n      e.preventDefault();\n    }\n    // super\n    super.eventOnHandler(element, e);\n  }\n\n  /**\n   * element popstate handler\n   * @param {Event} e\n   */\n  eventPopstateHandler(e) {\n    let self = this;\n    // handler\n    if (history.state && history.state.url) {\n      // reinit currents\n      self.initCurrents();\n      // request set\n      requestAnimationFrame(function () {\n        self.ajaxRequest(null, history.state.url);\n      });\n    }\n  }\n\n  //////////////////////\n  // special\n  //////////////////////\n\n  /**\n   * ajax request\n   * @param {Node|HTMLElement|EventTarget|Window} element Base node\n   * @param {String} url Url to get\n   */\n  ajaxRequest(element, url) {\n    let self = this;\n    let options = self.options;\n    // url\n    if (element) {\n      url = element.getAttribute('href').split('#')[0];\n    }\n    // location\n    self.locationTo = new URL(url, location);\n    // autoClose\n    dispatchEvent(new CustomEvent('autoClose.xt'));\n    // dispatch\n    let detail = self.eDetailSet();\n    self.object.dispatchEvent(new CustomEvent('request.xt.ajax', {detail: detail}));\n    // duration\n    self.detail.requestDate = new Date();\n    clearTimeout(parseFloat(self.object.dataset.xtAjaxDurationTimeout));\n    requestAnimationFrame( function() {\n      self.detail.requestDuration = options.duration || Xt.animTime(self.queryElement);\n      // call\n      let request = new XMLHttpRequest();\n      request.open('GET', url, true);\n      request.onload = function () {\n        self.ajaxResponse(element, url, request);\n      };\n      request.onerror = function () {\n        self.ajaxResponse(element, url, request);\n      };\n      request.send();\n    });\n  }\n\n  /**\n   * ajax response\n   * @param {Node|HTMLElement|EventTarget|Window} element Base node\n   * @param {String} url Url to get\n   * @param {XMLHttpRequest} request Html response\n   */\n  ajaxResponse(element, url, request) {\n    let self = this;\n    // dispatch\n    let detail = self.eDetailSet();\n    self.detail.request = request;\n    self.object.dispatchEvent(new CustomEvent('response.xt.ajax', {detail: detail}));\n    // duration\n    self.detail.requestDuration -= new Date() - self.detail.requestDate;\n    if (self.detail.requestDuration > 0) {\n      self.object.dataset.xtAjaxDurationTimeout = setTimeout( function() {\n        // request\n        if (request.status >= 200 && request.status < 400) {\n          self.ajaxSuccess(element, url, request);\n        } else {\n          self.ajaxError(element, url, request);\n        }\n      }, self.detail.requestDuration).toString();\n    } else {\n      // request\n      if (request.status >= 200 && request.status < 400) {\n        self.ajaxSuccess(element, url, request);\n      } else {\n        self.ajaxError(element, url, request);\n      }\n    }\n  }\n\n  /**\n   * ajax success\n   * @param {Node|HTMLElement|EventTarget|Window} element Base node\n   * @param {String} url Url to get\n   * @param {XMLHttpRequest} request Html response\n   */\n  ajaxSuccess(element, url, request) {\n    let self = this;\n    let options = self.options;\n    // autoClose\n    dispatchEvent(new CustomEvent('autoCloseFix.xt'));\n    // set substitute\n    let html = document.createElement('html');\n    html.innerHTML = request.responseText.trim();\n    let title = html.querySelectorAll('head title')[0].innerHTML;\n    let replace = html.querySelectorAll(options.query)[0];\n    // data-xt-ajax-keep\n    /*\n    // NEEDS constructor && !object.dataset.xtAjaxKept // not when ajax-kept\n    //DOES NOT WORK it doesn't copy the events..\n    for (let tr of self.queryElement.querySelectorAll('[data-xt-ajax-keep]')) {\n      // replace\n      let trId = tr.getAttribute('data-xt-ajax-keep');\n      let rep = replace.querySelectorAll('[data-xt-ajax-keep=\"' + trId + '\"]');\n      if (rep.length) {\n        rep = rep[0];\n        if (tr.dataset.xtAjaxKept !== url) {\n          tr.dataset.xtAjaxKept = url;\n          // copy\n          let changed = rep.parentNode.replaceChild(tr, rep);\n          // copy events\n          let elsTr = Array.from(rep.querySelectorAll('*'));\n          elsTr.push(rep);\n          let elsCh = Array.from(changed.querySelectorAll('*'));\n          elsCh.push(changed);\n          for (let i = 0; i < elsTr.length; i++) {\n            let elTr = elsTr[i];\n            let elCh = elsCh[i];\n            if (elCh) {\n              // check storage for events\n              let storages = Xt.dataStorage.getAll(elTr);\n              if (storages) {\n                for (let [key, value] of storages) {\n                  // copy events\n                  let handler = Xt.dataStorage.put(elCh, key, value);\n                  elCh.addEventListener('click', handler);\n                }\n              }\n            }\n          }\n\n        }\n      }\n    }\n    */\n    // populate dom\n    self.queryElement.outerHTML = replace.outerHTML;\n    // queryElement\n    self.queryElement = self.object.querySelectorAll(options.query)[0] || self.object;\n    // pushstate\n    self.pushState(url, title);\n    // garbage collector\n    html = null;\n    replace = null;\n    // dispatch\n    let detail = self.eDetailSet();\n    self.detail.request = request;\n    self.object.dispatchEvent(new CustomEvent('replace.xt.ajax', {detail: detail}));\n    // reinit\n    if (!self.initial) {\n      self.initial = true;\n      self.init();\n    }\n  }\n\n  /**\n   * ajax error\n   * @param {Node|HTMLElement|EventTarget|Window} element Base node\n   * @param {String} url Url to get\n   * @param {XMLHttpRequest} request Html response\n   */\n  ajaxError(element, url, request) {\n    let self = this;\n    // reinit currents\n    self.initCurrents();\n    // dispatch\n    let detail = self.eDetailSet();\n    self.detail.request = request;\n    self.object.dispatchEvent(new CustomEvent('replace.xt.ajax', {detail: detail}));\n  }\n\n  /**\n   * history pushstate\n   */\n  pushState(url, title) {\n    // push object state\n    if (!history.state || !history.state.url || history.state.url !== url) {\n      document.title = title;\n      history.pushState({'url': url, 'title': title}, title, url);\n    } else {\n      document.title = history.state.title;\n    }\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nAjax.componentName = 'xt-ajax';\nAjax.optionsDefault = {\n  \"query\": \"body\", // needs to be unique\n  \"baseUrl\": \"/\",\n  \"duration\": false,\n  \"elements\": \"a[href]:not([href^='#'])\",\n  \"class\": \"active\",\n  \"on\": \"click\",\n  \"toggle\": false,\n  \"min\": 0,\n  \"max\": 1,\n  \"instant\": true,\n  \"aria\": false\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Ajax;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// smooth\n//////////////////////\n\nclass Smooth extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init\n   */\n  init(object = false, optionsJs = false) {\n    let self = this;\n    // var\n    self.subject = null;\n    self.detail = {};\n    self.destroyElements = [self.object];\n    // destroy if already done\n    if (self.object.getAttribute('data-' + self.componentName + '-done')) {\n      self.destroy();\n    }\n    // setup\n    self.object.setAttribute('data-' + self.componentName + '-done', 'true');\n    // set component to element\n    Xt.set(self.object, self.componentName, self);\n    // init\n    self.initVars();\n    self.initSetup();\n    self.initEvents();\n  }\n\n  /**\n   * init vars\n   */\n  initSetup() {\n    super.initSetup();\n    let self = this;\n    // scrollElement\n    self.scrollElement = self.options.scrollElement;\n    self.destroyElements.push(self.scrollElement);\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    // save scroll position for eventWheel\n    self.detail.moving = false;\n    self.detail.scrollTop = self.detail.scrollTopInitial = self.object.scrollTop;\n    // vars\n    let eWheel = 'onwheel' in self.object ? 'wheel' : self.object.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n    self.object = self.object ? self.object : document.documentElement; // document.scrollingElement\n    // wheel\n    let wheelHandler = Xt.dataStorage.put(self.object, eWheel + '.' + self.namespace,\n      self.eventWheel.bind(self));\n    self.object.addEventListener(eWheel, wheelHandler);\n    // scroll\n    let scrollHandler = Xt.dataStorage.put(self.scrollElement, 'scroll' + '.' + self.namespace,\n      self.eventScroll.bind(self));\n    self.scrollElement.addEventListener('scroll', scrollHandler, Xt.passiveSupported ? {passive: true} : false);\n  }\n\n  //////////////////////\n  // event\n  //////////////////////\n\n  /**\n   * event scroll\n   */\n  eventScroll(e) {\n    let self = this;\n    if (self.detail.scrollTopInitial !== self.object.scrollTop) {\n      // after finished scrolling\n      clearTimeout(parseFloat(self.object.dataset.xtSmoothScrollTimeout));\n      self.object.dataset.xtSmoothScrollTimeout = setTimeout(function() {\n        // scroll\n        if (!self.detail.moving) {\n          // save scroll position for eventWheel\n          self.detail.scrollTop = self.detail.scrollTopInitial = self.object.scrollTop;\n        }\n        // dispatch\n        self.object.dispatchEvent(new CustomEvent('scroll.xt.smooth', {detail: self.eDetail}));\n      }, 50).toString();\n    }\n  }\n\n  /**\n   * event on wheel\n   * @param {Event} e\n   */\n  eventWheel(e) {\n    let self = this;\n    // subject\n    self.subject = null;\n    for (let el of e.composedPath()) {\n      if (getComputedStyle(el).overflowY === 'scroll') {\n        self.subject = el;\n        break;\n      }\n    }\n    if (!self.subject) {\n      return false;\n    } else if (self.subject === document.body) {\n      self.subject = self.object; // document.scrollingElement\n    }\n    // prevent default scrolling\n    e.preventDefault();\n    // vars\n    let scrollMax = self.subject.scrollHeight - self.subject.clientHeight - 1;\n    let delta = -e.deltaY || -e.detail || e.wheelDelta || e.wheelDeltaY;\n    if (delta === 0) {\n      return;\n    }\n    if (e.deltaMode === 1) {\n      // deltaMode 1: by lines\n      delta *= 30;\n    } else if (e.deltaMode === 2) {\n      // deltaMode 2: by pages\n      delta *= self.subject.clientHeight;\n    }\n    // set\n    self.detail.scrollTop -= delta;\n    self.detail.scrollTop = Math.max(0, Math.min(self.detail.scrollTop, scrollMax)); // scroll limit\n    // friction\n    if (!self.detail.moving) {\n      self.friction();\n    }\n    // dispatch\n    self.object.dispatchEvent(new CustomEvent('wheel.xt.smooth', {detail: self.eDetail}));\n  }\n\n  //////////////////////\n  // event util\n  //////////////////////\n\n  /**\n   * friction\n   */\n  friction() {\n    let self = this;\n    let options = self.options;\n    // vars\n    self.detail.moving = true;\n    let scrollCurrent = self.subject.scrollTop;\n    let delta = self.detail.scrollTop - scrollCurrent;\n    let sign = Math.sign(delta);\n    // momentum\n    let fncFriction = options.wheel.friction;\n    if (typeof fncFriction === 'string') {\n      fncFriction = new Function('delta', fncFriction);\n    }\n    delta = fncFriction(Math.abs(delta)) * sign;\n    let scrollFinal = scrollCurrent + delta;\n    // fix math on direction to stop loop\n    if (delta < 0) {\n      scrollFinal = Math.floor(scrollFinal);\n    } else if (delta > 0) {\n      scrollFinal = Math.ceil(scrollFinal);\n    }\n    // set\n    self.subject.scrollTop = scrollFinal;\n    // loop\n    if (Math.abs(delta) >= options.wheel.limit) {\n      cancelAnimationFrame(window.smoothFrame);\n      window.smoothFrame = requestAnimationFrame(function () {\n        self.friction();\n      });\n    } else {\n      self.detail.moving = false;\n    }\n  }\n\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nSmooth.componentName = 'xt-smooth';\nSmooth.optionsDefault = {\n  \"scrollElement\": window,\n  \"wheel\": {\n    \"limit\": .5,\n    \"friction\": \"return delta / 9\"\n  }\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Smooth;","//////////////////////\n// closest polyfill\n// https://github.com/jonathantneal/closest\n// USAGE: element.closest(query);\n//////////////////////\n\n(function (ElementProto) {\n  if (typeof ElementProto.matches !== 'function') {\n    ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {\n      var element = this;\n      var elements = (element.document || element.ownerDocument).querySelectorAll(selector);\n      var index = 0;\n      while (elements[index] && elements[index] !== element) {\n        ++index;\n      }\n      return Boolean(elements[index]);\n    };\n  }\n  if (typeof ElementProto.closest !== 'function') {\n    ElementProto.closest = function closest(selector) {\n      var element = this;\n      while (element && element.nodeType === 1) {\n        if (element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n      }\n      return null;\n    };\n  }\n})(window.Element.prototype);\n\n//////////////////////\n// :scope polyfill\n// https://github.com/jonathantneal/element-qsa-scope\n// USAGE: querySelectorAll(':scope > .selector');\n//////////////////////\n\n(function (ElementPrototype) {\n  try {\n    // test for scope support\n    document.querySelector(':scope *');\n  } catch (error) {\n    let polyfill = function (qsa) {\n      return function (selectors) {\n        // whether the selectors contain :scope\n        let hasScope = selectors && scope.test(selectors);\n        if (hasScope) {\n          // fallback attribute\n          let attr = 'q' + Math.floor(Math.random() * 9000000) + 1000000;\n          // replace :scope with the fallback attribute\n          arguments[0] = selectors.replace(scope, '[' + attr + ']');\n          // add the fallback attribute\n          this.setAttribute(attr, '');\n          // results of the qsa\n          let elementOrNodeList = qsa.apply(this, arguments);\n          // remove the fallback attribute\n          this.removeAttribute(attr);\n          // return the results of the qsa\n          return elementOrNodeList;\n        } else {\n          // return the results of the qsa\n          return qsa.apply(this, arguments);\n        }\n      };\n    }\n    // scope regex\n    let scope = /:scope(?![\\w-])/gi;\n    // polyfill Element#querySelector\n    let querySelectorWithScope = polyfill(ElementPrototype.querySelector);\n    ElementPrototype.querySelector = function querySelector(selectors) {\n      return querySelectorWithScope.apply(this, arguments);\n    };\n    // polyfill Element#querySelectorAll\n    let querySelectorAllWithScope = polyfill(ElementPrototype.querySelectorAll);\n    ElementPrototype.querySelectorAll = function querySelectorAll(selectors) {\n      return querySelectorAllWithScope.apply(this, arguments);\n    };\n    // polyfill Element#matches\n    if (ElementPrototype.matches) {\n      let matchesWithScope = polyfill(ElementPrototype.matches);\n      ElementPrototype.matches = function matches(selectors) {\n        return matchesWithScope.apply(this, arguments);\n      };\n    }\n    // polyfill Element#closest\n    if (ElementPrototype.closest) {\n      let closestWithScope = polyfill(ElementPrototype.closest);\n      ElementPrototype.closest = function closest(selectors) {\n        return closestWithScope.apply(this, arguments);\n      };\n    }\n  }\n})(Element.prototype);\n\n//////////////////////\n// prepend polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend\n//////////////////////\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]);\n\n//////////////////////\n// append polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append\n//////////////////////\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('append')) {\n      return;\n    }\n    Object.defineProperty(item, 'append', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function append() {\n        let argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n\n        argArr.forEach(function (argItem) {\n          let isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n\n        this.appendChild(docFrag);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]);\n\n//////////////////////\n// before polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before\n//////////////////////\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('before')) {\n      return;\n    }\n    Object.defineProperty(item, 'before', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function before() {\n        let argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n\n        argArr.forEach(function (argItem) {\n          let isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n\n        this.parentNode.insertBefore(docFrag, this);\n      }\n    });\n  });\n})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);\n\n//////////////////////\n// findIndex polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n//////////////////////\n\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    value: function (predicate) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n      var o = Object(this);\n      var len = o.length >>> 0;\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n      var thisArg = arguments[1];\n      var k = 0;\n      while (k < len) {\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return k;\n        }\n        k++;\n      }\n      return -1;\n    },\n    configurable: true,\n    writable: true\n  });\n}\n\n//////////////////////\n// CustomEvent polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n//////////////////////\n\n(function () {\n  if (typeof window.CustomEvent === \"function\") {\n    return false;\n  }\n\n  function CustomEvent(event, params) {\n    params = params || {bubbles: false, cancelable: false, detail: undefined};\n    let evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent;\n})();\n\n//////////////////////\n// scrollingElement polyfill\n// https://github.com/yangg/scrolling-element\n//////////////////////\n\n(function () {\n  if (document.scrollingElement) {\n    return;\n  }\n  let element = null;\n\n  function scrollingElement() {\n    if (element) {\n      return element;\n    } else if (document.body.scrollTop) {\n      // speed up if scrollTop > 0\n      return (element = document.body);\n    }\n    let iframe = document.createElement('iframe');\n    iframe.style.height = '1px';\n    document.documentElement.appendChild(iframe);\n    let doc = iframe.contentWindow.document;\n    doc.write('<!DOCTYPE html><div style=\"height:9999em\">x</div>');\n    doc.close();\n    let isCompliant = doc.documentElement.scrollHeight > doc.body.scrollHeight;\n    iframe.parentNode.removeChild(iframe);\n    return (element = isCompliant ? document.documentElement : document.body);\n  }\n\n  Object.defineProperty(document, 'scrollingElement', {\n    get: scrollingElement\n  })\n})();\n\n//////////////////////\n// composedPath polyfill\n// https://github.com/DieterHolvoet/event-propagation-path\n//////////////////////\n\nif (!Event.prototype.composedPath) {\n  Event.prototype.composedPath = function () {\n    let polyfill = function () {\n      let element = this.target || null;\n      let pathArr = [element];\n\n      if (!element || !element.parentElement) {\n        return [];\n      }\n\n      while (element.parentElement) {\n        element = element.parentElement;\n        pathArr.unshift(element);\n      }\n\n      return pathArr;\n    }.bind(this);\n\n    return this.path || (this.composedPath && this.composedPath()) || polyfill();\n  };\n}","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Fade\n//////////////////////\n\nclass Fade extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    let options = self.options;\n    // event on\n    let fadeHandler = Xt.dataStorage.put(window, options.on + '.' + self.namespace,\n      self.eventFadeHandler.bind(self));\n    if (options.on) {\n      let events = [...options.on.split(' ')];\n      for (let event of events) {\n        addEventListener(event, fadeHandler, Xt.passiveSupported ? {passive: true} : false);\n      }\n    }\n    addEventListener('scroll.xt.fade', fadeHandler);\n    // listener dispatch initial only 1 time next frame\n    if (!document.documentElement.dataset.xtFadeInitialDone) {\n      document.documentElement.dataset.xtFadeInitialDone = 'true';\n      requestAnimationFrame(function () {\n        dispatchEvent(new CustomEvent('scroll.xt.fade'));\n        delete document.documentElement.dataset.xtFadeDone;\n      });\n    }\n  }\n\n  //////////////////////\n  // handler\n  //////////////////////\n\n  /**\n   * element on handler\n   * @param {Event} e\n   */\n  eventFadeHandler(e) {\n    let self = this;\n    // handler\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      Xt.eventDelay(e, self.object, function () {\n        self.eventFade();\n      }, 'resize.xt.fade');\n    }\n  }\n\n  //////////////////////\n  // event\n  //////////////////////\n\n  /**\n   * window scroll\n   */\n  eventFade() {\n    let self = this;\n    let options = self.options;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // var\n    let current = 0;\n    let currents = [];\n    let scrollInverse = false;\n    let windowHeight = window.innerHeight;\n    let scrollingElement = document.scrollingElement;\n    let scrollTop = scrollingElement.scrollTop;\n    let scrollTopOld = self.detail.scrollTopOld;\n    // direction\n    if (scrollTop < scrollTopOld) {\n      scrollInverse = true;\n    }\n    // core\n    for (let el of self.elements) {\n      if (!el.classList.contains('fade--block')\n        && (el.offsetWidth || el.offsetHeight || el.getClientRects().length)) { // :visible\n        // var\n        let rectElTop = el.offsetParent.getBoundingClientRect().top + el.offsetTop; // we use parents to not include transforms animations\n        let heightEl = parseFloat(getComputedStyle(el).height);\n        // scroll\n        let changed = false;\n        let top = rectElTop + scrollTop;\n        let bottom = top + heightEl;\n        let dist = windowHeight * options.distance;\n        // activation\n        let checkTop = scrollTop + windowHeight >= top + dist;\n        let checkBottom = scrollTop < bottom - dist;\n        if (checkTop && checkBottom) {\n          // inside\n          changed = self.checkOn(el);\n          if (changed) {\n            currents.push(el);\n            cancelAnimationFrame(parseFloat(el.dataset.xtEventFrame));\n            el.dataset.xtEventFrame = requestAnimationFrame(function () {\n              current++;\n              el.dataset.xtOnCount = current.toString();\n              el.dataset.xtOnTot = currents.length.toString();\n              self.eventOn(el);\n            }).toString();\n          }\n        } else {\n          // outside\n          changed = self.checkOff(el);\n          el.classList.add('fade--visible');\n          if (changed) {\n            el.classList.add('fade--scroll');\n            currents.push(el);\n            cancelAnimationFrame(parseFloat(el.dataset.xtEventFrame));\n            el.dataset.xtEventFrame = requestAnimationFrame(function () {\n              current++;\n              el.dataset.xtOffCount = current.toString();\n              el.dataset.xtOffTot = currents.length.toString();\n              self.eventOff(el);\n            }).toString();\n          }\n        }\n        // direction\n        if (changed) {\n          if (scrollInverse) {\n            el.classList.remove('fade--down');\n            el.classList.add('fade--up');\n          } else {\n            el.classList.add('fade--down');\n            el.classList.remove('fade--up');\n          }\n        }\n      }\n    }\n    // save for direction\n    self.detail.scrollTopOld = scrollTop;\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nFade.componentName = 'xt-fade';\nFade.optionsDefault = {\n  \"elements\": \".fade\",\n  \"class\": \"active\",\n  \"on\": \"scroll resize\",\n  \"min\": 0,\n  \"max\": \"Infinity\",\n  \"instant\": true,\n  \"distance\": 0.2,\n  \"aria\": false\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Fade;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Slider\n//////////////////////\n\nclass Slider extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init elements, targets and currents\n   */\n  initScope() {\n    let self = this;\n    let options = self.options;\n    // targets\n    self.initScopeTargets();\n    // dragger\n    if (options.drag && options.drag.dragger) {\n      self.dragger = self.object.querySelectorAll(options.drag.dragger)[0];\n    }\n    // autoHeight\n    if (options.autoHeight) {\n      self.autoHeight = self.object.querySelectorAll(options.autoHeight)[0];\n    }\n    // automatic group\n    let draggerWidthTemp;\n    if (options.groupMq) {\n      // width\n      let draggerWidth = self.dragger ? self.dragger.offsetWidth : self.object.offsetWidth;\n      // groupMq media\n      let mqs = Object.entries(options.groupMq);\n      if (mqs.length) {\n        for (let [key, value] of mqs) {\n          if (window.matchMedia(key).matches) {\n            draggerWidthTemp = draggerWidth * value;\n          }\n        }\n      }\n      draggerWidth = draggerWidthTemp;\n      // generate groups\n      self.groupMq = [];\n      self.groupMq.push([]);\n      let currentCount = draggerWidth;\n      for (let [i, target] of self.targets.entries()) {\n        // calculate\n        let targetWidth = target.offsetWidth;\n        if (targetWidth === 0) { // when display none\n          let container = target.parentNode;\n          let clone = target.cloneNode(true);\n          clone.classList.add('xt-calculating');\n          container.append(clone);\n          targetWidth = clone.offsetWidth;\n          container.removeChild(clone);\n        }\n        currentCount -= targetWidth;\n        // overflow\n        let currentGroup = self.groupMq.length - 1;\n        if (currentCount < 0 && self.groupMq[currentGroup].length) {\n          self.groupMq.push([]);\n          currentGroup = self.groupMq.length - 1;\n          currentCount = draggerWidth;\n          currentCount -= targetWidth;\n        }\n        // assign group\n        self.groupMq[currentGroup].push(target);\n        target.setAttribute('data-xt-group', self.namespace + '-' + currentGroup);\n      }\n    }\n    // generate elements\n    if (options.pagination) {\n      let pags = self.object.querySelectorAll(options.pagination);\n      if (!pags.length) {\n        console.error('Error: Xt.Slider pagination not found for', self.object); // Xt check\n      }\n      // remove old\n      self.pags = self.pags ? self.pags : [];\n      for (let pags of self.pags) {\n        for (let pag of pags) {\n          let container = pag.parentNode;\n          container.removeChild(pag);\n        }\n      }\n      // add new\n      self.pags = [];\n      for (let pag of pags) {\n        self.pags.push([]);\n        // vars\n        let currentPags = self.pags[self.pags.length - 1];\n        let clone = pag.querySelectorAll('.xt-clone')[0];\n        let container = clone.parentNode;\n        let arr;\n        if (options.groupMq) {\n          arr = self.groupMq;\n        } else {\n          arr = self.targets;\n        }\n        // populate\n        for (let [i, group] of arr.entries()) {\n          currentPags[i] = clone.cloneNode(true);\n          let item = currentPags[i];\n          let html = item.innerHTML;\n          html = html.replace(new RegExp('{{num}}', 'ig'), (i + 1).toString());\n          html = html.replace(new RegExp('{{tot}}', 'ig'), arr.length.toString());\n          item.innerHTML = html;\n          item.classList.remove('xt-clone');\n          if (options.groupMq) {\n            item.setAttribute('data-xt-group', self.namespace + '-' + i);\n          }\n          container.insertBefore(item, clone);\n        }\n      }\n    }\n    // only one call per group\n    for (let slide of self.targets) {\n      delete slide.dataset.xtDraggerInitialDone;\n      delete slide.dataset.xtSlideOnDone;\n    }\n    // initDragger\n    if (self.dragger) {\n      self.destroyElements.push(self.dragger);\n      self.initDragger();\n    }\n    // elements\n    self.initScopeElements();\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    super.initEvents();\n    let self = this;\n    let options = self.options;\n    let dragger = self.dragger;\n    // targets\n    for (let slide of self.targets) {\n      // disable links\n      slide.classList.add('links--none');\n      // slide on\n      let slideOnHandler = Xt.dataStorage.put(slide, 'on' + '.' + self.namespace,\n        self.eventSlideOnHandler.bind(self).bind(self, dragger, slide));\n      slide.addEventListener('on.xt', slideOnHandler, true); // @FIX event.xt: useCapture for custom events order on re-init\n      // slide off\n      let slideOffHandler = Xt.dataStorage.put(slide, 'off' + '.' + self.namespace,\n        self.eventSlideOffHandler.bind(self).bind(self, dragger, slide));\n      slide.addEventListener('off.xt', slideOffHandler, true); // @FIX event.xt: useCapture for custom events order on re-init\n    }\n    // dragger\n    if (options.drag) {\n      // drag\n      let dragstartHandler = Xt.dataStorage.put(dragger, 'mousedown touchstart' + '.' + self.namespace,\n        self.eventDragstartHandler.bind(self).bind(self, dragger));\n      let events = ['mousedown', 'touchstart'];\n      for (let event of events) {\n        dragger.addEventListener(event, dragstartHandler, Xt.passiveSupported ? {passive: true} : false);\n      }\n      // grab\n      if (!self.disabled) {\n        dragger.classList.add('grab');\n      } else {\n        dragger.classList.remove('grab');\n      }\n    }\n    // resize\n    let resizeHandler = Xt.dataStorage.put(window, 'resize' + '.' + self.namespace,\n      self.eventResizeHandler.bind(self).bind(self));\n    addEventListener('resize', resizeHandler);\n  }\n\n  /**\n   * init dragger\n   */\n  initDragger() {\n    let self = this;\n    // init slides\n    for (let targets of self.targets) {\n      self.initDraggerSlide(targets);\n    }\n  }\n\n  /**\n   * init dragger slide\n   */\n  initDraggerSlide(slide) {\n    let self = this;\n    let options = self.options;\n    // save vars\n    if (!slide.dataset.xtDraggerInitialDone\n      && (slide.offsetWidth || slide.offsetHeight || slide.getClientRects().length)) { // :visible\n      // vars\n      let targets = self.getTargets(slide);\n      let slideLeft = slide.offsetLeft;\n      let slideWidth = slide.offsetWidth;\n      let slideHeight = slide.offsetHeight;\n      // group\n      let group = slide.getAttribute('data-xt-group');\n      if (group) {\n        if (!slide.dataset.xtDraggerInitialDone) {\n          // vars\n          slideLeft = Infinity;\n          slideWidth = 0;\n          slideHeight = 0;\n          for (let target of targets) {\n            slideLeft = target.offsetLeft < slideLeft ? slide.offsetLeft : slideLeft;\n            slideWidth += target.offsetWidth;\n            let h = target.offsetHeight;\n            slideHeight = h > slideHeight ? h : slideHeight;\n          }\n          for (let target of targets) {\n            target.dataset.xtDraggerInitialDone = 'true';\n            target.dataset.groupHeight = slideHeight.toString();\n          }\n        }\n      } else {\n        slide.dataset.xtDraggerInitialDone = 'true';\n      }\n      // pos with alignment\n      let pos;\n      if (options.align === 'center') {\n        pos = self.dragger.offsetWidth / 2 - slideLeft - slideWidth / 2;\n      } else if (options.align === 'left') {\n        pos = -slideLeft;\n        pos = pos > 0 ? 0 : pos; // @FIX initial value sometimes is wrong\n      } else if (options.align === 'right') {\n        pos = -slideLeft + self.dragger.offsetWidth - slideWidth;\n      }\n      // pos with contain\n      if (options.contain) {\n        let min = 0;\n        let slideLast = self.targets[self.targets.length - 1];\n        let slideLastLeft = slideLast.offsetLeft;\n        let slideLastWidth = slideLast.offsetWidth;\n        let max = -slideLastLeft + self.dragger.offsetWidth - slideLastWidth;\n        pos = pos > min ? min : pos;\n        pos = pos < max ? max : pos;\n      }\n      // save pos\n      if (group) {\n        for (let target of targets) {\n          target.dataset.groupPos = pos.toString();\n        }\n      } else {\n        slide.dataset.groupPos = pos.toString();\n      }\n    }\n  }\n\n  //////////////////////\n  // handler\n  //////////////////////\n\n  /**\n   * slide on handler\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Node|HTMLElement|EventTarget|Window} slide\n   * @param {Event} e\n   */\n  eventSlideOnHandler(dragger, slide, e) {\n    let self = this;\n    // handler\n    if (e.target === slide) { // @FIX event.xt: handler triggered by child xt events\n      self.eventSlideOn(dragger, e);\n    }\n  }\n\n  /**\n   * slide off handler\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Node|HTMLElement|EventTarget|Window} slide\n   * @param {Event} e\n   */\n  eventSlideOffHandler(dragger, slide, e) {\n    let self = this;\n    // handler\n    if (e.target === slide) { // @FIX event.xt: handler triggered by child xt events\n      self.eventSlideOff(dragger, e);\n    }\n  }\n\n  /**\n   * element drag on handler\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventDragstartHandler(dragger, e) {\n    let self = this;\n    // handler\n    if (!e.button || e.button !== 2) { // not right click or it gets stuck\n      if (self.initial || !self.checkAnim(Xt.arrSingle(dragger))) {\n        // save event\n        self.detail.eDragstart = e;\n        // logic\n        let eventLimit = self.object.querySelectorAll('.event-limit');\n        if (eventLimit.length) {\n          if (!Xt.checkNested(e.target, eventLimit)) {\n            self.eventDragstart(dragger, e);\n          }\n        } else {\n          self.eventDragstart(dragger, e);\n        }\n        // auto\n        self.eventAutoPause();\n        // event off\n        let dragendHandler = Xt.dataStorage.put(dragger, 'mouseup touchend' + '.' + self.namespace,\n          self.eventDragendHandler.bind(self).bind(self, dragger));\n        let events = ['mouseup', 'touchend'];\n        for (let event of events) {\n          addEventListener(event, dragendHandler);\n        }\n      }\n    }\n  }\n\n  /**\n   * element drag off handler\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventDragendHandler(dragger, e) {\n    let self = this;\n    // logic\n    let eventLimit = self.object.querySelectorAll('.event-limit');\n    if (eventLimit.length) {\n      if (!Xt.checkNested(e.target, eventLimit)) {\n        self.eventDragend(dragger, e);\n      }\n    } else {\n      self.eventDragend(dragger, e);\n    }\n    // auto\n    self.eventAutoStart();\n    // event off\n    let dragendHandler = Xt.dataStorage.get(dragger, 'mouseup touchend' + '.' + self.namespace);\n    let events = ['mouseup', 'touchend'];\n    for (let event of events) {\n      removeEventListener(event, dragendHandler);\n    }\n  }\n\n  /**\n   * element drag on\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventDragstart(dragger, e) {\n    let self = this;\n    // save event\n    self.detail.eCurrent = e;\n    // event move\n    let dragHandler = Xt.dataStorage.put(dragger, 'mousemove touchmove' + '.' + self.namespace,\n      self.eventDragHandler.bind(self).bind(self, dragger));\n    let events = ['mousemove', 'touchmove'];\n    for (let event of events) {\n      dragger.addEventListener(event, dragHandler);\n    }\n    // logic\n    self.logicDragstart(dragger, e);\n  }\n\n  /**\n   * element drag off\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventDragend(dragger, e) {\n    let self = this;\n    // save event\n    self.detail.eCurrent = e;\n    // event move\n    let dragHandler = Xt.dataStorage.get(dragger, 'mousemove touchmove' + '.' + self.namespace);\n    let events = ['mousemove', 'touchmove'];\n    for (let event of events) {\n      dragger.removeEventListener(event, dragHandler);\n    }\n    // logic\n    self.logicDragend(dragger, e);\n  }\n\n  /**\n   * element drag handler\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventDragHandler(dragger, e) {\n    let self = this;\n    // disable links\n    dragger.classList.add('links--none');\n    dragger.classList.add('jumps--none');\n    // save event\n    self.detail.eCurrent = e;\n    // logic\n    self.logicDrag(dragger, e);\n  }\n\n  //////////////////////\n  // event\n  //////////////////////\n\n  /**\n   * resize\n   * @param {Event} e\n   */\n  eventResizeHandler(e) {\n    let self = this;\n    // reinit\n    if (!self.initial) {\n      Xt.eventDelay(e, self.object, function () {\n        self.initial = true;\n        self.init();\n      }, 'resize.xt.slider');\n    }\n  }\n\n  /**\n   * slide on\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventSlideOn(dragger, e) {\n    let self = this;\n    let slide = e.target;\n    // only one call per group\n    if (slide.dataset.xtSlideOnDone) {\n      return false;\n    }\n    let targets = self.getTargets(slide);\n    for (let target of targets) {\n      target.dataset.xtSlideOnDone = 'true';\n    }\n    // reinit if needed\n    if (self.dragger) {\n      self.initDraggerSlide(slide);\n    }\n    // autoHeight\n    if (self.autoHeight) {\n      self.eventAutoHeight(slide);\n    }\n    // val\n    self.detail.xPosOld = self.detail.xPos;\n    self.detail.xPos = self.detail.xPosCurrent = self.detail.xPosReal = parseFloat(slide.dataset.groupPos);\n    // dragger\n    if (self.dragger) {\n      // prevent alignment animation\n      self.dragger.classList.remove('duration-none');\n      // initial or resizing\n      if (self.initial) {\n        // prevent alignment animation\n        self.dragger.classList.add('duration-none');\n        requestAnimationFrame(function () {\n          self.dragger.classList.remove('duration-none');\n        });\n      }\n      // drag position\n      dragger.style.transform = 'translateX(' + self.detail.xPos + 'px)';\n      // disable drag\n      dragger.classList.add('pointer-events--none');\n      Xt.animTimeout(dragger, function () {\n        dragger.classList.remove('pointer-events--none');\n      });\n      // disable links\n      dragger.classList.remove('jumps--none');\n    }\n    // disable links\n    slide.classList.remove('links--none');\n  }\n\n  /**\n   * slide off\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  eventSlideOff(dragger, e) {\n    let self = this;\n    let slide = e.target;\n    // disable links\n    slide.classList.add('links--none');\n    // only one call per group\n    let group = slide.getAttribute('data-xt-group');\n    if (group) {\n      delete slide.dataset.xtSlideOnDone;\n    }\n  }\n\n  /**\n   * imageLoaded\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {Event} e\n   */\n  eventImageLoaded(el, e = null) {\n    super.eventImageLoaded(el, e);\n    let self = this;\n    // autoHeight\n    if (self.autoHeight) {\n      self.eventAutoHeight(el);\n    }\n  }\n\n  /**\n   * slide resize\n   * @param {Node|HTMLElement|EventTarget|Window} slide\n   * @param {Event} e\n   */\n  eventAutoHeight(slide, e = null) {\n    let self = this;\n    // resize\n    let slideHeight = slide.offsetHeight;\n    if (slide.getAttribute('data-xt-group')) {\n      let groupHeight = parseFloat(slide.dataset.groupHeight);\n      slideHeight = groupHeight > slideHeight ? groupHeight : slideHeight;\n    }\n    self.autoHeight.style.height = slideHeight + 'px';\n    // listener dispatch\n    let detail = self.eDetailSet(e);\n    slide.dispatchEvent(new CustomEvent('autoHeight.xt', {detail: detail}));\n  }\n\n  //////////////////////\n  // logic\n  //////////////////////\n\n  /**\n   * element drag on logic\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  logicDragstart(dragger, e) {\n    let self = this;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // prevent dragging animation\n    self.dragger.classList.add('duration-none');\n    // logic\n    self.detail.xVelocity = null;\n    self.detail.xVelocityNext = null;\n    // listener dispatch\n    let detail = self.eDetailSet(e);\n    dragger.dispatchEvent(new CustomEvent('dragstart.xt.slider', {detail: detail}));\n  }\n\n  /**\n   * element drag off logic\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  logicDragend(dragger, e) {\n    let self = this;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // disable drag\n    requestAnimationFrame(function () { // needed for touch links triggering before logicDragend\n      dragger.classList.add('pointer-events--none');\n    });\n    // disable links\n    requestAnimationFrame(function () {\n      dragger.classList.remove('links--none');\n      dragger.classList.remove('jumps--none');\n    });\n    // logic\n    self.logicDragfriction(dragger, e);\n    // listener dispatch\n    let detail = self.eDetailSet(e);\n    dragger.dispatchEvent(new CustomEvent('dragend.xt.slider', {detail: detail}));\n  }\n\n  /**\n   * element drag friction logic\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  logicDragfriction(dragger, e) {\n    let self = this;\n    let options = self.options;\n    // friction\n    if (Math.abs(self.detail.xVelocity) > options.drag.limit) {\n      // drag\n      self.logicDrag(dragger, e, true);\n      // loop\n      requestAnimationFrame(function () {\n        self.logicDragfriction(dragger, e);\n      });\n    } else {\n      // dragend\n      requestAnimationFrame(self.logicDragfrictionend.bind(self).bind(e, dragger));\n    }\n  }\n\n  /**\n   * element drag logic\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   * @param {Boolean} friction\n   */\n  logicDrag(dragger, e, friction = false) {\n    let self = this;\n    let options = self.options;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // calculate\n    let pos = self.detail.xPosReal;\n    let xPosCurrent = self.detail.xPosCurrent || 0;\n    let sign = Math.sign(self.detail.xVelocity);\n    if (friction) {\n      // momentum\n      let fncFriction = options.drag.friction;\n      if (typeof fncFriction === 'string') {\n        fncFriction = new Function('velocity', fncFriction);\n      }\n      self.detail.xVelocity = fncFriction(Math.abs(self.detail.xVelocity)) * sign;\n      // no momentum when stopping\n      if (self.detail.dragDate) {\n        let dateDiff = new Date() - self.detail.dragDate;\n        self.detail.dragDate = null;\n        if (dateDiff > options.drag.timeLimit) {\n          self.detail.xVelocity = 0;\n        }\n      }\n      // on friction\n      pos = pos + self.detail.xVelocity;\n      self.detail.xStart = self.detail.eDragstart.clientX || self.detail.eDragstart.touches[0].clientX;\n      self.detail.xCurrent = pos + self.detail.xStart - xPosCurrent;\n    } else {\n      // momentum\n      self.detail.dragDate = new Date();\n      // on normal drag\n      let xPosOld = pos || 0;\n      self.detail.xStart = self.detail.eDragstart.clientX || self.detail.eDragstart.touches[0].clientX;\n      self.detail.xCurrent = self.detail.eCurrent.clientX || self.detail.eCurrent.touches[0].clientX;\n      pos = xPosCurrent + (self.detail.xCurrent - self.detail.xStart) * options.drag.factor;\n      // keep some velocity (median value of previous frame and not current frame)\n      self.detail.xVelocity = (self.detail.xVelocity + self.detail.xVelocityNext) / 2;\n      self.detail.xVelocityNext = pos - xPosOld;\n    }\n    // val\n    self.detail.xPosReal = pos;\n    // overflow\n    let first = self.targets[0];\n    let last = self.targets[self.targets.length - 1];\n    let min = parseFloat(first.dataset.groupPos);\n    let max = parseFloat(last.dataset.groupPos);\n    let fncOverflow = options.drag.overflow;\n    if (typeof fncOverflow === 'string') {\n      fncOverflow = new Function('overflow', fncOverflow);\n    }\n    if (friction) {\n      if (pos > min || pos < max) {\n        self.detail.xVelocity = fncOverflow(Math.abs(self.detail.xVelocity)) * sign;\n      }\n    } else {\n      if (pos > min) {\n        self.detail.xVelocity = 0;\n        let overflow = pos - min;\n        //pos = min + Math.pow(overflow, options.drag.overflow);\n        pos = min + fncOverflow(overflow);\n      } else if (pos < max) {\n        self.detail.xVelocity = 0;\n        let overflow = pos - max;\n        //pos = max - Math.pow(-overflow, options.drag.overflow);\n        pos = max - fncOverflow(-overflow);\n      }\n    }\n    // val\n    self.detail.xPosOld = self.detail.xPos;\n    self.detail.xPos = pos;\n    // drag position\n    dragger.style.transform = 'translateX(' + self.detail.xPos + 'px)';\n    // listener dispatch\n    let detail = self.eDetailSet(e);\n    dragger.dispatchEvent(new CustomEvent('drag.xt.slider', {detail: detail}));\n  }\n\n  /**\n   * element drag friction off logic\n   * @param {Node|HTMLElement|EventTarget|Window} dragger\n   * @param {Event} e\n   */\n  logicDragfrictionend(dragger, e) {\n    let self = this;\n    let options = self.options;\n    let xPosCurrent = self.detail.xPosCurrent || 0;\n    // prevent dragging animation\n    self.dragger.classList.remove('duration-none');\n    // only one call per group\n    let currents = self.getCurrents();\n    for (let current of currents) {\n      let group = current.getAttribute('data-xt-group');\n      if (group) {\n        for (let target of self.getTargets(current)) {\n          delete target.dataset.xtSlideOnDone;\n        }\n      }\n    }\n    // activate or reset\n    let xPos = self.detail.xPosReal;\n    let xDist = xPos - xPosCurrent;\n    if (Math.abs(xDist) > options.drag.threshold) {\n      // get nearest\n      let found = self.currentIndex;\n      if (options.groupMq) {\n        for (let [i, group] of self.groupMq.entries()) {\n          for (let slideCheck of group) {\n            let check = xPos - dragger.offsetWidth / 2 + slideCheck.offsetLeft;\n            if (check < 0\n              && (slideCheck.offsetWidth || slideCheck.offsetHeight || slideCheck.getClientRects().length)) { // :visible\n              found = i;\n            }\n          }\n        }\n      } else {\n        for (let [i, slideCheck] of self.targets.entries()) {\n          let check = xPos - dragger.offsetWidth / 2 + slideCheck.offsetLeft;\n          if (check < 0\n            && (slideCheck.offsetWidth || slideCheck.offsetHeight || slideCheck.getClientRects().length)) { // :visible\n            found = i;\n          }\n        }\n      }\n      // goTo with force\n      requestAnimationFrame(function () { // @FIX jump event order (slider drag single)\n        if (found === self.currentIndex) {\n          // change at least one\n          if (Math.sign(xDist) < 0) {\n            self.goToNext(1, true);\n          } else {\n            self.goToPrev(1, true);\n          }\n        } else {\n          // goToIndex\n          self.goToIndex(found, true);\n        }\n      });\n    } else {\n      // val\n      self.detail.xPosOld = self.detail.xPos;\n      self.detail.xPos = self.detail.xPosCurrent;\n      // drag position\n      dragger.style.transform = 'translateX(' + self.detail.xPosCurrent + 'px)';\n      // disable drag\n      Xt.animTimeout(dragger, function () {\n        dragger.classList.remove('pointer-events--none');\n      });\n      // listener dispatch\n      let detail = self.eDetailSet(e);\n      dragger.dispatchEvent(new CustomEvent('dragreset.xt.slider', {detail: detail}));\n    }\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nSlider.componentName = 'xt-slider';\nSlider.optionsDefault = {\n  \"elements\": \"[data-xt-pag]\",\n  \"targets\": \".slide\",\n  \"class\": \"active\",\n  \"on\": \"click\",\n  \"toggle\": false,\n  \"min\": 1,\n  \"max\": 1,\n  \"instant\": true,\n  \"jump\": true,\n  \"navigation\": \"[data-xt-nav]\",\n  \"keyboard\": {\n    \"selector\": \".slides\"\n  },\n  \"aria\": {\n    \"labelledby\": false\n  },\n  // slider only\n  \"autoHeight\": \".slides\",\n  \"groupMq\": {\"all\": 0.8},\n  \"align\": \"center\",\n  \"contain\": false,\n  \"pagination\": \".slider_pagination\",\n  \"drag\": {\n    \"dragger\": \".slides_inner\",\n    \"threshold\": 100,\n    \"factor\": 1,\n    \"limit\": 2.5,\n    \"friction\": \"return Math.pow(velocity, 0.95)\",\n    \"overflow\": \"return Math.pow(overflow, 0.73)\",\n    \"timeLimit\": 25\n  }\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Slider;","\nimport Xt from '../xtend';\nimport Core from '../core';\n\n//////////////////////\n// Sticky\n//////////////////////\n\nclass Sticky extends Core {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement|EventTarget|Window} object Base node\n   * @param {Object} optionsJs User options\n   * @constructor\n   */\n  constructor(object, optionsJs = {}) {\n    super(object, optionsJs);\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init elements, targets and currents\n   */\n  initScope() {\n    super.initScope();\n    let self = this;\n    let options = self.options;\n    // mode\n    self.mode = 'unique';\n    // container\n    self.container = Xt.parents(self.object, '.xt-container');\n    if (!self.container.length) {\n      self.container = Xt.createElement('<div class=\"xt-container xt-fixed--inner\"></div>');\n      self.object.before(self.container);\n      self.container.append(self.object);\n      self.container = Xt.parents(self.object, '.xt-container');\n    }\n    // targets\n    self.targets = self.container[0].querySelectorAll('.xt-clone');\n    if (!self.targets.length) {\n      self.targets = self.object.cloneNode(true);\n      self.targets.classList.add('xt-clone', 'xt-ignore');\n      for (let elId of self.targets.querySelectorAll('[id]')) {\n        elId.setAttribute('id', elId.getAttribute('id') + '-clone');\n      }\n      for (let elName of self.targets.querySelectorAll('[name]')) {\n        elName.setAttribute('name', elName.getAttribute('name') + '-clone');\n      }\n      self.container[0].append(self.targets);\n    }\n    self.targets = Xt.arrSingle(self.targets);\n    // xt-fixed\n    self.object.classList.add('xt-fixed');\n    // hide\n    if (options.hide === 'down') {\n      self.object.classList.add('sticky-hide--down');\n    } else {\n      self.object.classList.remove('sticky-hide--down');\n    }\n    if (options.hide === 'up') {\n      self.object.classList.add('sticky-hide--up');\n    } else {\n      self.object.classList.remove('sticky-hide--up');\n    }\n    // z-index\n    self.zIndex = 100 - Xt.getUniqueNum();\n    self.object.style.zIndex = self.zIndex;\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    let options = self.options;\n    // event on\n    let stickyHandler = Xt.dataStorage.put(window, options.on + '.' + self.namespace,\n      self.eventStickyHandler.bind(self));\n    if (options.on) {\n      let events = [...options.on.split(' ')];\n      for (let event of events) {\n        addEventListener(event, stickyHandler, Xt.passiveSupported ? {passive: true} : false);\n      }\n    }\n    addEventListener('scroll.xt.sticky', stickyHandler);\n    // listener dispatch initial only 1 time next frame\n    if (!document.documentElement.dataset.xtStickyInitialDone) {\n      document.documentElement.dataset.xtStickyInitialDone = 'true';\n      requestAnimationFrame(function () {\n        dispatchEvent(new CustomEvent('scroll.xt.sticky'));\n        delete document.documentElement.dataset.xtStickyDone;\n      });\n    }\n    // autoClose\n    let autoCloseHandler = Xt.dataStorage.put(self.object, 'hide' + '.' + self.namespace,\n      Xt.autoClose.bind(this, self.object));\n    self.object.addEventListener('hide.xt.sticky', autoCloseHandler);\n  }\n\n  //////////////////////\n  // handler\n  //////////////////////\n\n  /**\n   * element on handler\n   * @param {Event} e\n   */\n  eventStickyHandler(e) {\n    let self = this;\n    // handler\n    if (!e.detail || !e.detail.skip) { // needed because we trigger .xt event\n      Xt.eventDelay(e, self.object, function() {\n        self.eventSticky(self.object, e);\n      }, 'resize.xt.sticky');\n    }\n  }\n\n  //////////////////////\n  // event\n  //////////////////////\n\n  /**\n   * window scroll\n   * @param {Node|HTMLElement|EventTarget|Window} element To be activated or deactivated\n   * @param {Event} e\n   */\n  eventSticky(element, e) {\n    let self = this;\n    let options = self.options;\n    // disabled\n    if (self.disabled && !self.initial) {\n      return false;\n    }\n    // var\n    let anim = true;\n    let hide = false;\n    let scrollInverse = false;\n    let add = 0;\n    let addHide = 0;\n    let windowHeight = window.innerHeight;\n    let heightEl = parseFloat(getComputedStyle(element).height);\n    let heightTarget = parseFloat(getComputedStyle(self.targets[0]).height);\n    let rectContainerTop = self.container[0].getBoundingClientRect().top;\n    let scrollingElement = document.scrollingElement;\n    let scrollHeight = scrollingElement.scrollHeight;\n    let scrollTop = scrollingElement.scrollTop;\n    let scrollTopOld = self.detail.scrollTopOld;\n    // direction\n    if (scrollTop < scrollTopOld) {\n      element.classList.remove('sticky--down');\n      element.classList.add('sticky--up');\n      scrollInverse = true;\n    } else {\n      element.classList.add('sticky--down');\n      element.classList.remove('sticky--up');\n    }\n    // hide\n    if (options.hide === 'down') {\n      if (!scrollInverse) {\n        addHide = heightTarget;\n      }\n    }\n    if (options.hide === 'up') {\n      if (scrollInverse) {\n        addHide = heightTarget;\n      }\n    }\n    // scroll\n    let top = self.eventStickyPos(options.limit['top'] || self.targets, scrollTop, rectContainerTop);\n    let bottom = self.eventStickyPos(options.limit['bottom'], scrollTop, Infinity);\n    if (options.position === 'top') {\n      bottom -= heightTarget;\n    }\n    if (options.position === 'bottom') {\n      top -= windowHeight - heightTarget;\n      bottom = Math.abs(scrollHeight - windowHeight - bottom);\n    }\n    // contain and add\n    let addTop = 0;\n    let addBottom = 0;\n    if (options.contain) {\n      if (options.contain['top']) {\n        let addTopObj = self.eventStickyHeight(options.contain['top'], scrollInverse);\n        addTop = addTopObj.val;\n        if (addTop !== null && addTop > rectContainerTop) {\n          add = addTop;\n          if (!addTopObj.foundHide) {\n            anim = false;\n          }\n        } else {\n          addTop = null;\n        }\n      }\n      if (options.contain['bottom']) {\n        addBottom = self.eventStickyPos(options.contain['bottom']);\n        if (addBottom !== null && addBottom < heightEl + addTop) {\n          add = addBottom - heightEl;\n          anim = false;\n        } else {\n          addBottom = null;\n        }\n      }\n    }\n    // save real add for calculation\n    element.dataset.xtAddSticky = add.toString();\n    // activation\n    let checkTop = scrollTop >= top - add + addHide;\n    let checkBottom = scrollTop < bottom + add - addHide;\n    if (checkTop && checkBottom) {\n      // inside\n      self.eventOn(element);\n      // hide\n      if (addHide) {\n        hide = true;\n      }\n    } else {\n      // outside\n      self.eventOff(element);\n    }\n    // after active\n    if (element.classList.contains(...self.classes)) {\n      // hide\n      if (hide) {\n        add = -heightEl;\n        if (!element.classList.contains('sticky--hide')) {\n          element.classList.add('sticky--hide');\n          // autoClose\n          dispatchEvent(new CustomEvent('autoClose.xt'));\n          // listener dispatch\n          let detail = self.eDetailSet(e);\n          element.dispatchEvent(new CustomEvent('hide.xt.sticky', {detail: detail}));\n        }\n      } else {\n        if (element.classList.contains('sticky--hide')) {\n          element.classList.remove('sticky--hide');\n          // listener dispatch\n          let detail = self.eDetailSet(e);\n          element.dispatchEvent(new CustomEvent('show.xt.sticky', {detail: detail}));\n        }\n      }\n    } else {\n      // reset\n      add = 0;\n      anim = false;\n    }\n    // anim\n    if (anim && scrollTopOld !== undefined) {\n      if (!element.classList.contains('sticky--moving')) {\n        element.classList.add('sticky--moving');\n      }\n    } else if (element.classList.contains(...self.classes)) {\n      if (element.classList.contains('sticky--moving')) {\n        element.classList.remove('sticky--moving');\n      }\n    }\n    // top and bottom\n    if (!checkTop) {\n      if (!element.classList.contains('sticky--top')) {\n        element.classList.add('sticky--top');\n      }\n    } else {\n      if (element.classList.contains('sticky--top')) {\n        element.classList.remove('sticky--top');\n      }\n    }\n    if (!checkBottom) {\n      if (!element.classList.contains('sticky--bottom')) {\n        element.classList.add('sticky--bottom');\n      }\n    } else {\n      if (element.classList.contains('sticky--bottom')) {\n        element.classList.remove('sticky--bottom');\n      }\n    }\n    // set add\n    if (add !== self.detail.addOld) {\n      element.style[options.position] = add + 'px';\n    }\n    // fix position fixed width 100% of parent\n    let width = self.normalizeWidth(self.container[0].clientWidth);\n    if (element.style.width !== width) {\n      element.style.width = width;\n    }\n    // save for direction\n    self.detail.addOld = add;\n    self.detail.scrollTopOld = scrollTop;\n  }\n\n  /**\n   * get position of option\n   * @param {String|Number|Element} option\n   * @param {Number} val Default value\n   * @param {Number} scrollTop Window's scrollTop\n   * @returns {Number} value Option's position (px)\n   */\n  eventStickyPos(option, scrollTop = 0, val = null) {\n    if (!isNaN(parseFloat(option))) {\n      val = option;\n    } else {\n      let elements = Array.isArray(option) || NodeList.prototype.isPrototypeOf(option) ? option : document.querySelectorAll(option);\n      if (elements.length) {\n        let found = false;\n        val = 0;\n        for (let el of elements) {\n          let addSticky = parseFloat(el.dataset.xtAddSticky);\n          if (addSticky) { // if sticky--hide get real add\n            let style = getComputedStyle(el);\n            if (style.display !== 'none') {\n              val += addSticky;\n              found = true;\n            }\n          } else {\n            let rect = el.getBoundingClientRect();\n            val += rect.top;\n            found = true;\n          }\n        }\n        if (found) {\n          val += scrollTop;\n        } else {\n          val = null;\n        }\n      }\n    }\n    return val;\n  }\n\n  //////////////////////\n  // event util\n  //////////////////////\n\n  /**\n   * get height of option\n   * @param {String|Number|Element} option\n   * @param {Boolean} scrollInverse\n   * @param {Number} val Default value\n   * @returns {Object} obj Option's height (px) and if found hide element\n   */\n  eventStickyHeight(option, scrollInverse, val = null) {\n    let self = this;\n    let options = self.options;\n    // logic\n    let foundHide = false;\n    if (!isNaN(parseFloat(option))) {\n      val = option;\n    } else {\n      let elements = Array.isArray(option) || NodeList.prototype.isPrototypeOf(option) ? option : document.querySelectorAll(option);\n      if (elements.length) {\n        for (let el of elements) {\n          if (el.classList.contains('sticky-hide--down') && el.classList.contains(...self.classes)) {\n            if (scrollInverse) {\n              val += el.clientHeight;\n              foundHide = true;\n            }\n          } else if (el.classList.contains('sticky-hide--up') && el.classList.contains(...self.classes)) {\n            if (!scrollInverse) {\n              val += el.clientHeight;\n              foundHide = true;\n            }\n          } else {\n            val += el.clientHeight;\n          }\n        }\n      }\n    }\n    return {val: val, foundHide: foundHide};\n  }\n\n}\n\n//////////////////////\n// option\n//////////////////////\n\nSticky.componentName = 'xt-sticky';\nSticky.optionsDefault = {\n  \"class\": \"active\",\n  \"on\": \"scroll resize\",\n  \"min\": 0,\n  \"max\": \"Infinity\",\n  \"instant\": true,\n  \"position\": \"top\",\n  \"limit\": {\"bottom\": \"Infinity\"},\n  \"contain\": false,\n  \"hide\": false,\n  \"aria\": false\n};\n\n//////////////////////\n// export\n//////////////////////\n\nexport default Sticky;","/*! Xtend v0.8.2 (https://getxtend.com/)\n@copyright (c) 2017 - 2019 Riccardo Caroli\n@license MIT (https://github.com/minimit/xtend-library/blob/master/LICENSE) */\n\nimport './polyfill';\nimport Core from './core';\nimport Toggle from './interaction/toggle';\nimport Drop from './interaction/drop';\nimport Overlay from './interaction/overlay';\nimport Slider from './presentation/slider';\nimport Sticky from './presentation/sticky';\nimport Fade from './presentation/fade';\nimport Ajax from './others/ajax';\nimport Smooth from './others/smooth';\n\n//////////////////////\n// constructor\n//////////////////////\n\nconst Xt = {};\n\n//////////////////////\n// components\n//////////////////////\n\nXt.Core = Core;\nXt.Toggle = Toggle;\nXt.Drop = Drop;\nXt.Overlay = Overlay;\nXt.Slider = Slider;\nXt.Sticky = Sticky;\nXt.Fade = Fade;\nXt.Ajax = Ajax;\nXt.Smooth = Smooth;\n\n//////////////////////\n// var\n//////////////////////\n\nXt.observe = [];\nXt.currents = {}; // Xt currents based on namespace (so shared between Xt objects)\nXt.resizeDelay = 100;\nXt.scrollDelay = false;\nXt.focusables = 'a, button, details, input, iframe, select, textarea';\nXt.components = [\n  {'name': 'xt-core', 'class': Xt.Core},\n  {'name': 'xt-toggle', 'class': Xt.Toggle},\n  {'name': 'xt-drop', 'class': Xt.Drop},\n  {'name': 'xt-overlay', 'class': Xt.Overlay},\n  {'name': 'xt-slider', 'class': Xt.Slider},\n  {'name': 'xt-sticky', 'class': Xt.Sticky},\n  {'name': 'xt-fade', 'class': Xt.Fade},\n  {'name': 'xt-ajax', 'class': Xt.Ajax}\n];\n\n//////////////////////\n// set and get\n//////////////////////\n\n/**\n * set component to element\n * @param {Node|HTMLElement|EventTarget|Window} object Component's object\n * @param {String} name Component's name\n * @param {Object} self Component' self\n */\nXt.set = function (object, name, self) {\n  Xt.dataStorage.put(object, name, self);\n};\n\n/**\n * get component from element\n * @param {Node|HTMLElement|EventTarget|Window} object Component's object\n * @param {String} name Component name\n */\nXt.get = function (object, name) {\n  return Xt.dataStorage.get(object, name);\n};\n\n/**\n * get component from element\n * @param {Node|HTMLElement|EventTarget|Window} object Component's object\n * @param {String} name Component name\n */\nXt.remove = function (object, name) {\n  return Xt.dataStorage.remove(object, name);\n};\n\n//////////////////////\n// init\n//////////////////////\n\n/**\n * init component\n */\nXt.init = function (added = document.documentElement) {\n  added = Xt.arrSingle(added);\n  for (let element of added) {\n    // components\n    for (let component of Xt.components) {\n      if (element.matches('[data-' + component.name + ']')) {\n        new component.class(element);\n      }\n      for (let el of element.querySelectorAll('[data-' + component.name + ']')) {\n        new component.class(el);\n      }\n    }\n    // btnMerge\n    if (element.matches('a, button') && Array.from(element).filter(x => x.querySelectorAll('.btn').length !== 0)) {\n      Xt.btnMerge.init(element);\n    }\n    for (let el of Array.from(element.querySelectorAll('a, button')).filter(x => x.querySelectorAll('.btn').length !== 0)) {\n      Xt.btnMerge.init(el);\n    }\n  }\n};\n\n/**\n * destroy component\n */\nXt.destroy = function (removed = document.documentElement) {\n  removed = Xt.arrSingle(removed);\n  for (let element of removed) {\n    // components\n    for (let component of Xt.components) {\n      if (element.matches('[data-' + component.name + '-done]')) {\n        let self = Xt.get(element, component.name);\n        if (self) {\n          self.destroy();\n        }\n      }\n      for (let el of element.querySelectorAll('[data-' + component.name + '-done]')) {\n        let self = Xt.get(el, component.name);\n        if (self) {\n          self.destroy();\n        }\n      }\n    }\n    // btnMerge\n    if (element.matches('a, button') && Array.from(element).filter(x => x.querySelectorAll('.btn').length !== 0)) {\n      Xt.btnMerge.destroy(element);\n    }\n    for (let el of Array.from(element.querySelectorAll('a, button')).filter(x => x.querySelectorAll('.btn').length !== 0)) {\n      Xt.btnMerge.destroy(el);\n    }\n  }\n};\n\n/**\n * initObserve\n */\n\nXt.initObserve = function (added = document.documentElement) {\n  for (let obj of Xt.observe) {\n    let els = [];\n    if (added.matches(obj.matches)) {\n      els.push(added);\n    }\n    for (let el of added.querySelectorAll(obj.matches)) {\n      els.push(el);\n    }\n    if (els.length) {\n      for (let [i, el] of els.entries()) {\n        obj.fnc(el, i, obj.matches);\n      }\n    }\n  }\n};\n\n/**\n * observer\n */\n\nXt.observer = new MutationObserver(function (mutationsList) {\n  for (let mutation of mutationsList) {\n    if (mutation.type === 'childList') {\n      // removed\n      for (let removed of mutation.removedNodes) {\n        if (removed.nodeType === 1 && !removed.classList.contains('xt-ignore')) {\n          Xt.destroy(removed);\n        }\n      }\n      // added\n      for (let added of mutation.addedNodes) {\n        if (added.nodeType === 1 && !added.classList.contains('xt-ignore')) {\n          Xt.init(added);\n          Xt.initObserve(added);\n        }\n      }\n    }\n  }\n});\n\n/**\n * document ready\n */\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', function () {\n    setVh();\n    Xt.init();\n    Xt.initObserve();\n    Xt.observer.observe(document.documentElement, {\n      characterData: false,\n      attributes: false,\n      childList: true,\n      subtree: true\n    });\n  });\n} else {\n  requestAnimationFrame(function () {\n    setVh();\n    Xt.init();\n    Xt.initObserve();\n    Xt.observer.observe(document.documentElement, {\n      characterData: false,\n      attributes: false,\n      childList: true,\n      subtree: true\n    });\n  });\n}\n\n//////////////////////\n// dataStorage\n// map storage for HTML elements\n//////////////////////\n\nXt.dataStorage = {\n\n  /**\n   * properties\n   */\n  _storage: new Map(),\n\n  /**\n   * put key/obj pair on element's map\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {String} key\n   * @param {Object|Function} obj\n   * @returns {Object|Function}\n   */\n  put: function (el, key, obj) {\n    // new map if not already there\n    if (!this._storage.has(el)) {\n      this._storage.set(el, new Map());\n    }\n    // return\n    let getEl = this._storage.get(el);\n    let getKey = getEl.get(key);\n    if (getKey) {\n      return getKey;\n    }\n    // put\n    getEl.set(key, obj);\n    return getEl.get(key);\n  },\n\n  /**\n   * get obj from key on element's map\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {String} key\n   * @returns {Object|Function}\n   */\n  get: function (el, key) {\n    let getEl = this._storage.get(el);\n    // if no map return null\n    if (!getEl) {\n      return null;\n    }\n    // get\n    return getEl.get(key);\n  },\n\n  /**\n   * get all obj/key on element's map\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @returns {Object|Function}\n   */\n  getAll: function (el) {\n    let getEl = this._storage.get(el);\n    // if no map return null\n    if (!getEl) {\n      return null;\n    }\n    // get all\n    return getEl;\n  },\n\n  /**\n   * has key on element's map\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {String} key\n   * @returns {Boolean}\n   */\n  has: function (el, key) {\n    // has\n    return this._storage.get(el).has(key);\n  },\n\n  /**\n   * remove element's map key\n   * @param {Node|HTMLElement|EventTarget|Window} el\n   * @param {String} key\n   * @returns {Boolean}\n   */\n  remove: function (el, key) {\n    let getEl = this._storage.get(el);\n    // if no map return null\n    if (!getEl) {\n      return null;\n    }\n    // remove\n    let ret = getEl.delete(key);\n    if (!getEl.size === false) {\n      this._storage.delete(el);\n    }\n    return ret;\n  }\n\n};\n\n//////////////////////\n// scrollbar\n// util to remember scrollbar state\n//////////////////////\n\nXt.scrollbar = {\n\n  /**\n   * properties\n   */\n  currents: [],\n\n  /**\n   * get scrollbar currents\n   * @returns {Array} Currents\n   */\n  get: function () {\n    return Xt.scrollbar.currents;\n  },\n\n  /**\n   * add scrollbar currents\n   * @param {Node|HTMLElement|EventTarget|Window} el Elements to be deactivated\n   */\n  add: function (el) {\n    Xt.scrollbar.currents.push(el);\n  },\n\n  /**\n   * remove scrollbar currents\n   * @param {Node|HTMLElement|EventTarget|Window} el Elements to be deactivated\n   */\n  remove: function (el) {\n    Xt.scrollbar.currents = Xt.scrollbar.currents.filter(x => x !== el);\n  }\n\n\n};\n\n//////////////////////\n// focus\n// util to remember focus on key or interactions events\n//////////////////////\n\nXt.focus = {\n\n  /**\n   * properties\n   */\n  block: false,\n  current: null,\n\n  /**\n   * enable focus change events\n   */\n  on: function () {\n    // event key\n    let focusChangeKeyHandler = Xt.dataStorage.put(document, 'keyup.focus',\n      Xt.focus.changeKey);\n    document.addEventListener('keyup', focusChangeKeyHandler);\n    // event mouse\n    let focusChangeOtherHandler = Xt.dataStorage.get(document, 'mousedown touchstart pointerdown.focus');\n    document.removeEventListener('mousedown', focusChangeOtherHandler);\n    document.removeEventListener('touchstart', focusChangeOtherHandler);\n    document.removeEventListener('pointerdown', focusChangeOtherHandler);\n  },\n\n  /**\n   * disable focus change events\n   */\n  off: function () {\n    // event\n    let focusChangeKeyHandler = Xt.dataStorage.get(document, 'keyup.focus');\n    document.removeEventListener('keyup', focusChangeKeyHandler);\n    // event mouse\n    let focusChangeOtherHandler = Xt.dataStorage.put(document, 'mousedown touchstart pointerdown.focus',\n      Xt.focus.changeOther);\n    document.addEventListener('mousedown', focusChangeOtherHandler);\n    document.addEventListener('touchstart', focusChangeOtherHandler, Xt.passiveSupported ? {passive: true} : false);\n    document.addEventListener('pointerdown', focusChangeOtherHandler, Xt.passiveSupported ? {passive: true} : false);\n  },\n\n  /**\n   * focus change on key events\n   * @param {Event} e Event\n   */\n  changeKey: function (e) {\n    let code = e.keyCode ? e.keyCode : e.which;\n    if (code === 9) {\n      if (!Xt.focus.block) {\n        // remember Xt.focus\n        Xt.focus.current = document.activeElement;\n      }\n      if (!document.documentElement.classList.contains('xt-focus')) {\n        // html.xt-focus\n        document.documentElement.classList.add('xt-focus');\n        // switch mode\n        Xt.focus.off();\n      }\n    }\n  },\n\n  /**\n   * focus change on other events\n   * @param {Event} e Event\n   */\n  changeOther: function (e) {\n    if (!Xt.focus.block) {\n      // remember Xt.focus\n      Xt.focus.current = e.target;\n    }\n    if (document.documentElement.classList.contains('xt-focus')) {\n      // html.xt-focus\n      document.documentElement.classList.remove('xt-focus');\n      // switch mode\n      Xt.focus.on();\n    }\n  }\n\n};\n\nXt.focus.on();\n\n//////////////////////\n// focusLimit\n// util to limit focus inside HTML elements\n//////////////////////\n\nXt.focusLimit = {\n\n  /**\n   * activate focusLimit to an element\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   */\n  on: function (el) {\n    // @FIX Xt.focus when clicking and not used tab before\n    Xt.focus.current = Xt.focus.current ? Xt.focus.current : document.activeElement;\n    // var\n    let focusables = el.querySelectorAll(Xt.focusables);\n    focusables = Array.from(focusables).filter(x => x.matches(':not([disabled]), :not([tabindex=\"-1\"])')); // filter out parent\n    if (focusables.length) {\n      let first = focusables[0];\n      let last = focusables[focusables.length - 1];\n      // event\n      let focusLimitHandler = Xt.dataStorage.put(document, 'keyup.focusLimit',\n        Xt.focusLimit.limit.bind(this).bind(this, focusables, first, last));\n      document.addEventListener('keyup', focusLimitHandler);\n    }\n  },\n\n  /**\n   * deactivate focusLimit to an element\n   */\n  off: function () {\n    // event\n    let focusLimitHandler = Xt.dataStorage.get(document, 'keyup.focusLimit');\n    document.removeEventListener('keyup', focusLimitHandler);\n  },\n\n  /**\n   * limit even on focus when activated\n   * @param {NodeList|Array} focusables Focusables elements\n   * @param {Node|HTMLElement|EventTarget|Window} first First focusable element\n   * @param {Node|HTMLElement|EventTarget|Window} last Last focusable element\n   * @param {Event} e Event\n   */\n  limit: function (focusables, first, last, e) {\n    let code = e.keyCode ? e.keyCode : e.which;\n    if (code === 9) {\n      if (!focusables.includes(document.activeElement)) {\n        if (e.shiftKey) {\n          last.focus();\n          e.preventDefault();\n        } else {\n          first.focus();\n          e.preventDefault();\n        }\n      }\n    }\n  }\n\n};\n\n//////////////////////\n// btnMerge\n// pass .hover and .active classes to .btn inside\n//////////////////////\n\nXt.btnMerge = {\n\n  /**\n   * init to pass .hover and .active to .btn inside Element\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   */\n  init: function (el) {\n    if (!el.dataset.xtBtnMergeDone) {\n      el.dataset.xtBtnMergeDone = 'true';\n      el.addEventListener('mouseenter', Xt.btnMerge.hoverOn);\n      el.addEventListener('mouseleave', Xt.btnMerge.hoverOff);\n      el.addEventListener('mousedown', Xt.btnMerge.activeOn);\n      addEventListener('mouseup', Xt.btnMerge.activeOff.bind(el));\n    }\n  },\n\n  /**\n   * destroy\n   * @param {Node|HTMLElement|EventTarget|Window} el Element\n   */\n  destroy: function (el) {\n    if (el.dataset.xtBtnMergeDone) {\n      delete el.dataset.xtBtnMergeDone;\n      el.removeEventListener('mouseenter', Xt.btnMerge.hoverOn);\n      el.removeEventListener('mouseleave', Xt.btnMerge.hoverOff);\n      el.removeEventListener('mousedown', Xt.btnMerge.activeOn);\n      removeEventListener('mouseup', Xt.btnMerge.activeOff.bind(el));\n    }\n  },\n\n  /**\n   * event hover on\n   */\n  hoverOn: function () {\n    let els = this.querySelectorAll('.btn');\n    for (let el of els) {\n      el.classList.add('hover');\n    }\n  },\n\n  /**\n   * event hover off\n   */\n  hoverOff: function () {\n    let els = this.querySelectorAll('.btn');\n    for (let el of els) {\n      el.classList.remove('hover');\n    }\n  },\n\n  /**\n   * event active on\n   */\n  activeOn: function () {\n    let els = this.querySelectorAll('.btn');\n    for (let el of els) {\n      el.classList.add('active');\n    }\n  },\n\n  /**\n   * event active off\n   */\n  activeOff: function () {\n    let els = this.querySelectorAll('.btn');\n    for (let el of els) {\n      el.classList.remove('active');\n    }\n  }\n\n};\n\n//////////////////////\n// utils\n//////////////////////\n\n/**\n * Return translate values https://gist.github.com/aderaaij/a6b666bf756b2db1596b366da921755d\n * @param {Node|HTMLElement|EventTarget|Window} element Element to check target\n * @return {Array} Values [x, y]\n */\n/*\nUSAGE: Xt.getTranslate(dragger)[0]; // for translateX\nXt.getTranslate = function (element) {\n  let transArr = [];\n  let style = getComputedStyle(element);\n  let transform = style.transform;\n  let mat = transform.match(/^matrix3d\\((.+)\\)$/);\n  if (mat) {\n    transArr.push(parseFloat(mat[1].split(', ')[13]));\n  } else {\n    mat = transform.match(/^matrix\\((.+)\\)$/);\n    mat ? transArr.push(parseFloat(mat[1].split(', ')[4])) : transArr.push(0);\n    mat ? transArr.push(parseFloat(mat[1].split(', ')[5])) : transArr.push(0);\n  }\n  return transArr;\n};\n*/\n\n/**\n * Check if event target is inside elements\n * @param {Node|HTMLElement|EventTarget|Window} element Element to check target\n * @param {NodeList|Array} targets Elements to check inside\n * @return {Boolean}\n */\nXt.checkNested = function (element, targets) {\n  let result = false;\n  for (let t of targets) {\n    if (element === t || t.contains(element)) {\n      result = true;\n    }\n  }\n  return result;\n};\n\n/**\n * Get scrollbar width of document\n * @param {Boolean} force Force recalc\n * @returns {Number} Scrollbar width\n */\nXt.scrollbarWidth = function (force = false) {\n  if (Xt.scrollbarWidthVal === undefined) {\n    let scrollbarWidthHandler = Xt.dataStorage.put(window, 'resize.scrollbar',\n      Xt.scrollbarWidth.bind(this, true));\n    addEventListener('resize', scrollbarWidthHandler);\n  }\n  if (force || Xt.scrollbarWidthVal === undefined) {\n    // add outer\n    let outer = document.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.width = '100px';\n    outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n    document.body.appendChild(outer);\n    let widthNoScroll = outer.offsetWidth;\n    // force scrollbars\n    outer.style.overflow = 'scroll';\n    // add inner\n    let inner = document.createElement('div');\n    inner.style.width = '100%';\n    outer.appendChild(inner);\n    let widthWithScroll = inner.offsetWidth;\n    // remove\n    outer.parentNode.removeChild(outer);\n    // return\n    Xt.scrollbarWidthVal = widthNoScroll - widthWithScroll;\n  }\n  return Xt.scrollbarWidthVal;\n};\n\n/**\n * Get unique id\n * @returns {String} Unique id\n */\nXt.getuniqueId = function () {\n  Xt.uid = Xt.uid !== undefined ? Xt.uid : 0;\n  return 'xt-' + (Xt.uid++);\n};\n\n/**\n * Get unique number\n * @returns {Number} Unique number\n */\nXt.getUniqueNum = function () {\n  Xt.unumber = Xt.unumber !== undefined ? Xt.unumber : 0;\n  return Xt.unumber++;\n};\n\n/**\n * Merge objects\n * @param {Array} arr Array of objects to merge\n * @returns {Object} Merged object\n */\nXt.merge = function (arr) {\n  let final = {};\n  for (let obj of arr) {\n    if (obj) {\n      for (let [key, value] of Object.entries(obj)) {\n        if (typeof value === 'object'\n          && !value.nodeName // not HTML element\n          && value !== window) { // not window\n          final[key] = Xt.merge([final[key], value]);\n        } else {\n          final[key] = value;\n        }\n      }\n    }\n  }\n  return final;\n};\n\n/**\n * Make an array when element is only one\n * @param {Object|Array} el\n * @returns {Array}\n */\nXt.arrSingle = function (el) {\n  if (!el) {\n    return [];\n  }\n  if (el.length === undefined || el.tagName === 'FORM') {\n    let arr = new Array(1);\n    arr[0] = el;\n    return arr;\n  } else {\n    return el;\n  }\n};\n\n/**\n * Create HTML elements from html string\n * @param {String} str Html string (only 1 root html tag)\n * @return {Node|HTMLElement|EventTarget|Window} HTML elements\n */\nXt.createElement = function (str) {\n  let div = document.createElement('div');\n  div.innerHTML = str.trim();\n  return div.firstChild;\n};\n\n/**\n * Query element's parents\n * @param {Node|HTMLElement|EventTarget|Window} el Child element\n * @param {String} query Query parents\n * @return {Array} Parents elements by query\n */\nXt.parents = function (el, query) {\n  let parents = [];\n  while (el = el.parentElement.closest(query)) {\n    parents.push(el);\n  }\n  return parents;\n};\n\n/**\n * autoClose inside Element\n * @param {Node|HTMLElement|EventTarget|Window} el Element container\n */\nXt.autoClose = function (el) {\n  let query = '[data-xt-namespace^=\"drop-xt-\"]';\n  for (let drop of el.querySelectorAll(query)) {\n    drop.dispatchEvent(new CustomEvent('off.xt'));\n  }\n};\n\n/**\n * get transition or animation time\n * @param {Node|HTMLElement|EventTarget|Window} el Element animating\n * @param {Number} timing Force duration in milliseconds\n * @returns {Number} Time in milliseconds\n */\nXt.animTime = function (el, timing = null) {\n  if (timing || timing === 0) {\n    return timing;\n  } else {\n    let style = getComputedStyle(el);\n    let transition = parseFloat(style.transitionDuration) + parseFloat(style.transitionDelay);\n    let animation = parseFloat(style.animationDuration) + parseFloat(style.animationDelay);\n    if (transition || animation) {\n      timing = Math.max(transition, animation);\n    }\n    return timing * 1000;\n  }\n};\n\n/**\n * execute function after transition or animation\n * @param {Node|HTMLElement|EventTarget|Window} el Element animating\n * @param {Function} func Function to execute after transition or animation\n * @param {Number} timing Force duration in milliseconds\n */\nXt.animTimeout = function (el, func, timing = null) {\n  clearTimeout(parseFloat(el.dataset.xtAnimTimeout));\n  el.dataset.xtAnimTimeout = setTimeout(func, timing || timing === 0 ? timing : Xt.animTime(el)).toString();\n};\n\n/**\n * clear animTimeout\n * @param {Node|HTMLElement|EventTarget|Window} el Element animating\n */\nXt.animTimeoutClear = function (el) {\n  clearTimeout(parseFloat(el.dataset.xtAnimTimeout));\n};\n\n/**\n * Fix resize event multiple calls and adds delay on resize and scroll events\n * @param {Event} e Event\n * @param {Node|HTMLElement|EventTarget|Window} element Element to save timeout\n * @param {Function} func Function to execute\n * @param {String} prefix Timeout prefix\n */\nXt.eventDelay = function (e, element, func, prefix = '') {\n  let container = document.documentElement;\n  if (e && e.type && (e.type === 'resize' || e.type === 'scroll')) {\n    let delay = Xt[e.type + 'Delay'];\n    if (delay === false) {\n      // func\n      func(e);\n      return false;\n    }\n    if (e.type === 'resize') {\n      // multiple calls check\n      if (window.innerWidth === parseFloat(container.dataset['xtEventDelay'])) { // only width no height because it changes on scroll on mobile\n        return false;\n      }\n      // save after a frame to execute all eventDelay\n      cancelAnimationFrame(parseFloat(container.dataset.xtEventDelayFrame));\n      container.dataset.xtEventDelayFrame = requestAnimationFrame( function() {\n        container.dataset['xtEventDelay'] = window.innerWidth.toString();\n      }).toString();\n    }\n    // delay\n    clearTimeout(parseFloat(element.dataset['xt' + e.type + prefix + 'Timeout']));\n    element.dataset['xt' + e.type + prefix + 'Timeout'] = setTimeout(function () {\n      // func\n      func(e);\n    }, delay).toString();\n  } else {\n    // func\n    func(e);\n  }\n};\n\ndocument.documentElement.dataset['xtEventDelay'] = window.innerWidth.toString();\n\n/**\n * passive events\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n */\n\nXt.passiveSupported = false;\ntry {\n  let options = {\n    get passive() {\n      Xt.passiveSupported = true;\n    }\n  };\n  addEventListener('test', options, options);\n  removeEventListener('test', options, options);\n} catch (err) {\n  Xt.passiveSupported = false;\n}\n\n//////////////////////\n// root utils\n//////////////////////\n\n// https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n\n/* USAGE:\nheight: 100vh;\nheight: calc(var(--vh, 1vh) * 100);\n*/\n\nfunction setVh(e = null) {\n  e = e ? e : {type: 'resize'};\n  Xt.eventDelay(e, document.documentElement, function () {\n    Xt.vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', Xt.vh + 'px');\n  }, 'vh.xt');\n}\naddEventListener('resize', setVh);\n\n// pass focus and blur window events to iframes\n\naddEventListener('focus', function () {\n  for (let iframe of document.querySelectorAll('iframe')) {\n    iframe.contentWindow.dispatchEvent(new CustomEvent('focus'));\n  }\n});\n\naddEventListener('blur', function () {\n  for (let iframe of document.querySelectorAll('iframe')) {\n    iframe.contentWindow.dispatchEvent(new CustomEvent('blur'));\n  }\n});\n\n//////////////////////\n// export\n//////////////////////\n\nif (typeof define === 'function' && define.amd) {\n  define(['xt'], Xt);\n} else if (typeof exports === 'object') {\n  module.exports = Xt;\n}\n\nglobal.Xt = Xt;\nexport default Xt;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}