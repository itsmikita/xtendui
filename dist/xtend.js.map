{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_add-to-unscopables.js","node_modules/core-js/modules/_an-instance.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_array-copy-within.js","node_modules/core-js/modules/_array-fill.js","node_modules/core-js/modules/_array-includes.js","node_modules/core-js/modules/_array-methods.js","node_modules/core-js/modules/_array-species-constructor.js","node_modules/core-js/modules/_array-species-create.js","node_modules/core-js/modules/_bind.js","node_modules/core-js/modules/_classof.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_collection-strong.js","node_modules/core-js/modules/_collection-weak.js","node_modules/core-js/modules/_collection.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_create-property.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_defined.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_enum-bug-keys.js","node_modules/core-js/modules/_enum-keys.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_fails-is-regexp.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_fix-re-wks.js","node_modules/core-js/modules/_flags.js","node_modules/core-js/modules/_for-of.js","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_inherit-if-required.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_iobject.js","node_modules/core-js/modules/_is-array-iter.js","node_modules/core-js/modules/_is-array.js","node_modules/core-js/modules/_is-integer.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_is-regexp.js","node_modules/core-js/modules/_iter-call.js","node_modules/core-js/modules/_iter-create.js","node_modules/core-js/modules/_iter-define.js","node_modules/core-js/modules/_iter-detect.js","node_modules/core-js/modules/_iter-step.js","node_modules/core-js/modules/_iterators.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_math-expm1.js","node_modules/core-js/modules/_math-fround.js","node_modules/core-js/modules/_math-log1p.js","node_modules/core-js/modules/_math-sign.js","node_modules/core-js/modules/_meta.js","node_modules/core-js/modules/_microtask.js","node_modules/core-js/modules/_new-promise-capability.js","node_modules/core-js/modules/_object-assign.js","node_modules/core-js/modules/_object-create.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_object-dps.js","node_modules/core-js/modules/_object-gopd.js","node_modules/core-js/modules/_object-gopn-ext.js","node_modules/core-js/modules/_object-gopn.js","node_modules/core-js/modules/_object-gops.js","node_modules/core-js/modules/_object-gpo.js","node_modules/core-js/modules/_object-keys-internal.js","node_modules/core-js/modules/_object-keys.js","node_modules/core-js/modules/_object-pie.js","node_modules/core-js/modules/_object-sap.js","node_modules/core-js/modules/_object-to-array.js","node_modules/core-js/modules/_own-keys.js","node_modules/core-js/modules/_perform.js","node_modules/core-js/modules/_promise-resolve.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_redefine-all.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_same-value.js","node_modules/core-js/modules/_set-proto.js","node_modules/core-js/modules/_set-species.js","node_modules/core-js/modules/_set-to-string-tag.js","node_modules/core-js/modules/_shared-key.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_species-constructor.js","node_modules/core-js/modules/_string-at.js","node_modules/core-js/modules/_string-context.js","node_modules/core-js/modules/_string-pad.js","node_modules/core-js/modules/_string-repeat.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/_to-absolute-index.js","node_modules/core-js/modules/_to-index.js","node_modules/core-js/modules/_to-integer.js","node_modules/core-js/modules/_to-iobject.js","node_modules/core-js/modules/_to-length.js","node_modules/core-js/modules/_to-object.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_typed-array.js","node_modules/core-js/modules/_typed-buffer.js","node_modules/core-js/modules/_typed.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_user-agent.js","node_modules/core-js/modules/_validate-collection.js","node_modules/core-js/modules/_wks-define.js","node_modules/core-js/modules/_wks-ext.js","node_modules/core-js/modules/_wks.js","node_modules/core-js/modules/core.get-iterator-method.js","node_modules/core-js/modules/es6.array.copy-within.js","node_modules/core-js/modules/es6.array.fill.js","node_modules/core-js/modules/es6.array.find-index.js","node_modules/core-js/modules/es6.array.find.js","node_modules/core-js/modules/es6.array.from.js","node_modules/core-js/modules/es6.array.iterator.js","node_modules/core-js/modules/es6.array.of.js","node_modules/core-js/modules/es6.function.name.js","node_modules/core-js/modules/es6.map.js","node_modules/core-js/modules/es6.math.acosh.js","node_modules/core-js/modules/es6.math.asinh.js","node_modules/core-js/modules/es6.math.atanh.js","node_modules/core-js/modules/es6.math.cbrt.js","node_modules/core-js/modules/es6.math.clz32.js","node_modules/core-js/modules/es6.math.cosh.js","node_modules/core-js/modules/es6.math.expm1.js","node_modules/core-js/modules/es6.math.fround.js","node_modules/core-js/modules/es6.math.hypot.js","node_modules/core-js/modules/es6.math.imul.js","node_modules/core-js/modules/es6.math.log10.js","node_modules/core-js/modules/es6.math.log1p.js","node_modules/core-js/modules/es6.math.log2.js","node_modules/core-js/modules/es6.math.sign.js","node_modules/core-js/modules/es6.math.sinh.js","node_modules/core-js/modules/es6.math.tanh.js","node_modules/core-js/modules/es6.math.trunc.js","node_modules/core-js/modules/es6.number.epsilon.js","node_modules/core-js/modules/es6.number.is-finite.js","node_modules/core-js/modules/es6.number.is-integer.js","node_modules/core-js/modules/es6.number.is-nan.js","node_modules/core-js/modules/es6.number.is-safe-integer.js","node_modules/core-js/modules/es6.number.max-safe-integer.js","node_modules/core-js/modules/es6.number.min-safe-integer.js","node_modules/core-js/modules/es6.object.assign.js","node_modules/core-js/modules/es6.object.freeze.js","node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","node_modules/core-js/modules/es6.object.get-own-property-names.js","node_modules/core-js/modules/es6.object.get-prototype-of.js","node_modules/core-js/modules/es6.object.is-extensible.js","node_modules/core-js/modules/es6.object.is-frozen.js","node_modules/core-js/modules/es6.object.is-sealed.js","node_modules/core-js/modules/es6.object.is.js","node_modules/core-js/modules/es6.object.keys.js","node_modules/core-js/modules/es6.object.prevent-extensions.js","node_modules/core-js/modules/es6.object.seal.js","node_modules/core-js/modules/es6.object.set-prototype-of.js","node_modules/core-js/modules/es6.promise.js","node_modules/core-js/modules/es6.reflect.apply.js","node_modules/core-js/modules/es6.reflect.construct.js","node_modules/core-js/modules/es6.reflect.define-property.js","node_modules/core-js/modules/es6.reflect.delete-property.js","node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","node_modules/core-js/modules/es6.reflect.get-prototype-of.js","node_modules/core-js/modules/es6.reflect.get.js","node_modules/core-js/modules/es6.reflect.has.js","node_modules/core-js/modules/es6.reflect.is-extensible.js","node_modules/core-js/modules/es6.reflect.own-keys.js","node_modules/core-js/modules/es6.reflect.prevent-extensions.js","node_modules/core-js/modules/es6.reflect.set-prototype-of.js","node_modules/core-js/modules/es6.reflect.set.js","node_modules/core-js/modules/es6.regexp.flags.js","node_modules/core-js/modules/es6.regexp.match.js","node_modules/core-js/modules/es6.regexp.replace.js","node_modules/core-js/modules/es6.regexp.search.js","node_modules/core-js/modules/es6.regexp.split.js","node_modules/core-js/modules/es6.set.js","node_modules/core-js/modules/es6.string.code-point-at.js","node_modules/core-js/modules/es6.string.ends-with.js","node_modules/core-js/modules/es6.string.from-code-point.js","node_modules/core-js/modules/es6.string.includes.js","node_modules/core-js/modules/es6.string.raw.js","node_modules/core-js/modules/es6.string.repeat.js","node_modules/core-js/modules/es6.string.starts-with.js","node_modules/core-js/modules/es6.symbol.js","node_modules/core-js/modules/es6.typed.array-buffer.js","node_modules/core-js/modules/es6.typed.float32-array.js","node_modules/core-js/modules/es6.typed.float64-array.js","node_modules/core-js/modules/es6.typed.int16-array.js","node_modules/core-js/modules/es6.typed.int32-array.js","node_modules/core-js/modules/es6.typed.int8-array.js","node_modules/core-js/modules/es6.typed.uint16-array.js","node_modules/core-js/modules/es6.typed.uint32-array.js","node_modules/core-js/modules/es6.typed.uint8-array.js","node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","node_modules/core-js/modules/es6.weak-map.js","node_modules/core-js/modules/es6.weak-set.js","node_modules/core-js/modules/es7.array.includes.js","node_modules/core-js/modules/es7.object.entries.js","node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","node_modules/core-js/modules/es7.object.values.js","node_modules/core-js/modules/es7.string.pad-end.js","node_modules/core-js/modules/es7.string.pad-start.js","node_modules/core-js/modules/web.dom.iterable.js","node_modules/core-js/modules/web.immediate.js","node_modules/core-js/modules/web.timers.js","node_modules/regenerator-runtime/runtime.js","src/scripts/xtend-utils.js","src/scripts/xtend.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphepRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvtBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAEA;AACA;AACA;;AAEA,IAAM,SAAS,EAAf;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAO,QAAP,GAAkB,EAAlB;;AAEA;AACA;AACA;;AAEA;;;AAGA,OAAO,OAAP,GAAiB,YAAgD;AAAA,MAAtC,SAAsC,uEAA1B,SAAS,eAAiB;;AAC/D;AACA,QAAM,IAAN,CAAW,UAAU,gBAAV,CAA2B,kBAA3B,CAAX,EAA2D,OAA3D,CAAmE,UAAU,EAAV,EAAc;AAC/E,wBAAa,EAAb;AACD,GAFD;AAGA,QAAM,IAAN,CAAW,UAAU,gBAAV,CAA2B,gBAA3B,CAAX,EAAyD,OAAzD,CAAiE,UAAU,EAAV,EAA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","file":"xtend.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","'use strict';\nvar redefineAll = require('./_redefine-all');\nvar getWeak = require('./_meta').getWeak;\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar createArrayMethod = require('./_array-methods');\nvar $has = require('./_has');\nvar validate = require('./_validate-collection');\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n","// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export');\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export');\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n","// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export');\nvar sign = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n","// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export');\nvar $expm1 = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n","// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { log1p: require('./_math-log1p') });\n","// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n","// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","// 20.1.2.2 Number.isFinite(number)\nvar $export = require('./_export');\nvar _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = require('./_export');\nvar isInteger = require('./_is-integer');\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = require('./_object-dp');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = require('./_export');\nvar gOPD = require('./_object-gopd').f;\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = require('./_object-gopd');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = require('./_export');\nvar getProto = require('./_object-gpo');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n","// 26.1.10 Reflect.isExtensible(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });\n","// 26.1.12 Reflect.preventExtensions(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = require('./_export');\nvar setProto = require('./_set-proto');\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = require('./_object-dp');\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar createDesc = require('./_property-desc');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      dP.f(receiver, propertyKey, existingDescriptor);\n    } else dP.f(receiver, propertyKey, createDesc(0, V));\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n","// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n","// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});\n","// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = require('./_is-regexp');\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","'use strict';\nvar $export = require('./_export');\nvar $at = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","'use strict';\nvar $export = require('./_export');\nvar $typed = require('./_typed');\nvar buffer = require('./_typed-buffer');\nvar anObject = require('./_an-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar isObject = require('./_is-object');\nvar ArrayBuffer = require('./_global').ArrayBuffer;\nvar speciesConstructor = require('./_species-constructor');\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","'use strict';\nvar each = require('./_array-methods')(0);\nvar redefine = require('./_redefine');\nvar meta = require('./_meta');\nvar assign = require('./_object-assign');\nvar weak = require('./_collection-weak');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar validate = require('./_validate-collection');\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar tmp = {};\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n","'use strict';\nvar weak = require('./_collection-weak');\nvar validate = require('./_validate-collection');\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\nrequire('./_collection')(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","// ie9- setTimeout & setInterval additional parameters fix\nvar global = require('./_global');\nvar $export = require('./_export');\nvar userAgent = require('./_user-agent');\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","/*! xtend (https://getxtend.com/)\n@copyright (c) 2017 - 2018 Riccardo Caroli\n@license MIT (https://github.com/minimit/xtend-library/blob/master/LICENSE) */\n\n'use strict';\n\nimport 'babel-polyfill';\n\nimport {XtToggle, XtDrop, XtOverlay, XtFade, XtSticky} from './xtend';\n\n//////////////////////\n// constructor\n//////////////////////\n\nconst XtUtil = {};\n\n//////////////////////\n// properties\n//////////////////////\n\n// Xt currents based on namespace (so shared between Xt objects)\n\nXtUtil.currents = {};\n\n//////////////////////\n// methods\n//////////////////////\n\n/**\n * init all data-xt classes\n */\nXtUtil.initAll = function (container = document.documentElement) {\n  // xt-toggle\n  Array.from(container.querySelectorAll('[data-xt-toggle]')).forEach(function (el) {\n    new XtToggle(el);\n  });\n  Array.from(container.querySelectorAll('[data-xt-drop]')).forEach(function (el) {\n    new XtDrop(el);\n  });\n  Array.from(container.querySelectorAll('[data-xt-overlay]')).forEach(function (el) {\n    new XtOverlay(el);\n  });\n  Array.from(container.querySelectorAll('[data-xt-fade]')).forEach(function (el) {\n    new XtFade(el);\n  });\n  Array.from(container.querySelectorAll('[data-xt-sticky]')).forEach(function (el) {\n    new XtSticky(el);\n  });\n};\n\n/**\n * request animation frame\n * @returns {Number} animationFrameID\n * USAGE: let animationFrame = XtUtil.requestAnimationFrame.call(window, function () {});\n */\nXtUtil.requestAnimationFrame = function () {\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n}();\n\n/**\n * cancel animation frame\n * USAGE: XtUtil.cancelAnimationFrame.call(window, animationFrameID);\n */\nXtUtil.cancelAnimationFrame = function () {\n  return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function (callback) {\n    window.clearTimeout(id);\n  };\n}();\n\n/**\n * Check if event target is inside elements\n * @param {Event} e Event to check target\n * @param {NodeList|Array} targets Elements to check inside\n * @return {Boolean}\n */\nXtUtil.checkInside = function (e, targets) {\n  let result = false;\n  for (let t of targets) {\n    if (e.target === t || t.contains(e.target)) {\n      result = true;\n    }\n  }\n  return result;\n};\n\n/**\n * Check if event target is outside elements\n * @param {Event} e Event to check target\n * @param {NodeList|Array} targets Elements to check Outside\n * @return {Boolean}\n */\nXtUtil.checkOutside = function (e, targets) {\n  let result = true;\n  for (let t of targets) {\n    if (e.target === t || t.contains(e.target)) {\n      result = false;\n    }\n  }\n  return result;\n};\n\n/**\n * Get scrollbar width of document\n * @returns {Number} Scrollbar width\n */\nXtUtil.scrollbarWidth = function () {\n  // add outer\n  let outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n  document.body.appendChild(outer);\n  let widthNoScroll = outer.offsetWidth;\n  // force scrollbars\n  outer.style.overflow = 'scroll';\n  // add inner\n  let inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n  let widthWithScroll = inner.offsetWidth;\n  // remove\n  outer.parentNode.removeChild(outer);\n  return widthNoScroll - widthWithScroll;\n};\n\n/**\n * Get unique id\n * @returns {String} Unique id\n */\nXtUtil.getUniqueID = function () {\n  XtUtil.uid = XtUtil.uid !== undefined ? XtUtil.uid : 0;\n  return 'unique-id-' + (XtUtil.uid++);\n};\n\n/**\n * Get unique number\n * @returns {Number} Unique number\n */\nXtUtil.getUniqueNum = function () {\n  XtUtil.unumber = XtUtil.unumber !== undefined ? XtUtil.unumber : 0;\n  return XtUtil.unumber++;\n};\n\n/**\n * Merge objects\n * @param {Array} arr Array of objects to merge\n * @returns {Object} Merged object\n */\nXtUtil.merge = function (arr) {\n  let final = {};\n  for (let obj of arr) {\n    for (let [key, value] of Object.entries(obj)) {\n      final[key] = value;\n    }\n  }\n  return final;\n};\n\n/**\n * Make an array when element is only one\n * @param {Object|Array} element\n * @returns {Array}\n */\nXtUtil.arrSingle = function (element) {\n  if (element.length === undefined) {\n    let arr = new Array(1);\n    arr[0] = element;\n    return arr;\n  } else {\n    return element;\n  }\n};\n\n/**\n * Create DOM element from html string\n * @param {String} str Html string (only 1 root html tag)\n * @return {Node|HTMLElement} DOM element\n */\nXtUtil.createElement = function (str) {\n  let div = document.createElement('div');\n  div.innerHTML = str.trim();\n  return div.firstChild;\n};\n\n/**\n * Query element's parents\n * @param {Node|HTMLElement} element Child element\n * @param {String} query Query parents\n * @return {Array} Parents elements by query\n */\nXtUtil.parents = function (element, query) {\n  let parents = [];\n  while (element = element.parentElement.closest(query)) {\n    parents.push(element);\n  }\n  return parents;\n};\n\n/**\n * dataStorage\n * https://stackoverflow.com/questions/29222027/vanilla-alternative-to-jquery-data-function-any-native-javascript-alternati\n * USAGE: XtUtil.dataStorage.put(element, 'key', value);\n */\nXtUtil.dataStorage = {\n  _storage: new WeakMap(),\n  put: function (element, key, obj) {\n    if (!this._storage.has(key)) {\n      this._storage.set(element, new Map());\n    }\n    this._storage.get(element).set(key, obj);\n    return this._storage.get(element).get(key);\n  },\n  get: function (element, key) {\n    return this._storage.get(element).get(key);\n  },\n  has: function (element, key) {\n    return this._storage.get(element).has(key);\n  },\n  remove: function (element, key) {\n    let ret = this._storage.get(element).delete(key);\n    if (!this._storage.get(key).size === false) {\n      this._storage.delete(element);\n    }\n    return ret;\n  }\n};\n\n//////////////////////\n// api\n//////////////////////\n\nwindow.XtUtil = XtUtil;\nexport {XtUtil};\n\n//////////////////////\n// scope polyfill\n// https://github.com/jonathantneal/element-qsa-scope\n// USAGE: querySelectorAll(':scope > .selector');\n//////////////////////\n\ntry {\n  // test for scope support\n  document.querySelector(':scope *');\n} catch (error) {\n  (function (ElementPrototype) {\n    // scope regex\n    var scope = /:scope(?![\\w-])/gi;\n\n    // polyfill Element#querySelector\n    var querySelectorWithScope = polyfill(ElementPrototype.querySelector);\n\n    ElementPrototype.querySelector = function querySelector(selectors) {\n      return querySelectorWithScope.apply(this, arguments);\n    };\n\n    // polyfill Element#querySelectorAll\n    var querySelectorAllWithScope = polyfill(ElementPrototype.querySelectorAll);\n\n    ElementPrototype.querySelectorAll = function querySelectorAll(selectors) {\n      return querySelectorAllWithScope.apply(this, arguments);\n    };\n\n    // polyfill Element#matches\n    if (ElementPrototype.matches) {\n      var matchesWithScope = polyfill(ElementPrototype.matches);\n\n      ElementPrototype.matches = function matches(selectors) {\n        return matchesWithScope.apply(this, arguments);\n      };\n    }\n\n    // polyfill Element#closest\n    if (ElementPrototype.closest) {\n      var closestWithScope = polyfill(ElementPrototype.closest);\n\n      ElementPrototype.closest = function closest(selectors) {\n        return closestWithScope.apply(this, arguments);\n      };\n    }\n\n    function polyfill(qsa) {\n      return function (selectors) {\n        // whether the selectors contain :scope\n        var hasScope = selectors && scope.test(selectors);\n\n        if (hasScope) {\n          // fallback attribute\n          var attr = 'q' + Math.floor(Math.random() * 9000000) + 1000000;\n\n          // replace :scope with the fallback attribute\n          arguments[0] = selectors.replace(scope, '[' + attr + ']');\n\n          // add the fallback attribute\n          this.setAttribute(attr, '');\n\n          // results of the qsa\n          var elementOrNodeList = qsa.apply(this, arguments);\n\n          // remove the fallback attribute\n          this.removeAttribute(attr);\n\n          // return the results of the qsa\n          return elementOrNodeList;\n        } else {\n          // return the results of the qsa\n          return qsa.apply(this, arguments);\n        }\n      };\n    }\n  })(Element.prototype);\n}\n\n//////////////////////\n// matches polyfill\n// https://github.com/jonathantneal/closest\n// USAGE: element.matches(query);\n//////////////////////\n/*\n(function (proto) {\n  if (typeof proto.matches !== 'function') {\n    proto.matches = proto.msMatchesSelector || proto.webkitMatchesSelector || function matches(query) {\n      let el = this;\n      let els = (el.document || el.ownerDocument).querySelectorAll(query);\n      let index = 0;\n      while (els[index] && els[index] !== el) {\n        ++index;\n      }\n      return Boolean(els[index]);\n    };\n  }\n})(Element.prototype);\n*/\n//////////////////////\n// closest polyfill\n// https://github.com/jonathantneal/closest\n// USAGE: element.closest(query);\n//////////////////////\n\n/*\n(function (proto) {\n  if (typeof proto.closest !== 'function') {\n    proto.closest = function closest(query) {\n      let el = this;\n      while (el && el.nodeType === 1) {\n        if (el.matches(query)) {\n          return el;\n        }\n        el = el.parentNode;\n      }\n      return null;\n    };\n  }\n})(Element.prototype);\n*/\n//////////////////////\n// CustomEvent polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n//////////////////////\n\n(function () {\n  if (typeof window.CustomEvent === \"function\") {\n    return false;\n  }\n\n  function CustomEvent(event, params) {\n    params = params || {bubbles: false, cancelable: false, detail: undefined};\n    let evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent;\n})();\n\n//////////////////////\n// scrollingElement polyfill\n// https://github.com/yangg/scrolling-element\n//////////////////////\n\n(function () {\n  if (document.scrollingElement) {\n    return;\n  }\n  let element = null;\n\n  function scrollingElement() {\n    if (element) {\n      return element;\n    } else if (document.body.scrollTop) {\n      // speed up if scrollTop > 0\n      return (element = document.body);\n    }\n    let iframe = document.createElement('iframe');\n    iframe.style.height = '1px';\n    document.documentElement.appendChild(iframe);\n    let doc = iframe.contentWindow.document;\n    doc.write('<!DOCTYPE html><div style=\"height:9999em\">x</div>');\n    doc.close();\n    let isCompliant = doc.documentElement.scrollHeight > doc.body.scrollHeight;\n    iframe.parentNode.removeChild(iframe);\n    return (element = isCompliant ? document.documentElement : document.body);\n  }\n\n  Object.defineProperty(document, 'scrollingElement', {\n    get: scrollingElement\n  })\n})();\n\n//////////////////////\n// append polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append\n//////////////////////\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('append')) {\n      return;\n    }\n    Object.defineProperty(item, 'append', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function append() {\n        let argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n\n        argArr.forEach(function (argItem) {\n          let isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n\n        this.appendChild(docFrag);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]);\n\n//////////////////////\n// before polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before\n//////////////////////\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('before')) {\n      return;\n    }\n    Object.defineProperty(item, 'before', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function before() {\n        let argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n\n        argArr.forEach(function (argItem) {\n          let isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n\n        this.parentNode.insertBefore(docFrag, this);\n      }\n    });\n  });\n})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);\n\n//////////////////////\n// entries polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n//////////////////////\n\n(function (obj) {\n  if (!obj.entries) {\n    obj.entries = function( obj ){\n      let ownProps = Object.keys( obj ),\n        i = ownProps.length,\n        resArray = new Array(i); // preallocate the Array\n      while (i--)\n        resArray[i] = [ownProps[i], obj[ownProps[i]]];\n\n      return resArray;\n    };\n  }\n})(Object);\n\n//////////////////////\n// Array.from polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n//////////////////////\n\n(function (arr) {\n  if (!arr.from) {\n    arr.from = (function () {\n      var toStr = Object.prototype.toString;\n      var isCallable = function (fn) {\n        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n      };\n      var toInteger = function (value) {\n        var number = Number(value);\n        if (isNaN(number)) { return 0; }\n        if (number === 0 || !isFinite(number)) { return number; }\n        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n      };\n      var maxSafeInteger = Math.pow(2, 53) - 1;\n      var toLength = function (value) {\n        var len = toInteger(value);\n        return Math.min(Math.max(len, 0), maxSafeInteger);\n      };\n\n      // The length property of the from method is 1.\n      return function from(arrayLike/*, mapFn, thisArg */) {\n        // 1. Let C be the this value.\n        var C = this;\n\n        // 2. Let items be ToObject(arrayLike).\n        var items = Object(arrayLike);\n\n        // 3. ReturnIfAbrupt(items).\n        if (arrayLike == null) {\n          throw new TypeError('Array.from requires an array-like object - not null or undefined');\n        }\n\n        // 4. If mapfn is undefined, then let mapping be false.\n        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n        var T;\n        if (typeof mapFn !== 'undefined') {\n          // 5. else\n          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n          if (!isCallable(mapFn)) {\n            throw new TypeError('Array.from: when provided, the second argument must be a function');\n          }\n\n          // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n          if (arguments.length > 2) {\n            T = arguments[2];\n          }\n        }\n\n        // 10. Let lenValue be Get(items, \"length\").\n        // 11. Let len be ToLength(lenValue).\n        var len = toLength(items.length);\n\n        // 13. If IsConstructor(C) is true, then\n        // 13. a. Let A be the result of calling the [[Construct]] internal method\n        // of C with an argument list containing the single item len.\n        // 14. a. Else, Let A be ArrayCreate(len).\n        var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n        // 16. Let k be 0.\n        var k = 0;\n        // 17. Repeat, while k < len… (also steps a - h)\n        var kValue;\n        while (k < len) {\n          kValue = items[k];\n          if (mapFn) {\n            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n          } else {\n            A[k] = kValue;\n          }\n          k += 1;\n        }\n        // 18. Let putStatus be Put(A, \"length\", len, true).\n        A.length = len;\n        // 20. Return A.\n        return A;\n      };\n    }());\n  }\n})(Array);\n","/* xtend (https://getxtend.com/)\n@copyright (c) 2017 - 2018 Riccardo Caroli\n@license MIT (https://github.com/minimit/xtend-library/blob/master/LICENSE) */\n\n'use strict';\n\nimport 'babel-polyfill';\n\nimport {XtUtil} from './xtend-utils';\n\n//////////////////////\n// Xt\n//////////////////////\n\nclass Xt {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement} object Base node\n   * @param {Object} jsOptions User options\n   * @param {String} attr Attribute name with json options\n   * @constructor\n   */\n  constructor(object, jsOptions = {}, attr) {\n    this.object = object;\n    if (this.object) {\n      this.defaults = this.constructor.defaults;\n      // js options\n      this.options = XtUtil.merge([this.defaults, jsOptions]);\n      // markup options\n      let markupOptions = this.object.getAttribute(attr);\n      this.options = XtUtil.merge([this.options, markupOptions ? JSON.parse(markupOptions) : {}]);\n      // classes\n      if (this.options.class) {\n        this.options.classes = [...this.options.class.split(' ')];\n      }\n      // init\n      this.initSetup();\n      this.initScope();\n      this.initEvents();\n      this.initAria();\n    }\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * setup namespace, container and options\n   */\n  initSetup() {\n    let self = this;\n    let options = self.options;\n    // setup (based on xtend mode)\n    if (options.targets && options.targets.indexOf('#') !== -1) {\n      // xtend all mode\n      this.mode = 'all';\n      this.container = document.documentElement;\n      options.max = Infinity;\n      this.namespace = options.targets.toString() + '-' + options.classes.toString();\n    } else {\n      // xtend unique mode\n      this.mode = 'unique';\n      this.container = this.object;\n      this.namespace = XtUtil.getUniqueID();\n    }\n    // final namespace\n    this.namespace = this.namespace.replace(/\\W+/g, '');\n    // currents array based on namespace (so shared between Xt objects)\n    if (!this.getCurrents()) {\n      this.setCurrents([]);\n    }\n  }\n\n  /**\n   * init elements, targets and currents\n   */\n  initScope() {\n    let self = this;\n    let options = self.options;\n    // elements\n    this.elements = [];\n    if (options.elements) {\n      this.elements = XtUtil.arrSingle(this.container.querySelectorAll(options.elements));\n    }\n    if (!this.elements.length) {\n      this.elements = XtUtil.arrSingle(this.object);\n      // @FIX on next frame set all elements querying the namespace\n      XtUtil.requestAnimationFrame.call(window, function () {\n        let namespaceQuery = '[data-xt-id=' + self.namespace + ']';\n        self.elements = XtUtil.arrSingle(document.documentElement.querySelectorAll(namespaceQuery));\n      });\n    }\n    // targets\n    if (options.targets) {\n      let arr = Array.from(this.container.querySelectorAll(options.targets));\n      arr = arr.filter(x => !XtUtil.parents(x, options.targets).length); // filter out parent\n      this.targets = arr;\n    }\n    // appendTo\n    if (options.appendTo) {\n      let appendToTarget = document.documentElement.querySelectorAll(options.appendTo);\n      if (appendToTarget.length) {\n        this.targets.forEach(function (el) {\n          appendToTarget[0].appendChild(el);\n        });\n      }\n    }\n    // @FIX set namespace for next frame\n    for (let el of this.elements) {\n      el.setAttribute('data-xt-id', self.namespace);\n    }\n    // currents\n    XtUtil.requestAnimationFrame.call(window, function () {\n      if (self.elements.length) {\n        // activate options.class\n        for (let el of self.elements) {\n          if (el.classList.contains(...options.classes)) {\n            el.classList.remove(...options.classes); // remove to activate also targets\n            self.eventOn(el);\n          }\n        }\n        // if currents < min\n        let todo = options.min - self.getCurrents().length;\n        if (todo) {\n          for (let i = 0; i < todo; i++) {\n            self.eventOn(self.elements[i]);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * init aria\n   */\n  initAria() {\n    if (this.targets) {\n      for (let tr of this.targets) {\n        // aria-label\n        let headers = tr.querySelectorAll('h1, h2, h3, h4, h5, h6');\n        let label = headers.length ? headers : this.getElementsFromTarget(tr);\n        if (label.length) {\n          label = label[0].innerText.replace(/\\s+/g, ' ').trim();\n          tr.setAttribute('aria-label', label);\n        }\n      }\n    }\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    let options = self.options;\n    // events\n    for (let el of this.elements) {\n      if (options.on) {\n        // handler\n        let xtOnHandler = XtUtil.dataStorage.put(el, 'xtOnHandler', self.eventOnHandler.bind(self).bind(self, el));\n        // event\n        let events = [...options.on.split(' ')];\n        for (let event of events) {\n          el.removeEventListener(event, xtOnHandler);\n          el.addEventListener(event, xtOnHandler);\n        }\n        // listener\n        el.addEventListener('on.trigger', xtOnHandler);\n      }\n      if (options.off) {\n        // handler\n        let xtOffHandler = XtUtil.dataStorage.put(el, 'xtOffHandler', self.eventOffHandler.bind(self).bind(self, el));\n        // event\n        let events = [...options.off.split(' ')];\n        for (let event of events) {\n          el.removeEventListener(event, xtOffHandler);\n          el.addEventListener(event, xtOffHandler);\n        }\n        // listener\n        el.addEventListener('off.trigger', xtOffHandler);\n      }\n    }\n    // listener\n    for (let tr of this.targets) {\n      let el = this.getElementsFromTarget(tr)[0];\n      if (el) {\n        // handler\n        let xtOnHandler = XtUtil.dataStorage.put(el, 'xtOnHandler', self.eventOnHandler.bind(self).bind(self, el));\n        let xtOffHandler = XtUtil.dataStorage.put(el, 'xtOffHandler', self.eventOffHandler.bind(self).bind(self, el));\n        // listener\n        tr.addEventListener('on.trigger', xtOnHandler);\n        tr.addEventListener('off.trigger', xtOffHandler);\n      }\n    }\n    // auto\n    if (options.auto) {\n      this.auto();\n      // focus and blur\n      window.addEventListener('focus', function () {\n        self.auto();\n      });\n      window.addEventListener('blur', function () {\n        self.autoStop();\n      });\n    }\n  }\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement} element\n   * @param {Event} e\n   */\n  eventOnHandler(element, e) {\n    let eventLimit = this.container.querySelectorAll('.event-limit');\n    if (eventLimit.length) {\n      if (XtUtil.checkOutside(e, eventLimit)) {\n        this.eventOn(element);\n      }\n    } else {\n      this.eventOn(element);\n    }\n    // auto\n    if (this.options.autoPause) {\n      this.autoPause();\n    } else if (this.options.auto) {\n      this.auto();\n    }\n  }\n\n  /**\n   * element off handler\n   * @param {Node|HTMLElement} element\n   * @param {Event} e\n   */\n  eventOffHandler(element, e) {\n    let eventLimit = this.container.querySelectorAll('.event-limit');\n    if (eventLimit.length) {\n      if (XtUtil.checkOutside(e, eventLimit)) {\n        this.eventOff(element);\n      }\n    } else {\n      this.eventOff(element);\n    }\n  }\n\n  /**\n   * set auto change\n   * @param {Boolean} instant\n   */\n  auto(instant = false) {\n    let self = this;\n    let options = self.options;\n    // auto\n    this.autoStop();\n    let time = !instant ? options.auto : 0;\n    self.autoInterval = setInterval(function () {\n      if (!options.autoAlways && self.object.offsetParent === null) { // if not :visible don't change\n        return false;\n      }\n      self.autoCurrent = self.autoCurrent !== undefined ? self.autoCurrent + 1 : 0;\n      self.autoCurrent = self.autoCurrent >= self.elements.length ? 0 : self.autoCurrent;\n      self.eventOn(self.elements[self.autoCurrent]);\n    }, time);\n  }\n\n  /**\n   * set autoPause change\n   * @param {Boolean} instant\n   */\n  autoPause(instant = false) {\n    let self = this;\n    let options = self.options;\n    // autoPause\n    this.autoStop();\n    let time = !instant ? options.autoPause : 0;\n    if (time !== 'stop') {\n      self.autoPauseTimeout = setTimeout(function () {\n        self.auto(true);\n        self.auto();\n      }, time);\n    }\n  }\n\n  /**\n   * stop auto change\n   */\n  autoStop() {\n    clearInterval(this.autoInterval);\n    clearTimeout(this.autoPauseTimeout);\n  }\n\n  //////////////////////\n  // utils\n  //////////////////////\n\n  /**\n   * choose which elements to activate/deactivate (based on xtend mode and containers)\n   * @param {Node|HTMLElement} element Element that triggered interaction\n   * @returns {Object} object.all and object.single\n   */\n  getElements(element) {\n    if (!this.elements || !this.elements.length) {\n      return {all: [], single: null};\n    }\n    if (this.mode === 'all') {\n      // choose all elements\n      return {all: this.elements, single: this.elements[0]};\n    } else if (this.mode === 'unique') {\n      // choose element by group\n      let group = element.getAttribute('data-group');\n      if (group) {\n        // all group elements if group\n        let groupElements = Array.from(this.elements).filter(x => x.getAttribute('data-group') === group);\n        let final = XtUtil.arrSingle(groupElements);\n        return {all: final, single: final[0]};\n      } else {\n        // element if not group\n        let final = element;\n        return {all: XtUtil.arrSingle(final), single: final};\n      }\n    }\n  }\n\n  /**\n   * choose which targets to activate/deactivate (based on xtend mode and containers)\n   * @param {Node|HTMLElement} element Element that triggered interaction\n   * @returns {Array}\n   */\n  getTargets(element) {\n    if (!this.targets || !this.targets.length) {\n      return [];\n    }\n    if (this.mode === 'all') {\n      // choose all targets\n      return this.targets;\n    } else if (this.mode === 'unique') {\n      // choose only target by group\n      let group = element.getAttribute('data-group');\n      let groupElements = Array.from(this.elements).filter(x => x.getAttribute('data-group') === group);\n      let groupTargets = Array.from(this.targets).filter(x => x.getAttribute('data-group') === group);\n      let final;\n      if (group) {\n        // all group targets if group\n        final = groupTargets;\n        return XtUtil.arrSingle(final);\n      } else {\n        // not group targets by index if not group\n        let index = groupElements.findIndex(x => x === element);\n        final = groupTargets[index];\n        return XtUtil.arrSingle(final);\n      }\n    }\n  }\n\n  /**\n   * choose which elements to activate/deactivate from target (based on xtend mode and containers)\n   * @param {Node|HTMLElement} element Target to trigger interaction on\n   * @returns {Array}\n   */\n  getElementsFromTarget(target) {\n    if (!this.elements || !this.elements.length) {\n      return [];\n    }\n    // choose only target by group\n    let group = target.getAttribute('data-group');\n    let groupElements = Array.from(this.elements).filter(x => x.getAttribute('data-group') === group);\n    let groupTargets = Array.from(this.targets).filter(x => x.getAttribute('data-group') === group);\n    let final;\n    if (group) {\n      // all group targets if group\n      final = groupElements;\n      return XtUtil.arrSingle(final);\n    } else {\n      // not group targets by index if not group\n      let index = groupTargets.findIndex(x => x === target);\n      final = groupElements[index];\n      return XtUtil.arrSingle(final);\n    }\n  }\n\n  /**\n   * additional elements to activate/deactivate\n   * @returns {NodeList|Array}\n   */\n  getAdditional() {\n    if (!this.options.additional) {\n      return [];\n    } else {\n      return this.object.querySelectorAll(this.options.additional);\n    }\n  }\n\n  /**\n   * get currents based on namespace (so shared between Xt objects)\n   * @returns {Array}\n   */\n  getCurrents() {\n    return XtUtil.currents[this.namespace];\n  }\n\n  /**\n   * set currents based on namespace (so shared between Xt objects)\n   * @param {Array} arr\n   */\n  setCurrents(arr) {\n    XtUtil.currents[this.namespace] = arr;\n  }\n\n  /**\n   * add current based on namespace (so shared between Xt objects)\n   * @param {Node|HTMLElement} element To be added\n   */\n  addCurrent(element) {\n    let arr = XtUtil.currents[this.namespace];\n    arr.push(element);\n  }\n\n  /**\n   * remove currents based on namespace (so shared between Xt objects)\n   * @param {Node|HTMLElement} element To be removed\n   */\n  removeCurrent(element) {\n    XtUtil.currents[this.namespace] = XtUtil.currents[this.namespace].filter(x => x !== element);\n  }\n\n  //////////////////////\n  // events\n  //////////////////////\n\n  /**\n   * check element on\n   * @param {Node|HTMLElement} element To be activated\n   * @returns {Boolean} If eventOn changes activation\n   */\n  checkOn(element) {\n    if ((!element.classList.contains(...this.options.classes) || element.classList.contains('off-block')) && !element.classList.contains('on-block')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * check element off\n   * @param {Node|HTMLElement} element To be activated\n   * @returns {Boolean} If eventOff changes activation\n   */\n  checkOff(element) {\n    // if currents < min\n    let todo = this.options.min - this.getCurrents().length;\n    if (!todo) {\n      return false;\n    }\n    if ((element.classList.contains(...this.options.classes) || element.classList.contains('on-block')) && !element.classList.contains('off-block')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * element on\n   * @param {Node|HTMLElement} element To be activated\n   */\n  eventOn(element) {\n    let self = this;\n    let options = self.options;\n    // activate or deactivate\n    if (this.checkOn(element)) {\n      let fElements = this.getElements(element);\n      this.addCurrent(fElements.single);\n      let targets = this.getTargets(element);\n      let additional = this.getAdditional();\n      let activationDelay = {\n        elements: function () {\n          self.activationOn(fElements.all, fElements, 'elements');\n        },\n        targets: function () {\n          self.activationOn(targets, fElements, 'targets');\n        },\n        additional: function () {\n          self.activationOn(additional, fElements, 'additional');\n        },\n      };\n      // set autoCurrent\n      if (options.auto) {\n        let index = 0;\n        for (let [i, el] of self.elements.entries()) {\n          if (el === element) {\n            index = i;\n            break;\n          }\n        }\n        self.autoCurrent = index;\n      }\n      // if currents > max\n      let currents = this.getCurrents();\n      if (currents.length > options.max) {\n        this.eventOff(currents[0], activationDelay);\n      } else {\n        activationDelay.elements();\n        activationDelay.targets();\n        activationDelay.additional();\n      }\n    } else if (options.toggle) {\n      // toggle\n      this.eventOff(element);\n    }\n  }\n\n  /**\n   * element off\n   * @param {Node|HTMLElement} element To be deactivated\n   * @param {Object} activationDelay Object with delayed activations\n   */\n  eventOff(element, activationDelay = null) {\n    // deactivate\n    if (this.checkOff(element)) {\n      let fElements = this.getElements(element);\n      this.removeCurrent(fElements.single);\n      this.activationOff(fElements.all, fElements, 'elements', activationDelay);\n      let targets = this.getTargets(element);\n      this.activationOff(targets, fElements, 'targets', activationDelay);\n      let additional = this.getAdditional();\n      this.activationOff(additional, fElements, 'additional', activationDelay);\n    }\n  }\n\n  /**\n   * element on activation\n   * @param {NodeList|Array} els Elements to be activated\n   * @param {Object} fElements Additional elements\n   * @param {String} type Type of elements\n   */\n  activationOn(els, fElements, type) {\n    let self = this;\n    let options = self.options;\n    // activate\n    let activate = function (self, el, fElements, type) {\n      el.classList.add(...options.classes);\n      el.classList.remove('out');\n      self.activationOnAnimate(el, type);\n      // specials\n      if (type === 'targets') {\n        self.specialClassHtmlOn();\n        self.specialBackdrop(el);\n        self.specialCenterOn(el);\n        self.specialMiddleOn(el);\n        self.specialCollapseOn(el);\n        self.specialCloseOn(el, fElements.single);\n        self.specialScrollbarOn();\n      }\n      // dispatch\n      el.dispatchEvent(new CustomEvent('on'));\n    };\n    // delay\n    for (let el of els) {\n      el.classList.remove('off-block');\n      clearTimeout(el.dataset.xtDelayTimeout);\n      clearTimeout(el.dataset.xtAnimTimeout);\n      let delay = el.dataset.xtOnDelay;\n      if (delay) {\n        el.classList.add('on-block');\n        el.dataset.xtDelayTimeout = setTimeout(function (self, el, fElements, type) {\n          el.classList.remove('on-block');\n          activate(self, el, fElements, type);\n        }, parseFloat(delay), self, el, fElements, type).toString();\n      } else {\n        activate(self, el, fElements, type);\n      }\n    }\n  }\n\n  /**\n   * element off activation\n   * @param {NodeList|Array} els Elements to be deactivated\n   * @param {Object} fElements Additional elements\n   * @param {String} type Type of elements\n   * @param {Object} activationDelay Object with delayed activations\n   */\n  activationOff(els, fElements, type, activationDelay) {\n    let self = this;\n    let options = self.options;\n    // deactivate\n    let deactivate = function (self, el, fElements, type, activationDelay) {\n      el.classList.remove(...options.classes);\n      el.classList.add('out');\n      self.activationOffAnimate(el, type, activationDelay);\n      // activationDelay\n      if (activationDelay && activationDelay[type] && !activationDelay[type + 'done']) {\n        if (options.instant && options.instant[type]) {\n          activationDelay[type]();\n          activationDelay[type + 'done'] = true;\n        }\n      }\n      // specials\n      if (type === 'targets') {\n        self.specialClassHtmlOff();\n        self.specialCollapseOff(el);\n        self.specialCloseOff(el);\n      }\n      // dispatch\n      el.dispatchEvent(new CustomEvent('off'));\n    };\n    // delay\n    for (let el of els) {\n      el.classList.remove('on-block');\n      clearTimeout(el.dataset.xtDelayTimeout);\n      clearTimeout(el.dataset.xtAnimTimeout);\n      let delay = el.dataset.xtOffDelay;\n      if (delay) {\n        el.classList.add('off-block');\n        el.dataset.xtDelayTimeout = setTimeout(function (self, el, fElements, type, activationDelay) {\n          el.classList.remove('off-block');\n          deactivate(self, el, fElements, type, activationDelay);\n        }, parseFloat(delay), self, el, fElements, type, activationDelay).toString();\n      } else {\n        deactivate(self, el, fElements, type, activationDelay);\n      }\n    }\n  }\n\n  /**\n   * element on animation\n   * @param {Node|HTMLElement} el Element to be animated\n   * @param {String} type Type of element\n   */\n  activationOnAnimate(el, type) {\n    // onDone\n    let onDone = function (el, type) {\n      // collapse-width and collapse-height\n      if (el.classList.contains('collapse-height')) {\n        el.style.height = 'auto';\n      }\n      if (el.classList.contains('collapse-width')) {\n        el.style.width = 'auto';\n      }\n    };\n    // delay onDone\n    let timing = this.activationTiming(el);\n    clearTimeout(el.dataset.xtAnimTimeout);\n    if (!timing) {\n      onDone(el, type);\n    } else {\n      el.dataset.xtAnimTimeout = setTimeout(function (el, type) {\n        onDone(el, type);\n      }, timing, el, type).toString();\n    }\n  }\n\n  /**\n   * element off animation\n   * @param {Node|HTMLElement} el Element to be animated\n   * @param {String} type Type of element\n   * @param {Object} activationDelay Object with delayed activations\n   */\n  activationOffAnimate(el, type, activationDelay) {\n    let self = this;\n    let options = self.options;\n    // onDone\n    let onDone = function (el, type) {\n      el.classList.remove('out');\n      // specials\n      if (type === 'targets') {\n        self.specialScrollbarOff();\n      }\n      // activationDelay\n      if (activationDelay && activationDelay[type] && !activationDelay[type + 'done']) {\n        if (!options.instant || !options.instant[type]) {\n          activationDelay[type]();\n          activationDelay[type + 'done'] = true;\n        }\n      }\n    };\n    // delay onDone\n    let timing = this.activationTiming(el);\n    clearTimeout(el.dataset.xtAnimTimeout);\n    if (!timing) {\n      onDone(el, type);\n    } else {\n      el.dataset.xtAnimTimeout = setTimeout(function (el, type) {\n        onDone(el, type);\n      }, timing, el, type).toString();\n    }\n  }\n\n  /**\n   * get transition or animation timing\n   * @param {Node|HTMLElement} el To be animated\n   * @returns {Number} Time in milliseconds\n   */\n  activationTiming(el) {\n    let self = this;\n    let options = self.options;\n    // timing\n    let timing = options.timing;\n    if (timing !== undefined) {\n      return timing;\n    } else {\n      let style = getComputedStyle(el);\n      let transition = parseFloat(style.transitionDuration) + parseFloat(style.transitionDelay);\n      let animation = parseFloat(style.animationDuration) + parseFloat(style.animationDelay);\n      if (transition || animation) {\n        timing = Math.max(transition, animation);\n      }\n      return timing * 1000;\n    }\n  }\n\n  //////////////////////\n  // activation specials\n  //////////////////////\n\n  /**\n   * add html class\n   */\n  specialClassHtmlOn() {\n    let self = this;\n    let options = self.options;\n    //\n    if (options.classHtml) {\n      let container = document.documentElement;\n      container.classList.add(...options.classHtml.split(' '));\n    }\n  }\n\n  /**\n   * remove html class\n   */\n  specialClassHtmlOff() {\n    let self = this;\n    let options = self.options;\n    //\n    if (options.classHtml) {\n      let container = document.documentElement;\n      container.classList.remove(...options.classHtml.split(' '));\n    }\n  }\n\n  /**\n   * backdrop append to element\n   * @param {Node|HTMLElement} el Element\n   */\n  specialBackdrop(el) {\n    let self = this;\n    let options = self.options;\n    //\n    if (options.backdrop) {\n      let elements;\n      if (options.backdrop === 'object') {\n        elements = XtUtil.arrSingle(this.object);\n      } else if (options.backdrop === 'targets') {\n        elements = XtUtil.arrSingle(el);\n      } else {\n        elements = el.querySelectorAll(options.backdrop);\n        if (!elements.length) {\n          elements = this.object.querySelectorAll(options.backdrop);\n        }\n      }\n      for (let element of elements) {\n        let backdrop = element.querySelectorAll('.xt-backdrop');\n        if (!backdrop.length) {\n          backdrop = XtUtil.createElement('<div class=\"xt-backdrop\"></div>');\n          element.append(backdrop);\n        }\n      }\n    }\n  }\n\n  /**\n   * center position on activation\n   * @param {Node|HTMLElement} el Element\n   */\n  specialCenterOn(el) {\n    if (el.classList.contains('drop-center')) {\n      let add = this.object.clientWidth;\n      let remove = el.clientWidth;\n      el.style.left = ((add - remove) / 2) + 'px';\n    }\n  }\n\n  /**\n   * middle position on activation\n   * @param {Node|HTMLElement} el Element\n   */\n  specialMiddleOn(el) {\n    if (el.classList.contains('drop-middle')) {\n      let add = this.object.clientHeight;\n      let remove = el.clientHeight;\n      el.style.top = ((add - remove) / 2) + 'px';\n    }\n  }\n\n  /**\n   * open collapse on activation\n   * @param {Node|HTMLElement} el Element\n   */\n  specialCollapseOn(el) {\n    if (el.classList.contains('collapse-height')) {\n      el.classList.add('no-transition');\n      el.style.height = 'auto';\n      el.style.paddingTop = '';\n      el.style.paddingBottom = '';\n      let h = el.clientHeight + 'px';\n      let pt = el.style.paddingTop;\n      let pb = el.style.paddingBottom;\n      XtUtil.requestAnimationFrame.call(window, function () {\n        el.style.height = '0';\n        el.style.paddingTop = '0';\n        el.style.paddingBottom = '0';\n        XtUtil.requestAnimationFrame.call(window, function () {\n          el.classList.remove('no-transition');\n          el.style.height = h;\n          el.style.paddingTop = pt;\n          el.style.paddingBottom = pb;\n        });\n      });\n    }\n    if (el.classList.contains('collapse-width')) {\n      el.style.width = 'auto';\n      el.style.paddingLeft = '';\n      el.style.paddingRight = '';\n      let w = el.clientHeight + 'px';\n      let pl = el.style.paddingLeft;\n      let pr = el.style.paddingRight;\n      XtUtil.requestAnimationFrame.call(window, function () {\n        el.style.width = '0';\n        el.style.paddingLeft = '0';\n        el.style.paddingRight = '0';\n        XtUtil.requestAnimationFrame.call(window, function () {\n          el.classList.remove('no-transition');\n          el.style.width = w;\n          el.style.paddingLeft = pl;\n          el.style.paddingRight = pr;\n        });\n      });\n    }\n  }\n\n  /**\n   * close collapse on deactivation\n   * @param {Node|HTMLElement} el Element\n   */\n  specialCollapseOff(el) {\n    if (el.classList.contains('collapse-height')) {\n      let h = el.clientHeight + 'px';\n      let pt = el.style.paddingTop;\n      let pb = el.style.paddingBottom;\n      XtUtil.requestAnimationFrame.call(window, function () {\n        el.style.height = h;\n        el.style.paddingTop = pt;\n        el.style.paddingBottom = pb;\n        XtUtil.requestAnimationFrame.call(window, function () {\n          el.style.height = '0';\n          el.style.paddingTop = '0';\n          el.style.paddingBottom = '0';\n        });\n      });\n    }\n    if (el.classList.contains('collapse-width')) {\n      let w = el.clientWidth + 'px';\n      let pl = el.style.paddingLeft;\n      let pr = el.style.paddingRight;\n      XtUtil.requestAnimationFrame.call(window, function () {\n        el.style.width = w;\n        el.style.paddingLeft = pl;\n        el.style.paddingRight = pr;\n        XtUtil.requestAnimationFrame.call(window, function () {\n          el.style.width = '0';\n          el.style.paddingLeft = '0';\n          el.style.paddingRight = '0';\n        });\n      });\n    }\n  }\n\n  /**\n   * add close events on element\n   * @param {Node|HTMLElement} el Element\n   * @param {Node|HTMLElement} single Element to toggle\n   */\n  specialCloseOn(el, single) {\n    let self = this;\n    let options = self.options;\n    // closeInside\n    if (options.closeInside) {\n      let closeElements = el.querySelectorAll(options.closeInside);\n      XtUtil.requestAnimationFrame.call(window, function () {\n        for (let closeElement of closeElements) {\n          // handler\n          let specialCloseOnHandler = XtUtil.dataStorage.put(el, 'specialCloseOnHandler', self.specialCloseOnHandler.bind(self).bind(self, closeElement, single));\n          // event\n          closeElement.removeEventListener('click', specialCloseOnHandler);\n          closeElement.addEventListener('click', specialCloseOnHandler);\n        }\n      });\n    }\n    // closeOutside\n    if (options.closeOutside) {\n      let closeElements = document.documentElement.querySelectorAll(options.closeOutside);\n      XtUtil.requestAnimationFrame.call(window, function () {\n        for (let closeElement of closeElements) {\n          // handler\n          let specialCloseOffHandler = XtUtil.dataStorage.put(el, 'specialCloseOffHandler', self.specialCloseOffHandler.bind(self).bind(self, el, single));\n          // event\n          closeElement.removeEventListener('click', specialCloseOffHandler);\n          closeElement.addEventListener('click', specialCloseOffHandler);\n        }\n      });\n    }\n  }\n\n  /**\n   * remove close events on element\n   * @param {Node|HTMLElement} el Element\n   */\n  specialCloseOff(el) {\n    let self = this;\n    let options = self.options;\n    // closeInside\n    if (options.closeInside) {\n      let closeElements = el.querySelectorAll(options.closeInside);\n      for (let closeElement of closeElements) {\n        // handler\n        let specialCloseOnHandler = XtUtil.dataStorage.get(el, 'specialCloseOnHandler');\n        closeElement.removeEventListener('click', specialCloseOnHandler);\n      }\n    }\n    // closeOutside\n    if (options.closeOutside) {\n      let closeElements = document.documentElement.querySelectorAll(options.closeOutside);\n      for (let closeElement of closeElements) {\n        let specialCloseOffHandler = XtUtil.dataStorage.get(el, 'specialCloseOffHandler');\n        closeElement.removeEventListener('click', specialCloseOffHandler);\n      }\n    }\n  }\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement} checkEl\n   * @param {Node|HTMLElement} single\n   * @param {Event} e\n   */\n  specialCloseOnHandler(checkEl, single, e) {\n    if (XtUtil.checkInside(e, XtUtil.arrSingle(checkEl))) {\n      this.eventOff(single);\n    }\n  }\n\n  /**\n   * element off handler\n   * @param {Node|HTMLElement} checkEl\n   * @param {Node|HTMLElement} single\n   * @param {Event} e\n   */\n  specialCloseOffHandler(checkEl, single, e) {\n    if (XtUtil.checkOutside(e, XtUtil.arrSingle(checkEl))) {\n      this.eventOff(single);\n    }\n  }\n\n  /**\n   * scrollbar activation\n   */\n  specialScrollbarOn() {\n    let self = this;\n    let options = self.options;\n    //\n    if (options.scrollbar) {\n      let elements;\n      let width = XtUtil.scrollbarWidth();\n      // check fixed\n      elements = document.documentElement.querySelectorAll('.xt-check-fixed > *');\n      for (let element of elements) {\n        let style = getComputedStyle(element);\n        if (style.position === 'fixed') {\n          element.classList.add('xt-fixed');\n        } else {\n          element.classList.remove('xt-fixed');\n        }\n      }\n      // fixed\n      elements = document.documentElement.querySelectorAll('.xt-fixed');\n      for (let element of elements) {\n        element.style.paddingRight = '';\n        if (self.normalizeWidth(element.clientWidth) === '') {\n          let style = getComputedStyle(element);\n          let padding = style.paddingRight;\n          let str = 'calc(' + padding + ' + ' + width + 'px)';\n          element.classList.add('no-transition');\n          XtUtil.requestAnimationFrame.call(window, function () {\n            element.style.paddingRight = str;\n            XtUtil.requestAnimationFrame.call(window, function () {\n              element.classList.remove('no-transition');\n            });\n          });\n        }\n      }\n      // backdrop\n      elements = document.documentElement.querySelectorAll('.xt-backdrop');\n      for (let element of elements) {\n        element.style.right = width + 'px';\n      }\n      // scroll\n      let container = document.documentElement;\n      container.style.paddingRight = width + 'px';\n      container.classList.add('xt-scrollbar');\n    }\n  }\n\n  /**\n   * scrollbar deactivation\n   */\n  specialScrollbarOff() {\n    let self = this;\n    let options = self.options;\n    //\n    if (options.scrollbar) {\n      let elements;\n      // scroll\n      let container = document.documentElement;\n      container.style.paddingRight = '';\n      container.classList.remove('xt-scrollbar');\n      // fixed\n      elements = document.documentElement.querySelectorAll('.xt-fixed');\n      for (let element of elements) {\n        element.classList.add('no-transition');\n        XtUtil.requestAnimationFrame.call(window, function () {\n          element.style.paddingRight = '';\n          XtUtil.requestAnimationFrame.call(window, function () {\n            element.classList.remove('no-transition');\n          });\n        });\n      }\n      // backdrop\n      elements = document.documentElement.querySelectorAll('.xt-backdrop');\n      for (let element of elements) {\n        element.style.right = '';\n      }\n    }\n  }\n\n  /**\n   * if full width return '' else return value in px\n   * @param {Number|String} width\n   * @returns {String} Value in px\n   */\n  normalizeWidth(width) {\n    width = parseFloat(width);\n    if (width + XtUtil.scrollbarWidth() >= window.innerWidth) {\n      width = '';\n    } else {\n      width += 'px';\n    }\n    return width;\n  }\n\n}\n\n// default\n\nXt.defaults = {\n  \"auto\": false,\n  \"autoPause\": false,\n  \"autoAlways\": false\n};\n\n// export\n\nwindow.Xt = Xt;\nexport {Xt};\n\n//////////////////////\n// XtToggle\n//////////////////////\n\nclass XtToggle extends Xt {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement} object Base node\n   * @param {Object} jsOptions User options\n   * @constructor\n   */\n  constructor(object, jsOptions = {}) {\n    super(object, jsOptions, 'data-xt-toggle');\n  }\n\n}\n\n// default\n\nXtToggle.defaults = {\n  \"elements\": \":scope > a, :scope > button\",\n  \"targets\": \":scope > [class^=\\\"toggle-\\\"], :scope > [class*=\\\" toggle-\\\"]\",\n  \"class\": \"active\",\n  \"instant\": {\"elements\": true},\n  \"on\": \"click\",\n  \"toggle\": true,\n  \"min\": 0,\n  \"max\": 1\n};\n\n// export\n\nwindow.XtToggle = XtToggle;\nexport {XtToggle};\n\n//////////////////////\n// XtDrop\n//////////////////////\n\nclass XtDrop extends Xt {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement} object Base node\n   * @param {Object} jsOptions User options\n   * @constructor\n   */\n  constructor(object, jsOptions = {}) {\n    super(object, jsOptions, 'data-xt-drop');\n  }\n\n  /**\n   * init aria\n   */\n  initAria() {\n    if (this.targets) {\n      for (let tr of this.targets) {\n        // aria-label\n        if (this.options.additional) {\n          let label = this.getAdditional();\n          if (label.length) {\n            label = label[0].innerText.replace(/\\s+/g, ' ').trim();\n            tr.setAttribute('aria-label', label);\n          }\n        }\n      }\n    }\n  }\n\n}\n\n// default\n\nXtDrop.defaults = {\n  \"elements\": \":scope\",\n  \"targets\": \":scope > .drop\",\n  \"additional\": \":scope > a, :scope > button\",\n  \"class\": \"active\",\n  \"instant\": {\"elements\": true},\n  \"on\": \"click\",\n  \"toggle\": true,\n  \"min\": 0,\n  \"max\": 1,\n  \"closeOutside\": \"body\"\n};\n\n// export\n\nwindow.XtDrop = XtDrop;\nexport {XtDrop};\n\n//////////////////////\n// XtOverlay\n//////////////////////\n\nclass XtOverlay extends Xt {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement} object Base node\n   * @param {Object} jsOptions User options\n   * @constructor\n   */\n  constructor(object, jsOptions = {}) {\n    super(object, jsOptions, 'data-xt-overlay');\n  }\n\n  /**\n   * init aria\n   */\n  initAria() {\n    super.initAria();\n    if (this.targets) {\n      for (let tr of this.targets) {\n        // role\n        tr.setAttribute('role', 'dialog');\n        tr.setAttribute('aria-modal', 'true');\n      }\n    }\n  }\n\n}\n\n// default\n\nXtOverlay.defaults = {\n  \"elements\": \":scope > a, :scope > button\",\n  \"targets\": \":scope > .overlay-outer\",\n  \"class\": \"active\",\n  \"instant\": {\"elements\": true},\n  \"on\": \"click\",\n  \"toggle\": true,\n  \"min\": 0,\n  \"max\": 1,\n  \"appendTo\": \"body\",\n  \"backdrop\": \"targets\",\n  \"classHtml\": \"xt-overlay\",\n  \"closeInside\": \".overlay-dismiss, :scope > .xt-backdrop, :scope .overlay-inner > .btn-close\",\n  \"scrollbar\": true\n};\n\n// export\n\nwindow.XtOverlay = XtOverlay;\nexport {XtOverlay};\n\n//////////////////////\n// XtSticky\n//////////////////////\n\nclass XtSticky extends Xt {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement} object Base node\n   * @param {Object} jsOptions User options\n   * @constructor\n   */\n  constructor(object, jsOptions = {}) {\n    super(object, jsOptions, 'data-xt-sticky');\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init elements, targets and currents\n   */\n  initScope() {\n    super.initScope();\n    // mode\n    this.mode = 'all';\n    // container\n    this.container = XtUtil.parents(this.object, '.xt-container');\n    if (!this.container.length) {\n      this.container = XtUtil.createElement('<div class=\"xt-container xt-check-fixed\"></div>');\n      this.object.before(this.container);\n      this.container.append(this.object);\n      this.container = XtUtil.parents(this.object, '.xt-container');\n    }\n    // targets\n    this.targets = this.container[0].querySelectorAll('.xt-clone');\n    if (!this.targets.length) {\n      this.targets = this.object.cloneNode(true);\n      this.targets.classList.add('xt-clone');\n      this.targets.setAttribute('aria-hidden', 'true');\n      for (let elId of this.targets.querySelectorAll('[id]')) {\n        elId.setAttribute('id', elId.getAttribute('id') + '-clone');\n      }\n      for (let elName of this.targets.querySelectorAll('[name]')) {\n        elName.setAttribute('name', elName.getAttribute('name') + '-clone');\n      }\n      this.container[0].append(this.targets);\n    }\n    this.targets = XtUtil.arrSingle(this.targets);\n    // xt-fixed\n    this.object.classList.add('xt-fixed');\n    // hide\n    if (this.options.hide === 'down') {\n      this.object.classList.add('sticky-hide-down');\n    } else {\n      this.object.classList.remove('sticky-hide-down');\n    }\n    if (this.options.hide === 'up') {\n      this.object.classList.add('sticky-hide-up');\n    } else {\n      this.object.classList.remove('sticky-hide-up');\n    }\n    // z-index\n    this.unique = XtUtil.getUniqueNum();\n    this.object.style.zIndex = '' + (100 - this.unique);\n  }\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    let options = self.options;\n    // events\n    if (options.on) {\n      // handler\n      let stickyHandler = XtUtil.dataStorage.put(window, 'stickyHandler', self.eventOnHandler.bind(self));\n      // event\n      let events = [...options.on.split(' ')];\n      for (let event of events) {\n        window.removeEventListener(event, stickyHandler);\n        window.addEventListener(event, stickyHandler);\n      }\n      window.addEventListener('on.sticky', stickyHandler);\n    }\n    // trigger initial\n    window.dispatchEvent(new CustomEvent('on.sticky'));\n  }\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement} element\n   * @param {Event} e\n   */\n  eventOnHandler(element, e) {\n    this.eventScroll(this.object);\n  }\n\n  //////////////////////\n  // events\n  //////////////////////\n\n  /**\n   * window scroll\n   * @param {Node|HTMLElement} element To be activated or deactivated\n   */\n  eventScroll(element) {\n    let self = this;\n    let options = self.options;\n    // vars\n    let anim = true;\n    let hide = false;\n    let scrollInverse = false;\n    let add = 0;\n    let addHide = 0;\n    let windowHeight = window.innerHeight;\n    let el = self.object;\n    let rectElTop = el.getBoundingClientRect().top;\n    let heightEl = parseFloat(getComputedStyle(el).height);\n    let heightTarget = parseFloat(getComputedStyle(self.targets[0]).height);\n    let rectContainerTop = self.container[0].getBoundingClientRect().top;\n    let scrollingElement = document.scrollingElement;\n    let scrollHeight = scrollingElement.scrollHeight;\n    let scrollTop = scrollingElement.scrollTop;\n    let scrollTopOld = self.scrollTopOld;\n    // direction\n    if (scrollTop < scrollTopOld) {\n      el.classList.remove('sticky-down');\n      el.classList.add('sticky-up');\n      scrollInverse = true;\n    } else {\n      el.classList.add('sticky-down');\n      el.classList.remove('sticky-up');\n    }\n    // hide\n    if (options.hide === 'down') {\n      if (!scrollInverse) {\n        addHide = heightTarget;\n      }\n    }\n    if (options.hide === 'up') {\n      if (scrollInverse) {\n        addHide = heightTarget;\n      }\n    }\n    // scroll\n    let top = self.eventScrollPos(options.limit['top'] || self.targets, scrollTop, rectContainerTop);\n    let bottom = self.eventScrollPos(options.limit['bottom'], scrollTop, Infinity);\n    if (options.position === 'top') {\n      bottom -= heightTarget;\n    }\n    if (options.position === 'bottom') {\n      top -= windowHeight - heightTarget;\n      bottom = Math.abs(scrollHeight - windowHeight - bottom);\n    }\n    // contain and add\n    let addTop = 0;\n    let addBottom = 0;\n    if (options.contain) {\n      if (options.contain['top']) {\n        let addTopObj = self.eventScrollHeight(options.contain['top'], scrollInverse);\n        addTop = addTopObj.val;\n        if (addTop !== null && addTop > rectContainerTop) {\n          add = addTop;\n          if (!addTopObj.foundHide) {\n            anim = false;\n          }\n        } else {\n          addTop = null;\n        }\n      }\n      if (options.contain['bottom']) {\n        addBottom = self.eventScrollPos(options.contain['bottom']);\n        if (addBottom !== null && addBottom < heightEl + addTop) {\n          add = addBottom - heightEl;\n          anim = false;\n        } else {\n          addBottom = null;\n        }\n      }\n    }\n    // save real add for calculation\n    el.dataset.xtAddSticky = add.toString();\n    // activation\n    let checkTop = scrollTop >= top - add + addHide;\n    let checkBottom = scrollTop < bottom + add - addHide;\n    if (checkTop && checkBottom) {\n      // inside\n      self.eventOn(element);\n      // hide\n      if (addHide) {\n        hide = true;\n      }\n    } else {\n      // outside\n      self.eventOff(element);\n    }\n    // after active\n    if (el.classList.contains('active')) {\n      // hide\n      if (hide) {\n        add = -heightEl;\n        if (!el.classList.contains('sticky-hide')) {\n          el.classList.add('sticky-hide');\n          el.dispatchEvent(new CustomEvent('sticky.hide'));\n        }\n      } else {\n        if (el.classList.contains('sticky-hide')) {\n          el.classList.remove('sticky-hide');\n          el.dispatchEvent(new CustomEvent('sticky.show'));\n        }\n      }\n    } else {\n      // reset\n      add = 0;\n      anim = false;\n    }\n    // anim\n    if (anim && scrollTopOld !== undefined) {\n      if (!el.classList.contains('sticky-anim')) {\n        el.classList.add('sticky-anim');\n      }\n    } else {\n      if (el.classList.contains('sticky-anim')) {\n        el.classList.remove('sticky-anim');\n      }\n    }\n    // top and bottom\n    if (!checkTop) {\n      if (!el.classList.contains('sticky-top')) {\n        el.classList.add('sticky-top');\n      }\n    } else {\n      if (el.classList.contains('sticky-top')) {\n        el.classList.remove('sticky-top');\n      }\n    }\n    if (!checkBottom) {\n      if (!el.classList.contains('sticky-bottom')) {\n        el.classList.add('sticky-bottom');\n      }\n    } else {\n      if (el.classList.contains('sticky-bottom')) {\n        el.classList.remove('sticky-bottom');\n      }\n    }\n    // set add\n    if (add !== self.addOld) {\n      el.classList.add('no-transition');\n      if (self.addOld !== undefined) {\n        el.style[options.position] = rectElTop + 'px';\n      }\n      XtUtil.cancelAnimationFrame.call(window, self.eventFrame);\n      self.eventFrame = XtUtil.requestAnimationFrame.call(window, function () {\n        el.classList.remove('no-transition');\n        el.style[options.position] = add + 'px';\n      });\n    }\n    // fix position fixed width 100% of parent\n    let width = self.normalizeWidth(self.container[0].clientWidth);\n    if (el.style.width !== width) {\n      el.style.width = width;\n    }\n    // save for direction\n    self.addOld = add;\n    self.scrollTopOld = scrollTop;\n  }\n\n  /**\n   * get position of option\n   * @param {String|Number|Element} option\n   * @param {Number} val Default value\n   * @param {Number} scrollTop Window's scrollTop\n   * @returns {Number} value Option's position (px)\n   */\n  eventScrollPos(option, scrollTop = 0, val = null) {\n    if (!isNaN(parseFloat(option))) {\n      val = option;\n    } else {\n      let elements = Array.isArray(option) ? option : document.documentElement.querySelectorAll(option);\n      if (elements.length) {\n        let found = false;\n        val = 0;\n        for (let el of elements) {\n          let addSticky = parseFloat(el.dataset.xtAddSticky);\n          if (addSticky) { // if sticky-hide get real add\n            let style = getComputedStyle(el);\n            if (style.display !== 'none') {\n              val += addSticky;\n              found = true;\n            }\n          } else {\n            let rect = el.getBoundingClientRect();\n            val += rect.top;\n            found = true;\n          }\n        }\n        if (found) {\n          val += scrollTop;\n        } else {\n          val = null;\n        }\n      }\n    }\n    return val;\n  }\n\n  /**\n   * get height of option\n   * @param {String|Number|Element} option\n   * @param {Boolean} scrollInverse\n   * @param {Number} val Default value\n   * @returns {Object} obj Option's height (px) and if found hide element\n   */\n  eventScrollHeight(option, scrollInverse, val = null) {\n    let foundHide = false;\n    if (!isNaN(parseFloat(option))) {\n      val = option;\n    } else {\n      let elements = Array.isArray(option) ? option : document.documentElement.querySelectorAll(option);\n      if (elements.length) {\n        for (let el of elements) {\n          if (el.classList.contains('sticky-hide-down') && el.classList.contains('active')) {\n            if (scrollInverse) {\n              val += el.clientHeight;\n              foundHide = true;\n            }\n          } else if (el.classList.contains('sticky-hide-up') && el.classList.contains('active')) {\n            if (!scrollInverse) {\n              val += el.clientHeight;\n              foundHide = true;\n            }\n          } else {\n            val += el.clientHeight;\n          }\n        }\n      }\n    }\n    return {val: val, foundHide: foundHide};\n  }\n\n}\n\n// default\n\nXtSticky.defaults = {\n  \"class\": \"active\",\n  \"on\": \"scroll resize\",\n  \"min\": 0,\n  \"max\": Infinity,\n  \"position\": \"top\",\n  \"limit\": {\"bottom\": Infinity},\n  \"contain\": false,\n  \"hide\": false\n};\n\n// export\n\nwindow.XtSticky = XtSticky;\nexport {XtSticky};\n\n//////////////////////\n// XtFade\n//////////////////////\n\nclass XtFade extends Xt {\n\n  /**\n   * constructor\n   * @param {Node|HTMLElement} object Base node\n   * @param {Object} jsOptions User options\n   * @constructor\n   */\n  constructor(object, jsOptions = {}) {\n    super(object, jsOptions, 'data-xt-fade');\n  }\n\n  //////////////////////\n  // init\n  //////////////////////\n\n  /**\n   * init events\n   */\n  initEvents() {\n    let self = this;\n    let options = self.options;\n    // events\n    if (options.on) {\n      // handler\n      let fadeHandler = XtUtil.dataStorage.put(window, 'fadeHandler', self.eventOnHandler.bind(self));\n      // event\n      let events = [...options.on.split(' ')];\n      for (let event of events) {\n        window.removeEventListener(event, fadeHandler);\n        window.addEventListener(event, fadeHandler);\n      }\n      window.addEventListener('on.fade', fadeHandler);\n    }\n    // trigger initial\n    window.dispatchEvent(new CustomEvent('on.fade'));\n  }\n\n  /**\n   * element on handler\n   * @param {Node|HTMLElement} element\n   * @param {Event} e\n   */\n  eventOnHandler(element, e) {\n    this.eventScroll(this.object);\n  }\n\n  //////////////////////\n  // events\n  //////////////////////\n\n  /**\n   * window scroll\n   */\n  eventScroll() {\n    let self = this;\n    let options = self.options;\n    // vars\n    let current = 0;\n    let currents = [];\n    let scrollInverse = false;\n    let windowHeight = window.innerHeight;\n    let scrollingElement = document.scrollingElement;\n    let scrollTop = scrollingElement.scrollTop;\n    let scrollTopOld = self.scrollTopOld;\n    // direction\n    if (scrollTop < scrollTopOld) {\n      scrollInverse = true;\n    }\n    // core\n    for (let el of self.elements) {\n      if (el.offsetParent && !el.classList.contains('fade-block')) {\n        // vars\n        let rectElTop = el.offsetParent.getBoundingClientRect().top + el.offsetTop; // we use parents to not include transforms animations\n        let heightEl = parseFloat(getComputedStyle(el).height);\n        // scroll\n        let changed = false;\n        let top = rectElTop + scrollTop;\n        let bottom = top + heightEl;\n        let dist = windowHeight * options.distance;\n        // activation\n        let checkTop = scrollTop + windowHeight >= top + dist;\n        let checkBottom = scrollTop < bottom - dist;\n        if (checkTop && checkBottom) {\n          // inside\n          changed = self.checkOn(el);\n          if (changed) {\n            currents.push(el);\n            XtUtil.cancelAnimationFrame.call(window, el.dataset.eventFrame);\n            el.dataset.eventFrame = XtUtil.requestAnimationFrame.call(window, function () {\n              if (options.delayOn) {\n                let func = new Function('current', 'total', options.delayOn);\n                el.dataset.xtOnDelay = func(current, currents.length).toString();\n                current++;\n              }\n              self.eventOn(el);\n            });\n          }\n        } else {\n          // outside\n          changed = self.checkOff(el);\n          el.classList.add('fade-visible');\n          if (changed) {\n            el.classList.add('fade-scroll');\n            currents.push(el);\n            XtUtil.cancelAnimationFrame.call(window, el.dataset.eventFrame);\n            el.dataset.eventFrame = XtUtil.requestAnimationFrame.call(window, function () {\n              if (options.delayOff) {\n                let func = new Function('current', 'total', options.delayOff);\n                el.dataset.xtOffDelay = func(current, currents.length).toString();\n                current++;\n              }\n              changed = self.eventOff(el);\n            });\n          }\n        }\n        // direction\n        if (changed) {\n          if (scrollInverse) {\n            el.classList.remove('fade-down');\n            el.classList.add('fade-up');\n          } else {\n            el.classList.add('fade-down');\n            el.classList.remove('fade-up');\n          }\n        }\n      }\n    }\n    // save for direction\n    self.scrollTopOld = scrollTop;\n  }\n\n}\n\n// default\n\nXtFade.defaults = {\n  \"elements\": \".fade\",\n  \"class\": \"in\",\n  \"on\": \"scroll resize\",\n  \"min\": 0,\n  \"max\": Infinity,\n  \"distance\": 0.2,\n  \"delayOn\": false,\n  \"delayOff\": false\n};\n\n// export\n\nwindow.XtFade = XtFade;\nexport {XtFade};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}