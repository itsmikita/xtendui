/**
 * util
 */

// various

.reset-text() {
  font-family: inherit;
  font-style: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  text-transform: inherit;
  font-size: inherit;
  color: inherit;
  line-height: inherit;
}

.pointer-events--none() {
  pointer-events: none;
}

.links--none() {
  a&, a {
    pointer-events: none;
  }
}

.text-capitalize() {
  display: inline-block;
  text-transform: lowercase;
  &:first-letter {
    text-transform: uppercase;
  }
}

.overflow-style(@mode: none) {
  -webkit-overflow-scrolling: touch;
}

.design-setup() {
  content: '';
  overflow: hidden;
  position: absolute;
  z-index: -1;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.clearfix() {
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

.user-select--none() {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.user-select--text() {
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
}

.accelerate() {
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -webkit-perspective: 1000;
  perspective: 1000;
  transform: translateZ(0);
}

.sr-only() {
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  border: 0;
  clip: rect(0, 0, 0, 0);
}

// toggle

.toggle--block() {
  display: none;
  &.active, &.out {
    display: block;
  }
}

.toggle--flex() {
  display: none;
  &.active, &.out {
    display: flex;
  }
}

.toggle--inline-flex() {
  display: none;
  &.active, &.out {
    display: inline-flex;
  }
}

.toggle--inline() {
  display: none;
  &.active, &.out {
    display: inline;
  }
}

.toggle--inline-block() {
  display: none;
  &.active, &.out {
    display: inline-block;
  }
}

.toggle--none() {
  &.active, &.out {
    display: none;
  }
}

.toggle--visible() {
  visibility: hidden;
  opacity: 0;
  &.active, &.out {
    visibility: visible;
    opacity: 1;
  }
}

.toggle--hidden() {
  &.active, &.out {
    visibility: hidden;
    opacity: 0;
  }
}

// animation

.transition-none() {
  transition: initial;
  transition-delay: initial;
}

.animation-none() {
  animation: initial;
  animation-delay: initial;
}

.trans-anim-none() {
  .transition-none();
  .animation-none();
}

.transform-none() {
  transform: initial;
}

.duration-none() {
  transition-duration: initial;
  transition-delay: initial;
  animation-duration: initial;
  animation-delay: initial;
}

// responsive

.responsive(@breakpoint: none) when (@breakpoint = none) {
  max-width: 100%;
  flex-shrink: 0; // fix ie11 images inside flex
  /*
  // fix ie11 bug responsive
  min-height: 2px;
  // fix chrome bug responsive
  .align-self(center);
  */
}

.responsive(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    max-width: 100%;
    flex-shrink: 0; // fix ie11 images inside flex
  }
}

.responsive-y(@breakpoint: none) when (@breakpoint = none) {
  max-height: 100%;
  flex-shrink: 0; // fix ie11 images inside flex
}

.responsive-y(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    max-height: 100%;
    flex-shrink: 0; // fix ie11 images inside flex
  }
}

// full

.full(@breakpoint: none) when (@breakpoint = none) {
  max-width: none;
  width: 100%;
}

.full(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    max-width: none;
    width: 100%;
  }
}

.full-y(@breakpoint: none) when (@breakpoint = none) {
  max-height: none;
  height: 100%;
}

.full-y(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    max-height: none;
    height: 100%;
  }
}

// block

.block(@breakpoint: none) when (@breakpoint = none) {
  display: inline-block;
  vertical-align: top; // fix inline-block spacing
  width: 100%;
}

.block(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    display: inline-block;
    vertical-align: top; // fix inline-block spacing
    width: 100%;
  }
}

// btn--flex

.btn--flex {
  > span {
    display: flex;
    flex-direction: row;
    align-items: baseline;
    min-width: 100%;
    justify-content: space-between;
  }
}

// btn alignment

.btn--left(@breakpoint: none) when (@breakpoint = none) {
  > span {
    justify-content: flex-start;
    text-align: left;
  }
}

.btn--left(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    > span {
      justify-content: flex-start;
      text-align: left;
    }
  }
}

.btn--center(@breakpoint: none) when (@breakpoint = none) {
  > span {
    justify-content: center;
    text-align: center;
  }
}

.btn--center(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    > span {
      justify-content: center;
      text-align: center;
    }
  }
}

.btn--right(@breakpoint: none) when (@breakpoint = none) {
  > span {
    justify-content: flex-end;
    text-align: right;
  }
}

.btn--right(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    > span {
      justify-content: flex-end;
      text-align: right;
    }
  }
}

// text-transform

.text-transform(@val, @breakpoint: none) when (@breakpoint = none) {
  text-transform: @val;
}

.text-transform(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    text-transform: @val;
  }
}

// text-align

.text-align(@val, @breakpoint: none) when (@breakpoint = none) {
  text-align: @val;
}

.text-align(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    text-align: @val;
  }
}

// float

.float(@val, @breakpoint: none) when (@breakpoint = none) {
  float: @val;
}

.float(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    float: @val;
  }
}

// display

.display(@val, @breakpoint: none) when (@breakpoint = none) {
  display: @val;
}

.display(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    display: @val;
  }
}

// visibility

.visibility(@val, @breakpoint: none) when (@breakpoint = none) {
  visibility: @val;
}

.visibility(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    visibility: @val;
  }
}

// order

.order(@i, @breakpoint: none) when (@breakpoint = none) {
  @val: extract(@orders, @i + 1);
  order: @val;
}

.order(@i, @breakpoint: none) when (default()) {
  @val: extract(@orders, @i + 1);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    order: @val;
  }
}

// overlay size

.overlay--size(@name) {
  // .by-key(@overlays, @name);
  @arr: ~"overlay--@{name}";
  @val: @@arr;
  .overlay_inner {
    max-width: @val;
  }
}

.generate-overlay--size();
.generate-overlay--size(@i: length(@overlays)) when (@i > 0) {
  .generate-overlay--size(@i - 1);
  @name: extract(@overlays, @i);
  .overlay--@{name} {
    .overlay--size(@name) !important;
  }
}

.generate-overlay-space-responsive();
.generate-overlay-space-responsive(@i: length(@container--space)) when (@i > 0) {
  .generate-overlay-space-responsive(@i - 1);
  @overlay: extract(@container--space, @i);
  @breakpoint: extract(@overlay, 1);
  @val: extract(@overlay, 2);
  & when (@breakpoint = none) {
    .overlay {
      padding: @val;
    }
  }
  & when not (@breakpoint = none) {
    @query-min: 'min-@{breakpoint}';
    @media @@query-min {
      .overlay {
        padding: @val;
      }
    }
  }
}

/**
 * generation
 */

& when not (@classes--util = false) {

  // generate-utils

  .generate-utils();
  .generate-utils(@breakpoint: none) {
    & when (@breakpoint = none) {
      // links
      .link--underline {
        .link--underline() !important;
      }
      .link--none {
        .link--none() !important;
      }
      // various
      .reset-text {
        .reset-text() !important;
      }
      .pointer-events--none {
        .pointer-events--none() !important;
      }
      .links--none {
        .links--none() !important;
      }
      .text-capitalize {
        .text-capitalize() !important;
      }
      .overflow-style {
        .overflow-style() !important;
      }
      .design-setup {
        .design-setup() !important;
      }
      .clearfix {
        .clearfix() !important;
      }
      .user-select--none {
        .user-select--none() !important;
      }
      .user-select--text {
        .user-select--text() !important;
      }
      .accelerate {
        .accelerate() !important;
      }
      .sr-only {
        .sr-only() !important;
      }
      // toggle
      .toggle--block {
        .toggle--block() !important;
      }
      .toggle--flex {
        .toggle--flex() !important;
      }
      .toggle--inline-flex {
        .toggle--inline-flex() !important;
      }
      .toggle--inline {
        .toggle--inline() !important;
      }
      .toggle--inline-block {
        .toggle--inline-block() !important;
      }
      .toggle--none {
        .toggle--none() !important;
      }
      .toggle--visible {
        .toggle--visible() !important;
      }
      .toggle--hidden {
        .toggle--hidden() !important;
      }
      // animation
      .transition-none {
        .transition-none() !important;
      }
      .animation-none {
        .animation-none() !important;
      }
      .trans-anim-none {
        .trans-anim-none() !important;
      }
      .transform-none {
        .transform-none() !important;
      }
      .duration-none {
        .duration-none() !important;
      }
      // responsive
      .responsive {
        .responsive() !important;
      }
      .responsive-y {
        .responsive-y() !important;
      }
      // full
      .full {
        .full() !important;
      }
      .full-y {
        .full-y() !important;
      }
      // block
      .block {
        .block() !important;
      }
      // btn alignment
      .btn--left {
        .btn--left() !important;
      }
      .btn--center {
        .btn--center() !important;
      }
      .btn--right {
        .btn--right() !important;
      }
      // text-transform
      .generate-text-transform(@breakpoint);
      // text-align
      .generate-text-align(@breakpoint);
      // float
      .generate-float(@breakpoint);
      // display
      .generate-display(@breakpoint);
      // visibility
      .generate-visibility(@breakpoint);
      // order
      .generate-order(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // responsive
        .responsive-@{breakpoint} {
          .responsive() !important;
        }
        .responsive-y-@{breakpoint} {
          .responsive-y() !important;
        }
        // full
        .full-@{breakpoint} {
          .full() !important;
        }
        .full-y-@{breakpoint} {
          .full-y() !important;
        }
        // block
        .block-@{breakpoint} {
          .block() !important;
        }
        // btn alignment
        .btn--left-@{breakpoint} {
          .btn--left() !important;
        }
        .btn--center-@{breakpoint} {
          .btn--center() !important;
        }
        .btn--right-@{breakpoint} {
          .btn--right() !important;
        }
        // text-transform
        .generate-text-transform(@breakpoint);
        // text-align
        .generate-text-align(@breakpoint);
        // float
        .generate-float(@breakpoint);
        // display
        .generate-display(@breakpoint);
        // visibility
        .generate-visibility(@breakpoint);
        // order
        .generate-order(@breakpoint);
      }
    }
  }

  // generate-util-responsive

  & when not (@classes--util = true) {

    .generate-util-responsive();
    .generate-util-responsive(@i: length(@classes--util)) when (@i > 0) {
      .generate-util-responsive(@i - 1);
      @breakpoint: extract(@classes--util, @i);
      .generate-utils(@breakpoint);
    }

  }

  // generate-text-transform

  @text-transform--arr: uppercase, lowercase, capitalize, nowrap;

  .generate-text-transform(@breakpoint: none, @i: length(@text-transform--arr)) when (@i > 0) {
    .generate-text-transform(@breakpoint, @i - 1);
    @val: extract(@text-transform--arr, @i);
    & when (@breakpoint = none) {
      .text-transform--@{val} {
        .text-transform(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .text-transform--@{val}-@{breakpoint} {
        .text-transform(@val) !important;
      }
    }
  }

  // generate-text-align

  @text-align--arr: left, right, center;

  .generate-text-align(@breakpoint: none, @i: length(@text-align--arr)) when (@i > 0) {
    .generate-text-align(@breakpoint, @i - 1);
    @val: extract(@text-align--arr, @i);
    & when (@breakpoint = none) {
      .text-align--@{val} {
        .text-align(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .text-align--@{val}-@{breakpoint} {
        .text-align(@val) !important;
      }
    }
  }

  // generate-float

  @float--arr: left, right, none;

  .generate-float(@breakpoint: none, @i: length(@float--arr)) when (@i > 0) {
    .generate-float(@breakpoint, @i - 1);
    @val: extract(@float--arr, @i);
    & when (@breakpoint = none) {
      .float--@{val} {
        .float(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .float--@{val}-@{breakpoint} {
        .float(@val) !important;
      }
    }
  }

  // generate-display

  @display--arr: none, block, inline-block, flex, inline-flex;

  .generate-display(@breakpoint: none, @i: length(@display--arr)) when (@i > 0) {
    .generate-display(@breakpoint, @i - 1);
    @val: extract(@display--arr, @i);
    & when (@breakpoint = none) {
      .display--@{val} {
        .display(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .display--@{val}-@{breakpoint} {
        .display(@val) !important;
      }
    }
  }

  // generate-visibility

  @visibility--arr: hidden, visible;

  .generate-visibility(@breakpoint: none, @i: length(@visibility--arr)) when (@i > 0) {
    .generate-visibility(@breakpoint, @i - 1);
    @val: extract(@visibility--arr, @i);
    & when (@breakpoint = none) {
      .visibility--@{val} {
        .visibility(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .visibility--@{val}-@{breakpoint} {
        .visibility(@val) !important;
      }
    }
  }

  // generate-order

  .generate-order(@breakpoint: none, @i: length(@orders)) when (@i > 0) {
    .generate-order(@breakpoint, @i - 1);
    @num: @i - 1;
    & when (@breakpoint = none) {
      .order--@{num} {
        .order(@num) !important;
      }
    }
    & when not (@breakpoint = none) {
      .order--@{num}-@{breakpoint} {
        .order(@num) !important;
      }
    }
  }

}

/**
 * layout
 */

// list alignment

.list--left(@breakpoint: none) when (@breakpoint = none) {
  .list_btn({ .btn--left(); });
}

.list--left(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    .list_btn({ .btn--left(); });
  }
}

.list--center(@breakpoint: none) when (@breakpoint = none) {
  .list_btn({ .btn--center(); });
}

.list--center(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    .list_btn({ .btn--center(); });
  }
}

.list--right(@breakpoint: none) when (@breakpoint = none) {
  .list_btn({ .btn--right(); });
}

.list--right(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    .list_btn({ .btn--right(); });
  }
}

// row space

.row-space--y(@name, @breakpoint: none) when (@breakpoint = none) {
  @arr: ~"row-space--@{name}";
  @vertical: extract(@@arr, 1);
  margin-top: -@vertical;
  margin-bottom: -@vertical;
  > * {
    padding-top: @vertical;
    padding-bottom: @vertical;
  }
}

.row-space--y(@name, @breakpoint: none) when (default()) {
  @arr: ~"row-space--@{name}";
  @vertical: extract(@@arr, 1);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    margin-top: -@vertical;
    margin-bottom: -@vertical;
    > * {
      padding-top: @vertical;
      padding-bottom: @vertical;
    }
  }
}

.row-space--x(@name, @breakpoint: none) when (@breakpoint = none) {
  @arr: ~"row-space--@{name}";
  @horizontal: extract(@@arr, 2);
  margin-left: -@horizontal;
  margin-right: -@horizontal;
  > * {
    padding-left: @horizontal;
    padding-right: @horizontal;
  }
}

.row-space--x(@name, @breakpoint: none) when (default()) {
  @arr: ~"row-space--@{name}";
  @horizontal: extract(@@arr, 2);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    margin-left: -@horizontal;
    margin-right: -@horizontal;
    > * {
      padding-left: @horizontal;
      padding-right: @horizontal;
    }
  }
}

.row-space(@name, @breakpoint: none) when (@breakpoint = none) {
  @arr: ~"row-space--@{name}";
  @vertical: extract(@@arr, 1);
  @horizontal: extract(@@arr, 2);
  margin: -@vertical -@horizontal;
  > * {
    padding: @vertical @horizontal;
  }
}

.row-space(@name, @breakpoint: none) when (default()) {
  @arr: ~"row-space--@{name}";
  @vertical: extract(@@arr, 1);
  @horizontal: extract(@@arr, 2);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    margin: -@vertical -@horizontal;
    > * {
      padding: @vertical @horizontal;
    }
  }
}

// list space

.list-space--y(@name, @breakpoint: none) when (@breakpoint = none) {
  @arr: ~"list-space--@{name}";
  @vertical: extract(@@arr, 1);
  margin-top: -@vertical;
  margin-bottom: -@vertical;
  > * {
    margin-top: @vertical;
    margin-bottom: @vertical;
  }
}

.list-space--y(@name, @breakpoint: none) when (default()) {
  @arr: ~"list-space--@{name}";
  @vertical: extract(@@arr, 1);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    margin-top: -@vertical;
    margin-bottom: -@vertical;
    > * {
      margin-top: @vertical;
      margin-bottom: @vertical;
    }
  }
}

.list-space--x(@name, @breakpoint: none) when (@breakpoint = none) {
  @arr: ~"list-space--@{name}";
  @horizontal: extract(@@arr, 2);
  margin-left: -@horizontal;
  margin-right: -@horizontal;
  > * {
    margin-left: @horizontal;
    margin-right: @horizontal;
  }
}

.list-space--x(@name, @breakpoint: none) when (default()) {
  @arr: ~"list-space--@{name}";
  @horizontal: extract(@@arr, 2);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    margin-left: -@horizontal;
    margin-right: -@horizontal;
    > * {
      margin-left: @horizontal;
      margin-right: @horizontal;
    }
  }
}

.list-space(@name, @breakpoint: none) when (@breakpoint = none) {
  @arr: ~"list-space--@{name}";
  @vertical: extract(@@arr, 1);
  @horizontal: extract(@@arr, 2);
  margin: -@vertical -@horizontal;
  > * {
    margin: @vertical @horizontal;
  }
}

.list-space(@name, @breakpoint: none) when (default()) {
  @arr: ~"list-space--@{name}";
  @vertical: extract(@@arr, 1);
  @horizontal: extract(@@arr, 2);
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    margin: -@vertical -@horizontal;
    > * {
      margin: @vertical @horizontal;
    }
  }
}

// flex--none

.flex--none(@breakpoint: none) when (@breakpoint = none) {
  flex: none;
}

.flex--none(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    flex: none;
  }
}

// flex--auto

.flex--auto(@breakpoint: none) when (@breakpoint = none) {
  flex: 1 1 auto;
}

.flex--auto(@breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    flex: 1 1 auto;
  }
}

// direction

.flex-direction(@val, @breakpoint: none) when (@breakpoint = none) {
  flex-direction: @val;
}

.flex-direction(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    flex-direction: @val;
  }
}

// wrap

.flex-wrap(@val, @breakpoint: none) when (@breakpoint = none) {
  flex-wrap: @val;
}

.flex-wrap(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    flex-wrap: @val;
  }
}

// justify-content

.justify-content(@val, @breakpoint: none) when (@breakpoint = none) {
  justify-content: @val;
}

.justify-content(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    justify-content: @val;
  }
}

// align-items

.align-items(@val, @breakpoint: none) when (@breakpoint = none) {
  align-items: @val;
}

.align-items(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    align-items: @val;
  }
}

// align-content

.align-content(@val, @breakpoint: none) when (@breakpoint = none) {
  align-content: @val;
}

.align-content(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    align-content: @val;
  }
}

// align-self

.align-self(@val, @breakpoint: none) when (@breakpoint = none) {
  align-self: @val;
}

.align-self(@val, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    align-self: @val;
  }
}

/**
 * generation
 */

& when not (@classes--layout = false) {

  // generate-layouts

  .generate-layouts();
  .generate-layouts(@breakpoint: none) {
    & when (@breakpoint = none) {
      // list alignment
      .list--left {
        .list--left() !important;
      }
      .list--center {
        .list--center() !important;
      }
      .list--right {
        .list--right() !important;
      }
      // row-space
      .generate-row-space(@breakpoint);
      // list-space
      .generate-list-space(@breakpoint);
      // flex util
      .generate-flex-util(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // list alignment
        .list--left-@{breakpoint} {
          .list--left() !important;
        }
        .list--center-@{breakpoint} {
          .list--center() !important;
        }
        .list--right-@{breakpoint} {
          .list--right() !important;
        }
        // row-space
        .generate-row-space(@breakpoint);
        // list-space
        .generate-list-space(@breakpoint);
        // flex util
        .generate-flex-util(@breakpoint);
      }
    }
  }

  // generate-layout-responsive

  & when not (@classes--layout = true) {

    .generate-layout-responsive();
    .generate-layout-responsive(@i: length(@classes--layout)) when (@i > 0) {
      .generate-layout-responsive(@i - 1);
      @breakpoint: extract(@classes--layout, @i);
      .generate-layouts(@breakpoint);
    }

  }

  // generate-row-space

  .generate-row-space(@breakpoint: none, @i: length(@row-spaces)) when (@i > 0) {
    .generate-row-space(@breakpoint, @i - 1);
    @name: extract(@row-spaces, @i);
    & when (@breakpoint = none) {
      .row-space--y-@{name} {
        .row-space--y(@name) !important;
      }
      .row-space--x-@{name} {
        .row-space--x(@name) !important;
      }
      .row-space--@{name} {
        .row-space(@name) !important;
      }
    }
    & when not (@breakpoint = none) {
      .row-space--y-@{name}-@{breakpoint} {
        .row-space--y(@name) !important;
      }
      .row-space--x-@{name}-@{breakpoint} {
        .row-space--x(@name) !important;
      }
      .row-space--@{name}-@{breakpoint} {
        .row-space(@name) !important;
      }
    }
  }

  // generate-list-space

  .generate-list-space(@breakpoint: none, @i: length(@list-spaces)) when (@i > 0) {
    .generate-list-space(@breakpoint, @i - 1);
    @name: extract(@list-spaces, @i);
    & when (@breakpoint = none) {
      .list-space--y-@{name} {
        .list-space--y(@name) !important;
      }
      .list-space--x-@{name} {
        .list-space--x(@name) !important;
      }
      .list-space--@{name} {
        .list-space(@name) !important;
      }
    }
    & when not (@breakpoint = none) {
      .list-space--y-@{name}-@{breakpoint} {
        .list-space--y(@name) !important;
      }
      .list-space--x-@{name}-@{breakpoint} {
        .list-space--x(@name) !important;
      }
      .list-space--@{name}-@{breakpoint} {
        .list-space(@name) !important;
      }
    }
  }

  // .generate-flex-util

  .generate-flex-util(@breakpoint: none) {
    & when (@breakpoint = none) {
      .flex--none {
        .flex--none() !important;
      }
      .flex--auto {
        .flex--auto() !important;
      }
      .flex-direction--row {
        .flex-direction(row) !important;
      }
      .flex-direction--row-reverse {
        .flex-direction(row-reverse) !important;
      }
      .flex-direction--column {
        .flex-direction(column) !important;
      }
      .flex-direction--column-reverse {
        .flex-direction(column-reverse) !important;
      }
      .flex-wrap--wrap {
        .flex-wrap(wrap) !important;
      }
      .flex-wrap--wrap-reverse {
        .flex-wrap(wrap-reverse) !important;
      }
      .flex-wrap--nowrap {
        .flex-wrap(nowrap) !important;
      }
      .justify-content--flex-start {
        .justify-content(flex-start) !important;
      }
      .justify-content--flex-end {
        .justify-content(flex-end) !important;
      }
      .justify-content--center {
        .justify-content(center) !important;
      }
      .justify-content--space-between {
        .justify-content(space-between) !important;
      }
      .justify-content--space-around {
        .justify-content(space-around) !important;
      }
      .align-items--flex-start {
        .align-items(flex-start) !important;
      }
      .align-items--flex-end {
        .align-items(flex-end) !important;
      }
      .align-items--center {
        .align-items(center) !important;
      }
      .align-items--baseline {
        .align-items(baseline) !important;
      }
      .align-items--stretch {
        .align-items(stretch) !important;
      }
      .align-content--flex-start {
        .align-content(flex-start) !important;
      }
      .align-content--flex-end {
        .align-content(flex-end) !important;
      }
      .align-content--center {
        .align-content(center) !important;
      }
      .align-content--space-between {
        .align-content(space-between) !important;
      }
      .align-content--space-around {
        .align-content(space-around) !important;
      }
      .align-content--stretch {
        .align-content(stretch) !important;
      }
      .align-self--flex-start {
        .align-self(start) !important;
      }
      .align-self--flex-end {
        .align-self(flex-end) !important;
      }
      .align-self--center {
        .align-self(center) !important;
      }
      .align-self--baseline {
        .align-self(baseline) !important;
      }
      .align-self--stretch {
        .align-self(stretch) !important;
      }
      .align-self--auto {
        .align-self(auto) !important;
      }
    }
    & when not (@breakpoint = none) {
      .flex--none-@{breakpoint} {
        .flex--none() !important;
      }
      .flex--auto-@{breakpoint} {
        .flex--auto() !important;
      }
      .flex-direction--row-@{breakpoint} {
        .flex-direction(row) !important;
      }
      .flex-direction--row-reverse-@{breakpoint} {
        .flex-direction(row-reverse) !important;
      }
      .flex-direction--column-@{breakpoint} {
        .flex-direction(column) !important;
      }
      .flex-direction--column-reverse-@{breakpoint} {
        .flex-direction(column-reverse) !important;
      }
      .flex-wrap--wrap-@{breakpoint} {
        .flex-wrap(wrap) !important;
      }
      .flex-wrap--wrap-reverse-@{breakpoint} {
        .flex-wrap(wrap-reverse) !important;
      }
      .flex-wrap--nowrap-@{breakpoint} {
        .flex-wrap(nowrap) !important;
      }
      .justify-content--flex-start-@{breakpoint} {
        .justify-content(flex-start) !important;
      }
      .justify-content--flex-end-@{breakpoint} {
        .justify-content(flex-end) !important;
      }
      .justify-content--center-@{breakpoint} {
        .justify-content(center) !important;
      }
      .justify-content--space-between-@{breakpoint} {
        .justify-content(space-between) !important;
      }
      .justify-content--space-around-@{breakpoint} {
        .justify-content(space-around) !important;
      }
      .align-items--flex-start-@{breakpoint} {
        .align-items(flex-start) !important;
      }
      .align-items--flex-end-@{breakpoint} {
        .align-items(flex-end) !important;
      }
      .align-items--center-@{breakpoint} {
        .align-items(center) !important;
      }
      .align-items--baseline-@{breakpoint} {
        .align-items(baseline) !important;
      }
      .align-items--stretch-@{breakpoint} {
        .align-items(stretch) !important;
      }
      .align-content--flex-start-@{breakpoint} {
        .align-content(flex-start) !important;
      }
      .align-content--flex-end-@{breakpoint} {
        .align-content(flex-end) !important;
      }
      .align-content--center-@{breakpoint} {
        .align-content(center) !important;
      }
      .align-content--space-between-@{breakpoint} {
        .align-content(space-between) !important;
      }
      .align-content--space-around-@{breakpoint} {
        .align-content(space-around) !important;
      }
      .align-content--stretch-@{breakpoint} {
        .align-content(stretch) !important;
      }
      .align-self--auto-@{breakpoint} {
        .align-self(auto) !important;
      }
      .align-self--flex-start-@{breakpoint} {
        .align-self(flex-start) !important;
      }
      .align-self--flex-end-@{breakpoint} {
        .align-self(flex-end) !important;
      }
      .align-self--center-@{breakpoint} {
        .align-self(center) !important;
      }
      .align-self--baseline-@{breakpoint} {
        .align-self(baseline) !important;
      }
      .align-self--stretch-@{breakpoint} {
        .align-self(stretch) !important;
      }
    }
  }

}

/**
 * grid
 */

// generate-container-space-responsive

.generate-container-space-responsive();
.generate-container-space-responsive(@i: length(@container--space)) when (@i > 0) {
  .generate-container-space-responsive(@i - 1);
  @container: extract(@container--space, @i);
  @breakpoint: extract(@container, 1);
  @val: extract(@container, 2);
  & when (@breakpoint = none) {
    .container {
      padding-right: @val;
      padding-left: @val;
    }
  }
  & when not (@breakpoint = none) {
    @query-min: 'min-@{breakpoint}';
    @media @@query-min {
      .container {
        padding-right: @val;
        padding-left: @val;
      }
    }
  }
}

/**
 * generation
 */

& when not (@classes--grid = false) {

  // generate-grid

  .generate-grid(@breakpoint: none; @i: 1) when (@i =< @columns) {
    .generate-grid(@breakpoint; (@i + 1));
    & when (@breakpoint = none) {
      .col-@{i} {
        .col(@i) !important;
      }
    }
    & when not (@breakpoint = none) {
      .col-@{i}-@{breakpoint} {
        .col(@i) !important;
      }
    }
  }

  // generate-grids

  .generate-grids();
  .generate-grids(@breakpoint: none) {
    & when (@breakpoint = none) {
      // grid
      .col-auto {
        .col-auto() !important;
      }
      .generate-grid() !important;
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // grid
        .col-auto-@{breakpoint} {
          .col-auto() !important;
        }
        .generate-grid(@breakpoint) !important;
      }
    }
  }

  // generate-grid-responsive

  & when not (@classes--grid = true) {

    .generate-grid-responsive();
    .generate-grid-responsive(@i: length(@classes--grid)) when (@i > 0) {
      .generate-grid-responsive(@i - 1);
      @breakpoint: extract(@classes--grid, @i);
      .generate-grids(@breakpoint);
    }

  }

}

/**
 * margin
 */

// margin

.margin(@pos: all, @size, @breakpoint: none) when (@breakpoint = none) {
  & when (isnumber(@size)) {
    .print-margin(@pos, @size, @breakpoint);
  }
  & when not (isnumber(@size)) {
    .loop-margin(@pos, @size, @breakpoint);
  }
  // layout
  & when (@size = layout) and (@pos = y) {
    &:first-child {
      margin-top: 0;
    }
    &:last-child {
      margin-bottom: 0;
    }
  }
  & when (@size = layout) and (@pos = x) {
    &:first-child {
      margin-left: 0;
    }
    &:last-child {
      margin-right: 0;
    }
  }
  & when (@size = layout) and (@pos = top) {
    &:first-child {
      margin-top: 0;
    }
  }
  & when (@size = layout) and (@pos = bottom) {
    &:last-child {
      margin-bottom: 0;
    }
  }
  & when (@size = layout) and (@pos = left) {
    &:first-child {
      margin-left: 0;
    }
  }
  & when (@size = layout) and (@pos = right) {
    &:last-child {
      margin-right: 0;
    }
  }
}

.margin(@pos: all, @size, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    & when (isnumber(@size)) {
      .print-margin(@pos, @size, @breakpoint);
    }

    & when not (isnumber(@size)) {
      .loop-margin(@pos, @size, @breakpoint);
    }
  }
}

.loop-margin(@pos: all, @size, @breakpoint: none, @i: length(@margins)) when (@i > 0) {
  .loop-margin(@pos, @size, @breakpoint: none, @i - 1);
  @margin: extract(@margins, @i);
  @name: extract(@margin, 1);
  @val: extract(@margin, 2);
  & when (@name = @size) {
    .print-margin(@pos, @val, @breakpoint);
  }
}

.print-margin(@pos, @val, @breakpoint) when (@pos = all) {
  margin: @val;
}
.print-margin(@pos, @val, @breakpoint) when (@pos = y) {
  margin-top: @val;
  margin-bottom: @val;
}
.print-margin(@pos, @val, @breakpoint) when (@pos = x) {
  margin-left: @val;
  margin-right: @val;
}
.print-margin(@pos, @val, @breakpoint) when (@pos = top) {
  margin-top: @val;
}
.print-margin(@pos, @val, @breakpoint) when (@pos = bottom) {
  margin-bottom: @val;
}
.print-margin(@pos, @val, @breakpoint) when (@pos = left) {
  margin-left: @val;
}
.print-margin(@pos, @val, @breakpoint) when (@pos = right) {
  margin-right: @val;
}

// margin-remove

.margin-remove(@pos: all, @size, @breakpoint: none) when (@breakpoint = none) {
  & when (isnumber(@size)) {
    .print-margin-remove(@pos, @size, @breakpoint);
  }
  & when not (isnumber(@size)) {
    .loop-margin-remove(@pos, @size, @breakpoint);
  }
}

.margin-remove(@pos: all, @size, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    & when (isnumber(@size)) {
      .print-margin-remove(@pos, @size, @breakpoint);
    }

    & when not (isnumber(@size)) {
      .loop-margin-remove(@pos, @size, @breakpoint);
    }
  }
}

.loop-margin-remove(@pos: all, @size, @breakpoint: none, @i: length(@margins)) when (@i > 0) {
  .loop-margin-remove(@pos, @size, @breakpoint: none, @i - 1);
  @margin: extract(@margins, @i);
  @name: extract(@margin, 1);
  @val: extract(@margin, 2);
  & when (@name = @size) {
    .print-margin-remove(@pos, @val, @breakpoint);
  }
}

.print-margin-remove(@pos, @val, @breakpoint) when (@pos = all) {
  margin: -@val;
}
.print-margin-remove(@pos, @val, @breakpoint) when (@pos = y) {
  margin-top: -@val;
  margin-bottom: -@val;
}
.print-margin-remove(@pos, @val, @breakpoint) when (@pos = x) {
  margin-left: -@val;
  margin-right: -@val;
}
.print-margin-remove(@pos, @val, @breakpoint) when (@pos = top) {
  margin-top: -@val;
}
.print-margin-remove(@pos, @val, @breakpoint) when (@pos = bottom) {
  margin-bottom: -@val;
}
.print-margin-remove(@pos, @val, @breakpoint) when (@pos = left) {
  margin-left: -@val;
}
.print-margin-remove(@pos, @val, @breakpoint) when (@pos = right) {
  margin-right: -@val;
}

/**
 * generation
 */

& when not (@classes--margin = false) {

  /**
   * margin
   */

  @margin--arr: none, y, x, t, b, l, r;

  // layout

  .m-y-layout {
    .margin(y, layout) !important;
  }
  .m-x-layout {
    .margin(x, layout) !important;
  }
  .m-top-layout {
    .margin(top, layout) !important;
  }
  .m-bottom-layout {
    .margin(bottom, layout) !important;
  }
  .m-left-layout {
    .margin(left, layout) !important;
  }
  .m-right-layout {
    .margin(right, layout) !important;
  }

  // generate-margin

  .generate-margins();
  .generate-margins(@breakpoint: none) {
    & when (@breakpoint = none) {
      .generate-margin(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        .generate-margin(@breakpoint);
      }
    }
  }

  // generate-margins

  .generate-margin(@breakpoint: none, @i: length(@margin--arr)) when (@i > 0) {
    .generate-margin(@breakpoint, @i - 1);
    @pos: extract(@margin--arr, @i);
    .generate-margin-loop(@pos, @breakpoint);
  }
  .generate-margin-loop(@pos, @breakpoint, @i: length(@margins)) when (@i > 0) {
    .generate-margin-loop(@pos, @breakpoint, @i - 1);
    @margin: extract(@margins, @i);
    @name: extract(@margin, 1);
    @size: extract(@margin, 2);
    & when (@breakpoint = none) {
      & when (@pos = none) {
        .m-@{name} {
          .margin(@pos, @name, @breakpoint) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m-@{name}-remove {
            .margin-remove(@pos, @name, @breakpoint) !important;
          }
        }
      }
      & when not (@pos = none) {
        .m@{pos}--@{name} {
          .margin(@pos, @name, @breakpoint) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m@{pos}--@{name}-remove {
            .margin-remove(@pos, @name, @breakpoint) !important;
          }
        }
      }
    }
    & when not (@breakpoint = none) {
      & when (@pos = none) {
        .m-@{name}-@{breakpoint} {
          .margin(@pos, @name) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m-@{name}-@{breakpoint}-remove {
            .margin-remove(@pos, @name) !important;
          }
        }
      }
      & when not (@pos = none) {
        .m@{pos}--@{name}-@{breakpoint} {
          .margin(@pos, @name) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m@{pos}--@{name}-@{breakpoint}-remove {
            .margin-remove(@pos, @name) !important;
          }
        }
      }
    }
  }

  // generate-margin-responsive

  & when not (@classes--margin = true) {

    .generate-margin-responsive();
    .generate-margin-responsive(@i: length(@classes--margin)) when (@i > 0) {
      .generate-margin-responsive(@i - 1);
      @breakpoint: extract(@classes--margin, @i);
      .generate-margins(@breakpoint);
    }

  }

}

/**
 * padding
 */

// padding

.padding(@pos: all, @size, @breakpoint: none) when (@breakpoint = none) {
  & when (isnumber(@size)) {
    .print-padding(@pos, @size, @breakpoint);
  }
  & when not (isnumber(@size)) {
    .loop-padding(@pos, @size, @breakpoint);
  }
  // layout
  & when (@size = layout) and (@pos = y) {
    &:first-child {
      padding-top: 0;
    }
    &:last-child {
      padding-bottom: 0;
    }
  }
  & when (@size = layout) and (@pos = x) {
    &:first-child {
      padding-left: 0;
    }
    &:last-child {
      padding-right: 0;
    }
  }
  & when (@size = layout) and (@pos = top) {
    &:first-child {
      padding-top: 0;
    }
  }
  & when (@size = layout) and (@pos = bottom) {
    &:last-child {
      padding-bottom: 0;
    }
  }
  & when (@size = layout) and (@pos = left) {
    &:first-child {
      padding-left: 0;
    }
  }
  & when (@size = layout) and (@pos = right) {
    &:last-child {
      padding-right: 0;
    }
  }
}

.padding(@pos: all, @size, @breakpoint: none) when (default()) {
  @query-min: 'min-@{breakpoint}';
  @media @@query-min {
    & when (isnumber(@size)) {
      .print-padding(@pos, @size, @breakpoint);
    }

    & when not (isnumber(@size)) {
      .loop-padding(@pos, @size, @breakpoint);
    }
  }
}

.loop-padding(@pos: all, @size, @breakpoint: none, @i: length(@paddings)) when (@i > 0) {
  .loop-padding(@pos, @size, @breakpoint: none, @i - 1);
  @padding: extract(@paddings, @i);
  @name: extract(@padding, 1);
  @val: extract(@padding, 2);
  & when (@name = @size) {
    .print-padding(@pos, @val, @breakpoint);
  }
}

.print-padding(@pos, @val, @breakpoint) when (@pos = all) {
  padding: @val;
}
.print-padding(@pos, @val, @breakpoint) when (@pos = y) {
  padding-top: @val;
  padding-bottom: @val;
}
.print-padding(@pos, @val, @breakpoint) when (@pos = x) {
  padding-left: @val;
  padding-right: @val;
}
.print-padding(@pos, @val, @breakpoint) when (@pos = top) {
  padding-top: @val;
}
.print-padding(@pos, @val, @breakpoint) when (@pos = bottom) {
  padding-bottom: @val;
}
.print-padding(@pos, @val, @breakpoint) when (@pos = left) {
  padding-left: @val;
}
.print-padding(@pos, @val, @breakpoint) when (@pos = right) {
  padding-right: @val;
}

/**
 * generation
 */

& when not (@classes--padding = false) {

  /**
   * padding
   */

  @padding--arr: none, y, x, t, b, l, r;

  // layout

  .p-y-layout {
    .padding(y, layout) !important;
  }
  .p-x-layout {
    .padding(x, layout) !important;
  }
  .p-top-layout {
    .padding(top, layout) !important;
  }
  .p-bottom-layout {
    .padding(bottom, layout) !important;
  }
  .p-left-layout {
    .padding(left, layout) !important;
  }
  .p-right-layout {
    .padding(right, layout) !important;
  }

  // generate-padding

  .generate-paddings();
  .generate-paddings(@breakpoint: none) {
    & when (@breakpoint = none) {
      .generate-padding(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        .generate-padding(@breakpoint);
      }
    }
  }
  .generate-padding(@breakpoint: none, @i: length(@padding--arr)) when (@i > 0) {
    .generate-padding(@breakpoint, @i - 1);
    @pos: extract(@padding--arr, @i);
    .generate-padding-loop(@pos, @breakpoint);
  }
  .generate-padding-loop(@pos, @breakpoint, @i: length(@paddings)) when (@i > 0) {
    .generate-padding-loop(@pos, @breakpoint, @i - 1);
    @padding: extract(@paddings, @i);
    @name: extract(@padding, 1);
    @size: extract(@padding, 2);
    & when (@breakpoint = none) {
      & when (@pos = none) {
        .p-@{name} {
          .padding(@pos, @name, @breakpoint) !important;
        }
      }
      & when not (@pos = none) {
        .p@{pos}--@{name} {
          .padding(@pos, @name, @breakpoint) !important;
        }
      }
    }
    & when not (@breakpoint = none) {
      & when (@pos = none) {
        .p-@{name}-@{breakpoint} {
          .padding(@pos, @name) !important;
        }
      }
      & when not (@pos = none) {
        .p@{pos}--@{name}-@{breakpoint} {
          .padding(@pos, @name) !important;
        }
      }
    }
  }

  // generate-padding-responsive

  & when not (@classes--padding = true) {

    .generate-padding-responsive();
    .generate-padding-responsive(@i: length(@classes--padding)) when (@i > 0) {
      .generate-padding-responsive(@i - 1);
      @breakpoint: extract(@classes--padding, @i);
      .generate-paddings(@breakpoint);
    }

  }

}
