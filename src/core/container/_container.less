/**
 * container
 */

.container {
  display: block;
  float: none;
  .margin(x, auto);
  width: 100%;
  max-width: @container-max;
  .container-space();
}

/**
 * @generate-container-space
 */

.container-space {

  // generate

  & when not (@generate-container-space = false) {

    // generate-container-space-responsive

    .generate-container-space-responsive();
    .generate-container-space-responsive(@i: length(@generate-container-space)) when (@i > 0) {
      .generate-container-space-responsive(@i - 1);
      @container: extract(@generate-container-space, @i);
      @breakpoint: extract(@container, 1);
      @val: extract(@container, 2);
      & when (@breakpoint = none) {
        padding-right: @val;
        padding-left: @val;
      }
      & when not (@breakpoint = none) {
        @query-min: 'min-@{breakpoint}';
        @media @@query-min {
          padding-right: @val;
          padding-left: @val;
        }
      }
    }

  }

}

/**
 * @generate-container-space
 */

.container-space-remove {

  // generate

  & when not (@generate-container-space = false) {

    // generate-container-space-remove-responsive

    .generate-container-space-remove-responsive();
    .generate-container-space-remove-responsive(@i: length(@generate-container-space)) when (@i > 0) {
      .generate-container-space-remove-responsive(@i - 1);
      @container: extract(@generate-container-space, @i);
      @breakpoint: extract(@container, 1);
      @val: extract(@container, 2);
      & when (@breakpoint = none) {
        margin-right: -@val;
        margin-left: -@val;
      }
      & when not (@breakpoint = none) {
        @query-min: 'min-@{breakpoint}';
        @media @@query-min {
          margin-right: -@val;
          margin-left: -@val;
        }
      }
    }

  }

}
