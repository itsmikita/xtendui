/**
 * overlay
 */

.overlay {
  .toggle-flex();
  position: fixed;
  z-index: @index-overlay;
  top: 0;
  left: 0;
  bottom: 0; // @FIX no height or it bugs collapse animation
  right: 0; // @FIX no width or it bugs collapse animation
  // scroll
  overflow: hidden;
  .overflow-style();
}

.overlay-container {
  display: flex;
  flex-wrap: nowrap;
  flex-direction: column;
  justify-content: center;
  margin: auto; // @FIX http://stackoverflow.com/questions/33454533/cant-scroll-to-top-of-flex-item-that-is-overflowing-container
  width: 100%;
  min-height: 100vh;
  .overlay-space();
}

.overlay-inner {
  display: flex;
  justify-content: center;
  align-items: center;
  align-self: center;
  position: relative;
  z-index: @index-overlay;
  width: 100%;
}

.overlay-design {
  .design-setup();
  border-radius: inherit;
}

// addons

.overlay--disable {
  .xt-disable();
  display: flex !important;
  overflow: initial !important;
  html.xt-scrollbar & {
    overflow: initial !important;
  }
  position: static;
  z-index: initial;
  top: auto;
  left: auto;
  bottom: auto;
  right: auto;
  width: auto;
  height: auto;
  .overlay-container {
    padding: 0;
    width: auto;
    min-height: auto;
    .overlay-inner {
      z-index: initial;
      .overlay-design {
        display: none;
      }
      .box-overlay {
        .box--disable();
      }
      .btn-close {
        display: none !important;
      }
    }
    .overlay-inner, .box-overlay > .box-inner > .box-content {
      max-width: none;
    }
  }
  > .backdrop {
    display: none !important;
  }
}

/**
 * @generate-overlay-size
 */

.overlay-size(@name) {
  // .by-key(@generate-overlay-size, @name);
  @arr: ~"overlay--@{name}";
  @val: @@arr;
  .overlay-inner, .box-overlay > .box-inner > .box-content {
    max-width: @val;
  }
}

.generate-overlay-size();
.generate-overlay-size(@i: length(@generate-overlay-size)) when (@i > 0) {
  .generate-overlay-size(@i - 1);
  @name: extract(@generate-overlay-size, @i);
  .overlay--@{name} {
    .overlay-size(@name) !important;
  }
}

/**
 * @generate-overlay-space
 */

.overlay-space {

  // generate

  & when not (@generate-overlay-space = false) {

    // generate-overlay-space-responsive

    .generate-overlay-space-responsive();
    .generate-overlay-space-responsive(@i: length(@generate-overlay-space)) when (@i > 0) {
      .generate-overlay-space-responsive(@i - 1);
      @overlay: extract(@generate-overlay-space, @i);
      @breakpoint: extract(@overlay, 1);
      @val: extract(@overlay, 2);
      & when (@breakpoint = none) {
        padding: @val;
      }
      & when not (@breakpoint = none) {
        @query-min: 'min-@{breakpoint}';
        @media @@query-min {
          padding: @val;
        }
      }
    }

  }

}
